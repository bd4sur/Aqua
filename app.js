/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  common.js
//
//    全局参数、常量、工具函数定义。
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//
//  编 码 器 全 局 常 量 和 全 局 缓 存 （需要放在模块依赖链条的最前面）
//
/////////////////////////////////////////////////////////////////
// 采样率（枚举）
const SAMPLE_RATE_32000 = 0;
const SAMPLE_RATE_44100 = 1;
const SAMPLE_RATE_48000 = 2;
// 采样率数值及其编码
const SAMPLE_RATE_VALUE = [32000, 44100, 48000];
const SAMPLE_RATE_BINCODE = ["10", "00", "01"];
// 比特率（枚举）
const BIT_RATE_64K = 0;
const BIT_RATE_128K = 1;
const BIT_RATE_224K = 2;
const BIT_RATE_320K = 3;
// 比特率数值及其编码
const BIT_RATE_VALUE = [64000, 128000, 224000, 320000];
const BIT_RATE_BINCODE = ["0101", "1001", "1100", "1110"];
// 块类型枚举，用于表格索引
const LONG_BLOCK = 0;
const SHORT_BLOCK = 1;
const WINDOW_NORMAL = 0;
const WINDOW_START = 1;
const WINDOW_SHORT = 2;
const WINDOW_STOP = 3;
// MDCT系数表
let MDCT_FACTOR_36 = new Array();
let MDCT_FACTOR_12 = new Array();
// 量化计算 数值表
const ROOT_2_4 = 1.189207115002721;
let INV_POWER_OF_ROOT_2_4 = new Array();
let POWER_OF_ROOT_2_4 = new Array();
// 帧间共享缓存（用于子带滤波、心理声学模型）
let BUFFER = new Array();
// 比特储备池，单位为bit
let RESERVOIR_MAX = 0;
let RESERVOIR_SIZE = 0;
// 哈夫曼表（以数组结构存储）
let HTABLES = new Array();
// 尺度因子频带划分表 @reference Table.B.8(p62)
const ScaleFactorBands = [
    // 32kHz
    [
        // Long Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 19], [20, 23],
            [24, 29], [30, 35], [36, 43], [44, 53], [54, 65],
            [66, 81], [82, 101], [102, 125], [126, 155], [156, 193],
            [194, 239], [240, 295], [296, 363], [364, 447], [448, 549]
        ],
        // Short Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 21], [22, 29],
            [30, 41], [42, 57], [58, 77], [78, 103], [104, 137], [138, 179]
        ]
    ],
    // 44.1kHz
    [
        // Long Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 19], [20, 23],
            [24, 29], [30, 35], [36, 43], [44, 51], [52, 61],
            [62, 73], [74, 89], [90, 109], [110, 133], [134, 161],
            [162, 195], [196, 237], [238, 287], [288, 341], [342, 417]
        ],
        // Short Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 21], [22, 29],
            [30, 39], [40, 51], [52, 65], [66, 83], [84, 105], [106, 135]
        ]
    ],
    // 48kHz
    [
        // Long Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 19], [20, 23],
            [24, 29], [30, 35], [36, 41], [42, 49], [50, 59],
            [60, 71], [72, 87], [88, 105], [106, 127], [128, 155],
            [156, 189], [190, 229], [230, 275], [276, 329], [330, 383]
        ],
        // Short Blocks
        [
            [0, 3], [4, 7], [8, 11], [12, 15], [16, 21], [22, 27],
            [28, 37], [38, 49], [50, 63], [64, 79], [80, 99], [100, 125]
        ]
    ]
];
// 尺度因子长度编码 @reference 2.4.2.7(p26)
const SF_COMPRESS_INDEX = [
    [0, 0], [0, 1], [0, 2], [0, 3], [3, 0], [1, 1], [1, 2], [1, 3],
    [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3], [4, 2], [4, 3]
];
const SF_COMPRESS = [
    // slen2= 0   1   2   3
    [0, 1, 2, 3],
    [-1, 5, 6, 7],
    [-1, 8, 9, 10],
    [4, 11, 12, 13],
    [-1, -1, 14, 15], // slen1 = 4
];
/////////////////////////////////////////////////////////////////
//
//  编 码 器 全 局 参 数
//
/////////////////////////////////////////////////////////////////
// 采样率
let SAMPLE_RATE = SAMPLE_RATE_44100;
// 比特率
let BIT_RATE = BIT_RATE_320K;
// 声道数（最大设为2）
let CHANNELS = 2;
/////////////////////////////////////////////////////////////////
//
//  工 具 函 数
//
/////////////////////////////////////////////////////////////////
function LOG(x) {
    // console.log(x);
}
// 返回某正整数的指定长度的二进制串
function BinaryString(intNumber, length) {
    let seq = "";
    let shift = Math.ceil(length / 4);
    let remain = 4 - length % 4;
    for (let i = 0; i < shift; i++) {
        let rightBits = (intNumber & 15);
        switch (rightBits) {
            case 0:
                seq = "0000" + seq;
                break;
            case 1:
                seq = "0001" + seq;
                break;
            case 2:
                seq = "0010" + seq;
                break;
            case 3:
                seq = "0011" + seq;
                break;
            case 4:
                seq = "0100" + seq;
                break;
            case 5:
                seq = "0101" + seq;
                break;
            case 6:
                seq = "0110" + seq;
                break;
            case 7:
                seq = "0111" + seq;
                break;
            case 8:
                seq = "1000" + seq;
                break;
            case 9:
                seq = "1001" + seq;
                break;
            case 10:
                seq = "1010" + seq;
                break;
            case 11:
                seq = "1011" + seq;
                break;
            case 12:
                seq = "1100" + seq;
                break;
            case 13:
                seq = "1101" + seq;
                break;
            case 14:
                seq = "1110" + seq;
                break;
            case 15:
                seq = "1111" + seq;
                break;
            default: break;
        }
        intNumber = intNumber >> 4;
    }
    if (remain === 4) {
        return seq;
    }
    else {
        return seq.substring(remain);
    }
}
// 二进制串转无符号整数
function BinaryStringToUint(bstr) {
    let sum = 0;
    for (let i = bstr.length; i >= 0; i--) {
        if (bstr[i] === "1") {
            sum += (1 << (bstr.length - i - 1));
        }
    }
    return sum;
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  fft.js
//
//    快速傅里叶变换。供心理声学模型使用。
//    来源：https://github.com/bd4sur/Fourier
//
/////////////////////////////////////////////////////////////////
function FFT(length) {
    // 对数查找表
    this.LOG_2 = {
        '1': 0, '2': 1, '4': 2, '8': 3, '16': 4, '32': 5, '64': 6, '128': 7, '256': 8,
        '512': 9, '1024': 10, '2048': 11, '4096': 12, '8192': 13, '16384': 14, '32768': 15, '65536': 16,
    };
    if (!(length in this.LOG_2)) {
        throw 'FFT: 输入序列长度必须是2的幂。';
    }
    this.length = length;
    this.W_fft = new Array();
    this.W_ifft = new Array();
    this.reversed_input_index = new Array();
    this.initialize();
}
FFT.prototype = {
    // 初始化
    initialize: function () {
        this.W_fft = this.twiddle_factor(this.length, false);
        this.W_ifft = this.twiddle_factor(this.length, true);
        this.reversed_input_index = this.binary_reverse(this.length);
    },
    // 计算旋转因子
    twiddle_factor: function (length, isIFFT) {
        let W_r = new Array();
        let W_i = new Array();
        // 只需要用到0~(length-1)的旋转因子
        for (let i = 0; i < (length >> 1); i++) {
            // W[i] = exp(-2*pi*j*(i/N))
            W_r[i] = Math.cos(2.0 * Math.PI * (i / length));
            W_i[i] = Math.sin(2.0 * Math.PI * (i / length));
            if (!isIFFT) {
                W_i[i] *= (-1);
            }
        }
        return [W_r, W_i];
    },
    // 计算二进制位倒置的输入下标（蝶形结输入侧的下标）
    binary_reverse: function (length) {
        let reversed_index = new Array();
        let temp = 0;
        let bit_width = (this.LOG_2)[length];
        for (let i = 0; i < length; i++) {
            temp = i;
            reversed_index[i] = 0;
            for (let c = 0; c < bit_width; c++) {
                if (((temp >> c) & 1) !== 0) {
                    reversed_index[i] += (1 << (bit_width - 1 - c)); // 2^(bit_width-1-c);
                }
            }
        }
        return reversed_index;
    },
    // 时域抽取的蝶形结算法（C-T算法）
    basic_fft: function (complex_input, W) {
        let length = this.length;
        let reversed_input_index = this.reversed_input_index;
        let W_r = W[0]; // Re
        let W_i = W[1]; // Im
        let input_r = complex_input[0]; // Re
        let input_i = complex_input[1]; // Re
        let M = (this.LOG_2)[length];
        // 初始化两个缓存数组，用来交替存储各级蝶形运算的结果
        let buf = new Array();
        buf[0] = new Array();
        buf[1] = new Array();
        buf[0][0] = new Array(); // Re
        buf[0][1] = new Array(); // Im
        buf[1][0] = new Array(); // Re
        buf[1][1] = new Array(); // Im
        for (let i = 0; i < length; i++) {
            buf[0][0][i] = 0;
            buf[0][1][i] = 0;
            buf[1][0][i] = 0;
            buf[1][1][i] = 0;
        }
        // 蝶形结计算
        let level = 0;
        for (level = 0; level < (((M & 1) === 0) ? M : (M + 1)); level++) {
            for (let group = 0; group < (1 << (M - level - 1)); group++) {
                for (let i = 0; i < (1 << level); i++) {
                    let index_a = i + (group << (level + 1));
                    let index_b = index_a + (1 << level);
                    let input_index_a = reversed_input_index[index_a];
                    let input_index_b = reversed_input_index[index_b];
                    let scale_factor = (1 << (M - level - 1));
                    let Wr = W_r[i * scale_factor]; // Re
                    let Wi = W_i[i * scale_factor]; // Im
                    let buf1_r, buf1_i, buf2_r, buf2_i;
                    if (level === 0) {
                        buf1_r = input_r[input_index_a]; // Re
                        buf1_i = input_i[input_index_a]; // Im
                        buf2_r = input_r[input_index_b]; // Re
                        buf2_i = input_i[input_index_b]; // Im
                    }
                    else {
                        buf1_r = buf[(level + 1) & 1][0][index_a]; // Re
                        buf1_i = buf[(level + 1) & 1][1][index_a]; // Im
                        buf2_r = buf[(level + 1) & 1][0][index_b]; // Re
                        buf2_i = buf[(level + 1) & 1][1][index_b]; // Im
                    }
                    buf[level & 1][0][index_a] = buf1_r + (Wr * buf2_r - Wi * buf2_i); // Re
                    buf[level & 1][1][index_a] = buf1_i + (Wr * buf2_i + Wi * buf2_r); // Im
                    buf[level & 1][0][index_b] = buf1_r - (Wr * buf2_r - Wi * buf2_i); // Re
                    buf[level & 1][1][index_b] = buf1_i - (Wr * buf2_i + Wi * buf2_r); // Im
                }
            }
        }
        let output_r = ((M & 1) === 0) ? buf[(level + 1) & 1][0] : buf[level & 1][0];
        let output_i = ((M & 1) === 0) ? buf[(level + 1) & 1][1] : buf[level & 1][1];
        return [output_r, output_i];
    },
    // 正变换
    fft: function (complex_input) {
        return this.basic_fft(complex_input, this.W_fft);
    },
    // 反变换
    ifft: function (complex_input) {
        let output = this.basic_fft(complex_input, this.W_ifft);
        let ifft_r = new Array();
        let ifft_i = new Array();
        for (let i = 0; i < this.length; i++) {
            ifft_r[i] = output[0][i] / this.length;
            ifft_i[i] = output[1][i] / this.length;
        }
        return [ifft_r, ifft_i];
    },
};
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  psy.js
//
//    第二心理声学模型。包括常数表、模型算法。
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//
//   心 理 声 学 模 型 参 数
//
/////////////////////////////////////////////////////////////////
// 以下是标准附录C提供的参数，Layer3编码器实际使用这些参数进行PAM参数的计算。直接从dist10的源码中复制而来。
// Table C.7 [SampleRateIndex][BlockType][PartitionIndex]
const PAM_TABLES_C7 = [
    // 32000Hz
    [
        // 32000Hz, Long Blocks
        [
            //  lines  minval    qthr      norm       bval
            /*  0 */ [2, 24.5, 4.532, 0.997, 0.313],
            /*  1 */ [2, 24.5, 4.532, 0.893, 0.938],
            /*  2 */ [2, 24.5, 1.809, 0.881, 1.563],
            /*  3 */ [2, 20.0, 0.181, 0.873, 2.188],
            /*  4 */ [2, 20.0, 0.181, 0.872, 2.813],
            /*  5 */ [2, 20.0, 0.057, 0.871, 3.438],
            /*  6 */ [2, 20.0, 0.018, 0.860, 4.045],
            /*  7 */ [2, 20.0, 0.018, 0.839, 4.625],
            /*  8 */ [2, 18.0, 0.018, 0.812, 5.173],
            /*  9 */ [2, 18.0, 0.018, 0.784, 5.698],
            /* 10 */ [2, 12.0, 0.018, 0.741, 6.185],
            /* 11 */ [2, 12.0, 0.018, 0.697, 6.634],
            /* 12 */ [2, 6.0, 0.018, 0.674, 7.070],
            /* 13 */ [2, 6.0, 0.018, 0.651, 7.492],
            /* 14 */ [2, 6.0, 0.018, 0.633, 7.905],
            /* 15 */ [2, 3.0, 0.018, 0.611, 8.305],
            /* 16 */ [2, 3.0, 0.018, 0.589, 8.695],
            /* 17 */ [2, 3.0, 0.018, 0.575, 9.064],
            /* 18 */ [3, 3.0, 0.027, 0.654, 9.484],
            /* 19 */ [3, 3.0, 0.027, 0.724, 9.966],
            /* 20 */ [3, 0.0, 0.027, 0.701, 10.426],
            /* 21 */ [3, 0.0, 0.027, 0.673, 10.866],
            /* 22 */ [3, 0.0, 0.027, 0.631, 11.279],
            /* 23 */ [3, 0.0, 0.027, 0.592, 11.669],
            /* 24 */ [3, 0.0, 0.027, 0.553, 12.042],
            /* 25 */ [3, 0.0, 0.027, 0.510, 12.386],
            /* 26 */ [3, 0.0, 0.027, 0.506, 12.721],
            /* 27 */ [4, 0.0, 0.036, 0.562, 13.091],
            /* 28 */ [4, 0.0, 0.036, 0.598, 13.488],
            /* 29 */ [4, 0.0, 0.036, 0.589, 13.873],
            /* 30 */ [5, 0.0, 0.045, 0.607, 14.268],
            /* 31 */ [5, 0.0, 0.045, 0.620, 14.679],
            /* 32 */ [5, 0.0, 0.045, 0.580, 15.067],
            /* 33 */ [5, 0.0, 0.045, 0.532, 15.424],
            /* 34 */ [5, 0.0, 0.045, 0.517, 15.771],
            /* 35 */ [6, 0.0, 0.054, 0.517, 16.120],
            /* 36 */ [6, 0.0, 0.054, 0.509, 16.466],
            /* 37 */ [6, 0.0, 0.054, 0.506, 16.807],
            /* 38 */ [8, 0.0, 0.072, 0.522, 17.158],
            /* 39 */ [8, 0.0, 0.072, 0.531, 17.518],
            /* 40 */ [8, 0.0, 0.072, 0.519, 17.869],
            /* 41 */ [10, 0.0, 0.090, 0.512, 18.215],
            /* 42 */ [10, 0.0, 0.090, 0.509, 18.563],
            /* 43 */ [10, 0.0, 0.090, 0.498, 18.902],
            /* 44 */ [12, 0.0, 0.109, 0.494, 19.239],
            /* 45 */ [12, 0.0, 0.109, 0.501, 19.580],
            /* 46 */ [13, 0.0, 0.118, 0.508, 19.925],
            /* 47 */ [14, 0.0, 0.252, 0.502, 20.269],
            /* 48 */ [14, 0.0, 0.252, 0.493, 20.606],
            /* 49 */ [16, 0.0, 0.288, 0.497, 20.944],
            /* 50 */ [20, 0.0, 0.572, 0.506, 21.288],
            /* 51 */ [20, 0.0, 0.572, 0.510, 21.635],
            /* 52 */ [23, 0.0, 0.658, 0.504, 21.980],
            /* 53 */ [27, 0.0, 2.441, 0.496, 22.319],
            /* 54 */ [27, 0.0, 2.441, 0.493, 22.656],
            /* 55 */ [32, 0.0, 2.893, 0.490, 22.993],
            /* 56 */ [37, 0.0, 33.458, 0.482, 23.326],
            /* 57 */ [37, 0.0, 33.458, 0.458, 23.656],
            /* 58 */ [12, 0.0, 10.851, 0.500, 23.937]
        ],
        // 32000Hz, Short Blocks
        [
            //  lines   qthr      norm     SNR         bval
            /*  0 */ [1, 4.532, 1.000, -8.240, 0.000],
            /*  1 */ [1, 0.904, 0.985, -8.240, 1.250],
            /*  2 */ [1, 0.090, 0.983, -8.240, 2.500],
            /*  3 */ [1, 0.029, 0.983, -8.240, 3.750],
            /*  4 */ [1, 0.009, 0.981, -8.240, 4.909],
            /*  5 */ [1, 0.009, 0.975, -8.240, 5.958],
            /*  6 */ [1, 0.009, 0.959, -8.240, 6.857],
            /*  7 */ [1, 0.009, 0.944, -8.240, 7.700],
            /*  8 */ [1, 0.009, 0.933, -8.240, 8.500],
            /*  9 */ [1, 0.009, 0.920, -8.240, 9.237],
            /* 10 */ [1, 0.009, 0.892, -7.447, 9.895],
            /* 11 */ [1, 0.009, 0.863, -7.447, 10.500],
            /* 12 */ [1, 0.009, 0.839, -7.447, 11.083],
            /* 13 */ [1, 0.009, 0.786, -7.447, 11.604],
            /* 14 */ [1, 0.009, 0.755, -7.447, 12.107],
            /* 15 */ [1, 0.009, 0.698, -7.447, 12.554],
            /* 16 */ [1, 0.009, 0.673, -7.447, 13.000],
            /* 17 */ [1, 0.009, 0.605, -7.447, 13.391],
            /* 18 */ [1, 0.009, 0.629, -7.447, 13.781],
            /* 19 */ [2, 0.018, 0.883, -7.447, 14.474],
            /* 20 */ [2, 0.018, 0.858, -6.990, 15.096],
            /* 21 */ [2, 0.018, 0.829, -6.990, 15.667],
            /* 22 */ [2, 0.018, 0.767, -6.990, 16.177],
            /* 23 */ [2, 0.018, 0.705, -6.990, 16.636],
            /* 24 */ [2, 0.018, 0.637, -6.990, 17.057],
            /* 25 */ [2, 0.018, 0.564, -6.990, 17.429],
            /* 26 */ [2, 0.018, 0.550, -6.990, 17.786],
            /* 27 */ [3, 0.027, 0.603, -6.990, 18.177],
            /* 28 */ [3, 0.027, 0.635, -6.990, 18.597],
            /* 29 */ [3, 0.027, 0.592, -6.990, 18.994],
            /* 30 */ [3, 0.027, 0.533, -6.020, 19.352],
            /* 31 */ [3, 0.027, 0.518, -6.020, 19.693],
            /* 32 */ [4, 0.072, 0.568, -6.020, 20.066],
            /* 33 */ [4, 0.072, 0.594, -6.020, 20.462],
            /* 34 */ [4, 0.072, 0.568, -5.229, 20.841],
            /* 35 */ [5, 0.143, 0.536, -5.229, 21.201],
            /* 36 */ [5, 0.143, 0.522, -5.229, 21.549],
            /* 37 */ [6, 0.172, 0.542, -5.229, 21.911],
            /* 38 */ [7, 0.633, 0.539, -4.559, 22.275],
            /* 39 */ [7, 0.633, 0.519, -4.559, 22.625],
            /* 40 */ [8, 0.723, 0.514, -3.980, 22.971],
            /* 41 */ [10, 9.043, 0.518, -3.980, 23.321]
        ]
    ],
    // 44100Hz
    [
        // 44100Hz, Long Blocks
        [
            //  lines  minval    qthr      norm       bval
            /*  0 */ [1, 24.5, 4.532, 0.951, 0.000],
            /*  1 */ [1, 24.5, 4.532, 0.700, 0.431],
            /*  2 */ [1, 24.5, 4.532, 0.681, 0.861],
            /*  3 */ [1, 24.5, 0.904, 0.675, 1.292],
            /*  4 */ [1, 24.5, 0.904, 0.667, 1.723],
            /*  5 */ [1, 20.0, 0.090, 0.665, 2.153],
            /*  6 */ [1, 20.0, 0.090, 0.664, 2.584],
            /*  7 */ [1, 20.0, 0.029, 0.664, 3.015],
            /*  8 */ [1, 20.0, 0.029, 0.664, 3.445],
            /*  9 */ [1, 20.0, 0.029, 0.655, 3.876],
            /* 10 */ [1, 20.0, 0.009, 0.616, 4.279],
            /* 11 */ [1, 20.0, 0.009, 0.597, 4.670],
            /* 12 */ [1, 18.0, 0.009, 0.578, 5.057],
            /* 13 */ [1, 18.0, 0.009, 0.541, 5.416],
            /* 14 */ [1, 18.0, 0.009, 0.575, 5.774],
            /* 15 */ [2, 12.0, 0.018, 0.856, 6.422],
            /* 16 */ [2, 6.0, 0.018, 0.846, 7.026],
            /* 17 */ [2, 6.0, 0.018, 0.840, 7.609],
            /* 18 */ [2, 3.0, 0.018, 0.822, 8.168],
            /* 19 */ [2, 3.0, 0.018, 0.800, 8.710],
            /* 20 */ [2, 3.0, 0.018, 0.753, 9.207],
            /* 21 */ [2, 3.0, 0.018, 0.704, 9.662],
            /* 22 */ [2, 0.0, 0.018, 0.674, 10.099],
            /* 23 */ [2, 0.0, 0.018, 0.640, 10.515],
            /* 24 */ [2, 0.0, 0.018, 0.609, 10.917],
            /* 25 */ [2, 0.0, 0.018, 0.566, 11.293],
            /* 26 */ [2, 0.0, 0.018, 0.535, 11.652],
            /* 27 */ [2, 0.0, 0.018, 0.531, 11.997],
            /* 28 */ [3, 0.0, 0.027, 0.615, 12.394],
            /* 29 */ [3, 0.0, 0.027, 0.686, 12.850],
            /* 30 */ [3, 0.0, 0.027, 0.650, 13.277],
            /* 31 */ [3, 0.0, 0.027, 0.612, 13.681],
            /* 32 */ [3, 0.0, 0.027, 0.567, 14.062],
            /* 33 */ [3, 0.0, 0.027, 0.520, 14.411],
            /* 34 */ [3, 0.0, 0.027, 0.513, 14.751],
            /* 35 */ [4, 0.0, 0.036, 0.557, 15.119],
            /* 36 */ [4, 0.0, 0.036, 0.584, 15.508],
            /* 37 */ [4, 0.0, 0.036, 0.570, 15.883],
            /* 38 */ [5, 0.0, 0.045, 0.579, 16.263],
            /* 39 */ [5, 0.0, 0.045, 0.585, 16.654],
            /* 40 */ [5, 0.0, 0.045, 0.548, 17.020],
            /* 41 */ [6, 0.0, 0.054, 0.536, 17.374],
            /* 42 */ [6, 0.0, 0.054, 0.550, 17.744],
            /* 43 */ [7, 0.0, 0.063, 0.532, 18.104],
            /* 44 */ [7, 0.0, 0.063, 0.504, 18.447],
            /* 45 */ [7, 0.0, 0.063, 0.496, 18.782],
            /* 46 */ [9, 0.0, 0.081, 0.517, 19.130],
            /* 47 */ [9, 0.0, 0.081, 0.527, 19.487],
            /* 48 */ [9, 0.0, 0.081, 0.516, 19.838],
            /* 49 */ [10, 0.0, 0.180, 0.497, 20.179],
            /* 50 */ [10, 0.0, 0.180, 0.489, 20.510],
            /* 51 */ [11, 0.0, 0.198, 0.502, 20.852],
            /* 52 */ [14, 0.0, 0.400, 0.501, 21.196],
            /* 53 */ [14, 0.0, 0.400, 0.491, 21.531],
            /* 54 */ [15, 0.0, 0.429, 0.497, 21.870],
            /* 55 */ [20, 0.0, 1.808, 0.504, 22.214],
            /* 56 */ [20, 0.0, 1.808, 0.504, 22.558],
            /* 57 */ [21, 0.0, 1.898, 0.495, 22.898],
            /* 58 */ [27, 0.0, 24.416, 0.486, 23.232],
            /* 59 */ [27, 0.0, 24.416, 0.484, 23.564],
            /* 60 */ [36, 0.0, 32.554, 0.483, 23.897],
            /* 61 */ [73, 0.0, 660.124, 0.475, 24.229],
            /* 62 */ [18, 0.0, 162.770, 0.515, 24.442]
        ],
        // 44100Hz, Short Blocks
        [
            //  lines   qthr      norm     SNR         bval
            /*  0 */ [1, 4.532, 1.000, -8.240, 0.000],
            /*  1 */ [1, 0.904, 0.983, -8.240, 1.723],
            /*  2 */ [1, 0.029, 0.983, -8.240, 3.445],
            /*  3 */ [1, 0.009, 0.982, -8.240, 5.057],
            /*  4 */ [1, 0.009, 0.985, -8.240, 6.422],
            /*  5 */ [1, 0.009, 0.983, -8.240, 7.609],
            /*  6 */ [1, 0.009, 0.978, -8.240, 8.710],
            /*  7 */ [1, 0.009, 0.967, -8.240, 9.662],
            /*  8 */ [1, 0.009, 0.948, -8.240, 10.515],
            /*  9 */ [1, 0.009, 0.930, -8.240, 11.293],
            /* 10 */ [1, 0.009, 0.914, -7.447, 12.009],
            /* 11 */ [1, 0.009, 0.870, -7.447, 12.625],
            /* 12 */ [1, 0.009, 0.845, -7.447, 13.210],
            /* 13 */ [1, 0.009, 0.800, -7.447, 13.748],
            /* 14 */ [1, 0.009, 0.749, -7.447, 14.241],
            /* 15 */ [1, 0.009, 0.701, -7.447, 14.695],
            /* 16 */ [1, 0.009, 0.653, -7.447, 15.125],
            /* 17 */ [1, 0.009, 0.590, -7.447, 15.508],
            /* 18 */ [1, 0.009, 0.616, -7.447, 15.891],
            /* 19 */ [2, 0.018, 0.860, -7.447, 16.537],
            /* 20 */ [2, 0.018, 0.823, -6.990, 17.112],
            /* 21 */ [2, 0.018, 0.762, -6.990, 17.621],
            /* 22 */ [2, 0.018, 0.688, -6.990, 18.073],
            /* 23 */ [2, 0.018, 0.612, -6.990, 18.470],
            /* 24 */ [2, 0.018, 0.594, -6.990, 18.849],
            /* 25 */ [3, 0.027, 0.658, -6.990, 19.271],
            /* 26 */ [3, 0.027, 0.706, -6.990, 19.741],
            /* 27 */ [3, 0.054, 0.660, -6.990, 20.177],
            /* 28 */ [3, 0.054, 0.606, -6.990, 20.576],
            /* 29 */ [3, 0.054, 0.565, -6.990, 20.950],
            /* 30 */ [4, 0.114, 0.560, -6.020, 21.316],
            /* 31 */ [4, 0.114, 0.579, -6.020, 21.699],
            /* 32 */ [5, 0.452, 0.567, -6.020, 22.078],
            /* 33 */ [5, 0.452, 0.534, -6.020, 22.438],
            /* 34 */ [5, 0.452, 0.514, -5.229, 22.782],
            /* 35 */ [7, 6.330, 0.520, -5.229, 23.133],
            /* 36 */ [7, 6.330, 0.518, -5.229, 23.484],
            /* 37 */ [7, 6.330, 0.507, -5.229, 23.828],
            /* 38 */ [19, 171.813, 0.447, -4.559, 24.173]
        ]
    ],
    // 48000Hz
    [
        // 48000Hz, Long Blocks
        [
            //  lines  minval    qthr      norm       bval
            /*  0 */ [1, 24.5, 4.532, 0.970, 0.000],
            /*  1 */ [1, 24.5, 4.532, 0.755, 0.469],
            /*  2 */ [1, 24.5, 4.532, 0.738, 0.938],
            /*  3 */ [1, 24.5, 0.904, 0.730, 1.406],
            /*  4 */ [1, 24.5, 0.904, 0.724, 1.875],
            /*  5 */ [1, 20.0, 0.090, 0.723, 2.344],
            /*  6 */ [1, 20.0, 0.090, 0.723, 2.813],
            /*  7 */ [1, 20.0, 0.029, 0.723, 3.281],
            /*  8 */ [1, 20.0, 0.029, 0.718, 3.750],
            /*  9 */ [1, 20.0, 0.009, 0.690, 4.199],
            /* 10 */ [1, 20.0, 0.009, 0.660, 4.625],
            /* 11 */ [1, 18.0, 0.009, 0.641, 5.047],
            /* 12 */ [1, 18.0, 0.009, 0.600, 5.438],
            /* 13 */ [1, 18.0, 0.009, 0.584, 5.828],
            /* 14 */ [1, 12.0, 0.009, 0.532, 6.188],
            /* 15 */ [1, 12.0, 0.009, 0.537, 6.522],
            /* 16 */ [2, 6.0, 0.018, 0.857, 7.174],
            /* 17 */ [2, 6.0, 0.018, 0.858, 7.801],
            /* 18 */ [2, 3.0, 0.018, 0.853, 8.402],
            /* 19 */ [2, 3.0, 0.018, 0.824, 8.966],
            /* 20 */ [2, 3.0, 0.018, 0.778, 9.484],
            /* 21 */ [2, 3.0, 0.018, 0.740, 9.966],
            /* 22 */ [2, 0.0, 0.018, 0.709, 10.426],
            /* 23 */ [2, 0.0, 0.018, 0.676, 10.866],
            /* 24 */ [2, 0.0, 0.018, 0.632, 11.279],
            /* 25 */ [2, 0.0, 0.018, 0.592, 11.669],
            /* 26 */ [2, 0.0, 0.018, 0.553, 12.042],
            /* 27 */ [2, 0.0, 0.018, 0.510, 12.386],
            /* 28 */ [2, 0.0, 0.018, 0.513, 12.721],
            /* 29 */ [3, 0.0, 0.027, 0.608, 13.115],
            /* 30 */ [3, 0.0, 0.027, 0.673, 13.562],
            /* 31 */ [3, 0.0, 0.027, 0.637, 13.984],
            /* 32 */ [3, 0.0, 0.027, 0.586, 14.371],
            /* 33 */ [3, 0.0, 0.027, 0.571, 14.741],
            /* 34 */ [4, 0.0, 0.036, 0.616, 15.140],
            /* 35 */ [4, 0.0, 0.036, 0.640, 15.563],
            /* 36 */ [4, 0.0, 0.036, 0.598, 15.962],
            /* 37 */ [4, 0.0, 0.036, 0.538, 16.324],
            /* 38 */ [4, 0.0, 0.036, 0.512, 16.665],
            /* 39 */ [5, 0.0, 0.045, 0.528, 17.020],
            /* 40 */ [5, 0.0, 0.045, 0.517, 17.373],
            /* 41 */ [5, 0.0, 0.045, 0.493, 17.708],
            /* 42 */ [6, 0.0, 0.054, 0.499, 18.045],
            /* 43 */ [7, 0.0, 0.063, 0.525, 18.398],
            /* 44 */ [7, 0.0, 0.063, 0.541, 18.762],
            /* 45 */ [8, 0.0, 0.072, 0.528, 19.120],
            /* 46 */ [8, 0.0, 0.072, 0.510, 19.466],
            /* 47 */ [8, 0.0, 0.072, 0.506, 19.807],
            /* 48 */ [10, 0.0, 0.180, 0.525, 20.159],
            /* 49 */ [10, 0.0, 0.180, 0.536, 20.522],
            /* 50 */ [10, 0.0, 0.180, 0.518, 20.874],
            /* 51 */ [13, 0.0, 0.372, 0.501, 21.214],
            /* 52 */ [13, 0.0, 0.372, 0.497, 21.553],
            /* 53 */ [14, 0.0, 0.400, 0.497, 21.892],
            /* 54 */ [18, 0.0, 1.627, 0.495, 22.231],
            /* 55 */ [18, 0.0, 1.627, 0.494, 22.569],
            /* 56 */ [20, 0.0, 1.808, 0.497, 22.909],
            /* 57 */ [25, 0.0, 22.607, 0.494, 23.248],
            /* 58 */ [25, 0.0, 22.607, 0.487, 23.583],
            /* 59 */ [35, 0.0, 31.650, 0.483, 23.915],
            /* 60 */ [67, 0.0, 605.867, 0.482, 24.246],
            /* 61 */ [67, 0.0, 605.867, 0.524, 24.576]
        ],
        // 48000Hz, Short Blocks
        [
            //  lines   qthr      norm     SNR         bval
            /*  0 */ [1, 4.532, 1.000, -8.240, 0.000],
            /*  1 */ [1, 0.904, 0.989, -8.240, 1.875],
            /*  2 */ [1, 0.029, 0.989, -8.240, 3.750],
            /*  3 */ [1, 0.009, 0.981, -8.240, 5.438],
            /*  4 */ [1, 0.009, 0.985, -8.240, 6.857],
            /*  5 */ [1, 0.009, 0.984, -8.240, 8.109],
            /*  6 */ [1, 0.009, 0.980, -8.240, 9.237],
            /*  7 */ [1, 0.009, 0.968, -8.240, 10.202],
            /*  8 */ [1, 0.009, 0.954, -8.240, 11.083],
            /*  9 */ [1, 0.009, 0.929, -8.240, 11.865],
            /* 10 */ [1, 0.009, 0.906, -7.447, 12.554],
            /* 11 */ [1, 0.009, 0.883, -7.447, 13.195],
            /* 12 */ [1, 0.009, 0.844, -7.447, 13.781],
            /* 13 */ [1, 0.009, 0.792, -7.447, 14.309],
            /* 14 */ [1, 0.009, 0.747, -7.447, 14.803],
            /* 15 */ [1, 0.009, 0.689, -7.447, 15.250],
            /* 16 */ [1, 0.009, 0.644, -7.447, 15.667],
            /* 17 */ [1, 0.009, 0.592, -7.447, 16.068],
            /* 18 */ [1, 0.009, 0.553, -7.447, 16.409],
            /* 19 */ [2, 0.018, 0.850, -7.447, 17.045],
            /* 20 */ [2, 0.018, 0.811, -6.990, 17.607],
            /* 21 */ [2, 0.018, 0.736, -6.990, 18.097],
            /* 22 */ [2, 0.018, 0.665, -6.990, 18.528],
            /* 23 */ [2, 0.018, 0.610, -6.990, 18.931],
            /* 24 */ [2, 0.018, 0.544, -6.990, 19.295],
            /* 25 */ [2, 0.018, 0.528, -6.990, 19.636],
            /* 26 */ [3, 0.054, 0.621, -6.990, 20.038],
            /* 27 */ [3, 0.054, 0.673, -6.990, 20.486],
            /* 28 */ [3, 0.054, 0.635, -6.990, 20.900],
            /* 29 */ [4, 0.114, 0.626, -6.990, 21.306],
            /* 30 */ [4, 0.114, 0.636, -6.020, 21.722],
            /* 31 */ [5, 0.452, 0.615, -6.020, 22.128],
            /* 32 */ [5, 0.452, 0.579, -6.020, 22.513],
            /* 33 */ [5, 0.452, 0.551, -6.020, 22.877],
            /* 34 */ [7, 6.330, 0.552, -5.229, 23.241],
            /* 35 */ [7, 6.330, 0.559, -5.229, 23.616],
            /* 36 */ [11, 9.947, 0.528, -5.229, 23.974],
            /* 37 */ [17, 153.727, 0.479, -5.229, 24.313]
        ]
    ]
];
// Table C.8 [SampleRateIndex][BlockType][ScalefactorBandIndex]
const PAM_TABLES_C8 = [
    // 32000Hz
    [
        // 32000Hz, Long Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [1, 0, 2, 1.000, 0.528],
            /*  1 */ [2, 2, 4, 0.472, 0.305],
            /*  2 */ [2, 4, 6, 0.694, 0.083],
            /*  3 */ [1, 6, 7, 0.917, 0.861],
            /*  4 */ [2, 7, 9, 0.139, 0.639],
            /*  5 */ [2, 9, 11, 0.361, 0.417],
            /*  6 */ [3, 11, 14, 0.583, 0.083],
            /*  7 */ [2, 14, 16, 0.917, 0.750],
            /*  8 */ [3, 16, 19, 0.250, 0.870],
            /*  9 */ [3, 19, 22, 0.130, 0.833],
            /* 10 */ [4, 22, 26, 0.167, 0.389],
            /* 11 */ [4, 26, 30, 0.611, 0.478],
            /* 12 */ [4, 30, 34, 0.522, 0.033],
            /* 13 */ [3, 34, 37, 0.967, 0.917],
            /* 14 */ [4, 37, 41, 0.083, 0.617],
            /* 15 */ [3, 41, 44, 0.383, 0.995],
            /* 16 */ [4, 44, 48, 0.005, 0.274],
            /* 17 */ [3, 48, 51, 0.726, 0.480],
            /* 18 */ [3, 51, 54, 0.519, 0.261],
            /* 19 */ [2, 54, 56, 0.739, 0.884],
            /* 20 */ [2, 56, 58, 0.116, 1.000]
        ],
        // 32000Hz, Short Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [2, 0, 2, 1.000, 0.167],
            /*  1 */ [2, 3, 5, 0.833, 0.833],
            /*  2 */ [3, 5, 8, 0.167, 0.500],
            /*  3 */ [3, 8, 11, 0.500, 0.167],
            /*  4 */ [4, 11, 15, 0.833, 0.167],
            /*  5 */ [5, 15, 20, 0.833, 0.250],
            /*  6 */ [4, 20, 24, 0.750, 0.250],
            /*  7 */ [5, 24, 29, 0.750, 0.055],
            /*  8 */ [4, 29, 33, 0.944, 0.375],
            /*  9 */ [4, 33, 37, 0.625, 0.472],
            /* 10 */ [3, 37, 40, 0.528, 0.937],
            /* 11 */ [1, 40, 41, 0.062, 1.000]
        ]
    ],
    // 44100Hz
    [
        // 44100Hz, Long Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [3, 0, 4, 1.000, 0.056],
            /*  1 */ [3, 4, 7, 0.944, 0.611],
            /*  2 */ [4, 7, 11, 0.389, 0.167],
            /*  3 */ [3, 11, 14, 0.833, 0.722],
            /*  4 */ [3, 14, 17, 0.278, 0.139],
            /*  5 */ [1, 17, 18, 0.861, 0.917],
            /*  6 */ [3, 18, 21, 0.083, 0.583],
            /*  7 */ [3, 21, 24, 0.417, 0.250],
            /*  8 */ [3, 24, 27, 0.750, 0.805],
            /*  9 */ [3, 27, 30, 0.194, 0.574],
            /* 10 */ [3, 30, 33, 0.426, 0.537],
            /* 11 */ [3, 33, 36, 0.463, 0.819],
            /* 12 */ [4, 36, 40, 0.180, 0.100],
            /* 13 */ [3, 40, 43, 0.900, 0.468],
            /* 14 */ [3, 43, 46, 0.532, 0.623],
            /* 15 */ [3, 46, 49, 0.376, 0.450],
            /* 16 */ [3, 49, 52, 0.550, 0.552],
            /* 17 */ [3, 52, 55, 0.448, 0.403],
            /* 18 */ [2, 55, 57, 0.597, 0.643],
            /* 19 */ [2, 57, 59, 0.357, 0.722],
            /* 20 */ [2, 59, 61, 0.278, 0.960]
        ],
        // 44100Hz, Short Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [2, 0, 2, 1.000, 0.167],
            /*  1 */ [2, 3, 5, 0.833, 0.833],
            /*  2 */ [3, 5, 8, 0.167, 0.500],
            /*  3 */ [3, 8, 11, 0.500, 0.167],
            /*  4 */ [4, 11, 15, 0.833, 0.167],
            /*  5 */ [5, 15, 20, 0.833, 0.250],
            /*  6 */ [3, 20, 23, 0.750, 0.583],
            /*  7 */ [4, 23, 27, 0.417, 0.055],
            /*  8 */ [3, 27, 30, 0.944, 0.375],
            /*  9 */ [3, 30, 33, 0.625, 0.300],
            /* 10 */ [3, 33, 36, 0.700, 0.167],
            /* 11 */ [2, 36, 38, 0.833, 1.000]
        ]
    ],
    // 48000Hz
    [
        // 48000Hz, Long Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [3, 0, 4, 1.000, 0.056],
            /*  1 */ [3, 4, 7, 0.944, 0.611],
            /*  2 */ [4, 7, 11, 0.389, 0.167],
            /*  3 */ [3, 11, 14, 0.833, 0.722],
            /*  4 */ [3, 14, 17, 0.278, 0.639],
            /*  5 */ [2, 17, 19, 0.361, 0.417],
            /*  6 */ [3, 19, 22, 0.583, 0.083],
            /*  7 */ [2, 22, 24, 0.917, 0.750],
            /*  8 */ [3, 24, 27, 0.250, 0.417],
            /*  9 */ [3, 27, 30, 0.583, 0.648],
            /* 10 */ [3, 30, 33, 0.352, 0.611],
            /* 11 */ [3, 33, 36, 0.389, 0.625],
            /* 12 */ [4, 36, 40, 0.375, 0.144],
            /* 13 */ [3, 40, 43, 0.856, 0.389],
            /* 14 */ [3, 43, 46, 0.611, 0.160],
            /* 15 */ [3, 46, 49, 0.840, 0.217],
            /* 16 */ [3, 49, 52, 0.783, 0.184],
            /* 17 */ [2, 52, 54, 0.816, 0.886],
            /* 18 */ [3, 54, 57, 0.114, 0.313],
            /* 19 */ [2, 57, 59, 0.687, 0.452],
            /* 20 */ [1, 59, 60, 0.548, 0.908]
        ],
        // 48000Hz, Short Blocks
        [
            // sb      cbw  bu   bo     w1       w2
            /*  0 */ [2, 0, 2, 1.000, 0.167],
            /*  1 */ [2, 3, 5, 0.833, 0.833],
            /*  2 */ [3, 5, 8, 0.167, 0.500],
            /*  3 */ [3, 8, 11, 0.500, 0.167],
            /*  4 */ [4, 11, 15, 0.833, 0.167],
            /*  5 */ [4, 15, 19, 0.833, 0.583],
            /*  6 */ [3, 19, 22, 0.417, 0.917],
            /*  7 */ [4, 22, 26, 0.083, 0.944],
            /*  8 */ [4, 26, 30, 0.055, 0.042],
            /*  9 */ [2, 30, 32, 0.958, 0.567],
            /* 10 */ [3, 32, 35, 0.433, 0.167],
            /* 11 */ [2, 35, 37, 0.833, 0.618]
        ]
    ]
];
// 以下是标准附录D提供的（部分）参数，在Layer3编码器中并未使用。
// Table D.3
const THRESHOLD_CALCULATION_PARTITIONS = [
    // 32kHz
    [
        //   wlow,   whigh,  bval,     minval,   TMN
        [0, 0, 0, 0, 0],
        /* 1  */ [1, 1, 0.00, 0.0, 24.5],
        /* 2  */ [2, 4, 0.63, 0.0, 24.5],
        /* 3  */ [5, 7, 1.56, 20.0, 24.5],
        /* 4  */ [8, 10, 2.50, 20.0, 24.5],
        /* 5  */ [11, 13, 3.44, 20.0, 24.5],
        /* 6  */ [14, 16, 4.34, 20.0, 24.5],
        /* 7  */ [17, 19, 5.17, 20.0, 24.5],
        /* 8  */ [20, 22, 5.94, 20.0, 24.5],
        /* 9  */ [23, 25, 6.63, 17.0, 24.5],
        /* 10 */ [26, 28, 7.28, 15.0, 24.5],
        /* 11 */ [29, 31, 7.90, 15.0, 24.5],
        /* 12 */ [32, 34, 8.50, 10.0, 24.5],
        /* 13 */ [35, 37, 9.06, 7.0, 24.5],
        /* 14 */ [38, 41, 9.65, 7.0, 24.5],
        /* 15 */ [42, 45, 10.28, 4.4, 24.8],
        /* 16 */ [46, 49, 10.87, 4.4, 25.4],
        /* 17 */ [50, 53, 11.41, 4.5, 25.9],
        /* 18 */ [54, 57, 11.92, 4.5, 26.4],
        /* 19 */ [58, 61, 12.39, 4.5, 26.9],
        /* 20 */ [62, 65, 12.83, 4.5, 27.3],
        /* 21 */ [66, 70, 13.29, 4.5, 27.8],
        /* 22 */ [71, 75, 13.78, 4.5, 28.3],
        /* 23 */ [76, 81, 14.27, 4.5, 28.8],
        /* 24 */ [82, 87, 14.76, 4.5, 29.3],
        /* 25 */ [88, 93, 15.22, 4.5, 29.7],
        /* 26 */ [94, 99, 15.63, 4.5, 30.1],
        /* 27 */ [100, 106, 16.06, 4.5, 30.6],
        /* 28 */ [107, 113, 16.47, 4.5, 31.0],
        /* 29 */ [114, 120, 16.86, 4.5, 31.4],
        /* 30 */ [121, 129, 17.25, 4.5, 31.8],
        /* 31 */ [130, 138, 17.65, 4.5, 32.2],
        /* 32 */ [139, 148, 18.05, 4.5, 32.5],
        /* 33 */ [149, 159, 18.42, 4.5, 32.9],
        /* 34 */ [160, 170, 18.81, 4.5, 33.3],
        /* 35 */ [171, 183, 19.18, 4.5, 33.7],
        /* 36 */ [184, 196, 19.55, 4.5, 34.1],
        /* 37 */ [197, 210, 19.93, 4.5, 34.4],
        /* 38 */ [211, 225, 20.29, 4.5, 34.8],
        /* 39 */ [226, 240, 20.65, 4.5, 35.2],
        /* 40 */ [241, 258, 21.02, 4.5, 35.5],
        /* 41 */ [259, 279, 21.38, 4.5, 35.9],
        /* 42 */ [280, 300, 21.74, 4.5, 36.2],
        /* 43 */ [301, 326, 22.10, 4.5, 36.6],
        /* 44 */ [327, 354, 22.44, 4.5, 36.9],
        /* 45 */ [355, 382, 22.79, 4.5, 37.3],
        /* 46 */ [383, 420, 23.14, 4.5, 37.6],
        /* 47 */ [421, 458, 23.49, 4.5, 38.0],
        /* 48 */ [459, 496, 23.83, 4.5, 38.3],
        /* 49 */ [497, 513, 24.07, 4.5, 38.6]
    ],
    // 44.1kHz
    [
        //   wlow,   whigh,  bval,     minval,   TMN
        [0, 0, 0, 0, 0],
        /* 1  */ [1, 1, 0.00, 0.0, 24.5],
        /* 2  */ [2, 2, 0.43, 0.0, 24.5],
        /* 3  */ [3, 3, 0.86, 0.0, 24.5],
        /* 4  */ [4, 4, 1.29, 20.0, 24.5],
        /* 5  */ [5, 5, 1.72, 20.0, 24.5],
        /* 6  */ [6, 6, 2.15, 20.0, 24.5],
        /* 7  */ [7, 7, 2.58, 20.0, 24.5],
        /* 8  */ [8, 8, 3.01, 20.0, 24.5],
        /* 9  */ [9, 9, 3.45, 20.0, 24.5],
        /* 10 */ [10, 10, 3.88, 20.0, 24.5],
        /* 11 */ [11, 11, 4.28, 20.0, 24.5],
        /* 12 */ [12, 12, 4.67, 20.0, 24.5],
        /* 13 */ [13, 13, 5.06, 20.0, 24.5],
        /* 14 */ [14, 14, 5.42, 20.0, 24.5],
        /* 15 */ [15, 15, 5.77, 20.0, 24.5],
        /* 16 */ [16, 16, 6.11, 17.0, 24.5],
        /* 17 */ [17, 19, 6.73, 17.0, 24.5],
        /* 18 */ [20, 22, 7.61, 15.0, 24.5],
        /* 19 */ [23, 25, 8.44, 10.0, 24.5],
        /* 20 */ [26, 28, 9.21, 7.0, 24.5],
        /* 21 */ [29, 31, 9.88, 7.0, 24.5],
        /* 22 */ [32, 34, 10.51, 4.4, 25.0],
        /* 23 */ [35, 37, 11.11, 4.5, 25.6],
        /* 24 */ [38, 40, 11.65, 4.5, 26.2],
        /* 25 */ [41, 44, 12.24, 4.5, 26.7],
        /* 26 */ [45, 48, 12.85, 4.5, 27.4],
        /* 27 */ [49, 52, 13.41, 4.5, 27.9],
        /* 28 */ [53, 56, 13.94, 4.5, 28.4],
        /* 29 */ [57, 60, 14.42, 4.5, 28.9],
        /* 30 */ [61, 64, 14.86, 4.5, 29.4],
        /* 31 */ [65, 69, 15.32, 4.5, 29.8],
        /* 32 */ [70, 74, 15.79, 4.5, 30.3],
        /* 33 */ [75, 80, 16.26, 4.5, 30.8],
        /* 34 */ [81, 86, 16.73, 4.5, 31.2],
        /* 35 */ [87, 93, 17.19, 4.5, 31.7],
        /* 36 */ [94, 100, 17.62, 4.5, 32.1],
        /* 37 */ [101, 108, 18.05, 4.5, 32.5],
        /* 38 */ [109, 116, 18.45, 4.5, 32.9],
        /* 39 */ [117, 124, 18.83, 4.5, 33.3],
        /* 40 */ [125, 134, 19.21, 4.5, 33.7],
        /* 41 */ [135, 144, 19.60, 4.5, 34.1],
        /* 42 */ [145, 155, 20.00, 4.5, 34.5],
        /* 43 */ [156, 166, 20.38, 4.5, 34.9],
        /* 44 */ [167, 177, 20.74, 4.5, 35.2],
        /* 45 */ [178, 192, 21.12, 4.5, 35.6],
        /* 46 */ [193, 207, 21.48, 4.5, 36.0],
        /* 47 */ [208, 222, 21.84, 4.5, 36.3],
        /* 48 */ [223, 243, 22.20, 4.5, 36.7],
        /* 49 */ [244, 264, 22.56, 4.5, 37.1],
        /* 50 */ [265, 286, 22.91, 4.5, 37.4],
        /* 51 */ [287, 314, 23.26, 4.5, 37.8],
        /* 52 */ [315, 342, 23.60, 4.5, 38.1],
        /* 53 */ [343, 371, 23.95, 4.5, 38.4],
        /* 54 */ [372, 401, 24.30, 4.5, 38.8],
        /* 55 */ [402, 431, 24.65, 4.5, 39.1],
        /* 56 */ [432, 469, 25.00, 4.5, 39.5],
        /* 57 */ [470, 513, 25.33, 3.5, 39.8]
    ],
    // 48kHz
    [
        //   wlow,   whigh,  bval,     minval,   TMN
        [0, 0, 0, 0, 0],
        /* 1  */ [1, 1, 0.00, 0.0, 24.5],
        /* 2  */ [2, 2, 0.47, 0.0, 24.5],
        /* 3  */ [3, 3, 0.94, 0.0, 24.5],
        /* 4  */ [4, 4, 1.41, 20.0, 24.5],
        /* 5  */ [5, 5, 1.88, 20.0, 24.5],
        /* 6  */ [6, 6, 2.34, 20.0, 24.5],
        /* 7  */ [7, 7, 2.81, 20.0, 24.5],
        /* 8  */ [8, 8, 3.28, 20.0, 24.5],
        /* 9  */ [9, 9, 3.75, 20.0, 24.5],
        /* 10 */ [10, 10, 4.20, 20.0, 24.5],
        /* 11 */ [11, 11, 4.63, 20.0, 24.5],
        /* 12 */ [12, 12, 5.05, 20.0, 24.5],
        /* 13 */ [13, 13, 5.44, 20.0, 24.5],
        /* 14 */ [14, 14, 5.83, 20.0, 24.5],
        /* 15 */ [15, 15, 6.19, 20.0, 24.5],
        /* 16 */ [16, 16, 6.52, 17.0, 24.5],
        /* 17 */ [17, 17, 6.86, 17.0, 24.5],
        /* 18 */ [18, 20, 7.49, 15.0, 24.5],
        /* 19 */ [21, 23, 8.40, 10.0, 24.5],
        /* 20 */ [24, 26, 9.24, 7.0, 24.5],
        /* 21 */ [27, 29, 9.97, 7.0, 24.5],
        /* 22 */ [30, 32, 10.65, 4.4, 25.1],
        /* 23 */ [33, 35, 11.28, 4.5, 25.8],
        /* 24 */ [36, 38, 11.86, 4.5, 26.4],
        /* 25 */ [39, 41, 12.39, 4.5, 26.9],
        /* 26 */ [42, 45, 12.96, 4.5, 27.5],
        /* 27 */ [46, 49, 13.56, 4.5, 28.1],
        /* 28 */ [50, 53, 14.12, 4.5, 28.6],
        /* 29 */ [54, 57, 14.62, 4.5, 29.1],
        /* 30 */ [58, 62, 15.14, 4.5, 29.6],
        /* 31 */ [63, 67, 15.67, 4.5, 30.2],
        /* 32 */ [68, 72, 16.15, 4.5, 30.7],
        /* 33 */ [73, 77, 16.58, 4.5, 31.1],
        /* 34 */ [78, 83, 17.02, 4.5, 31.5],
        /* 35 */ [84, 89, 17.44, 4.5, 31.9],
        /* 36 */ [90, 95, 17.84, 4.5, 32.3],
        /* 37 */ [96, 103, 18.24, 4.5, 32.7],
        /* 38 */ [104, 111, 18.66, 4.5, 33.2],
        /* 39 */ [112, 120, 19.07, 4.5, 33.6],
        /* 40 */ [121, 129, 19.47, 4.5, 34.0],
        /* 41 */ [130, 138, 19.85, 4.5, 34.3],
        /* 42 */ [139, 149, 20.23, 4.5, 34.7],
        /* 43 */ [150, 160, 20.63, 4.5, 35.1],
        /* 44 */ [161, 173, 21.02, 4.5, 35.5],
        /* 45 */ [174, 187, 21.40, 4.5, 35.9],
        /* 46 */ [188, 201, 21.76, 4.5, 36.3],
        /* 47 */ [202, 219, 22.12, 4.5, 36.6],
        /* 48 */ [220, 238, 22.47, 4.5, 37.0],
        /* 49 */ [239, 257, 22.83, 4.5, 37.3],
        /* 50 */ [258, 283, 23.18, 4.5, 37.7],
        /* 51 */ [284, 309, 23.53, 4.5, 38.0],
        /* 52 */ [310, 335, 23.88, 4.5, 38.4],
        /* 53 */ [336, 363, 24.23, 4.5, 38.7],
        /* 54 */ [364, 391, 24.58, 4.5, 39.1],
        /* 55 */ [392, 423, 24.93, 4.5, 39.4],
        /* 56 */ [424, 465, 25.27, 4.5, 39.8],
        /* 57 */ [466, 507, 25.61, 3.5, 40.1],
        /* 58 */ [508, 513, 25.81, 3.5, 40.3]
    ]
];
////////////////////////////////
//
//  缓 冲 区 （TODO 每个声道需要一个缓冲区，这块需要完善）
//
////////////////////////////////
// 前两个长块的极坐标频谱（0~1023）
let PrevLongPolarSpectrum1, PrevLongPolarSpectrum2;
// 前两个短块的极坐标频谱（0~255）
let PrevShortPolarSpectrum1, PrevShortPolarSpectrum2;
// 前两个长块的未考虑前回声效应的归一化阈值（以TCP为下标），即nb[b]
let PrevNB1, PrevNB2;
////////////////////////////////
//
//  心 理 声 学 模 型 参 数
//
////////////////////////////////
const SWITCH_PE = 1800; // @reference p95
let TABLE_C7_LONG = PAM_TABLES_C7[SAMPLE_RATE][LONG_BLOCK];
let TABLE_C7_SHORT = PAM_TABLES_C7[SAMPLE_RATE][SHORT_BLOCK];
let TABLE_C8_LONG = PAM_TABLES_C8[SAMPLE_RATE][LONG_BLOCK];
let TABLE_C8_SHORT = PAM_TABLES_C8[SAMPLE_RATE][SHORT_BLOCK];
// 阈值计算区间：由表C7定义，由PAM2_Init函数初始化之
let TCPS_LONG = new Array(); // [[wlow, whigh]]
let TCPS_SHORT = new Array(); // [[wlow, whigh]]
// 扩散函数
let SPREADING_FUNCTION_LONG = new Array();
let SPREADING_FUNCTION_SHORT = new Array();
/**
 *  心理声学模型参数初始化
 */
function PAM2_Init() {
    // TCPS_LONG init
    let wcount = 0;
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let fft_lines = TABLE_C7_LONG[b][0];
        TCPS_LONG.push([wcount, wcount + (fft_lines - 1)]);
        wcount += fft_lines;
    }
    // TCPS_LONG init
    wcount = 0;
    for (let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let fft_lines = TABLE_C7_SHORT[b][0];
        TCPS_SHORT.push([wcount, wcount + (fft_lines - 1)]);
        wcount += fft_lines;
    }
    // SPREADING_FUNCTION_L/S init
    // NOTE 扩散函数的输入值以bark为单位，但是SPREADING_FUNCTION_*是以TCP为下标
    for (let bi = 0; bi < TABLE_C7_LONG.length; bi++) {
        SPREADING_FUNCTION_LONG[bi] = new Array();
        for (let bj = 0; bj < TABLE_C7_LONG.length; bj++) {
            let ibark = TABLE_C7_LONG[bi][4]; // bval在TABLE_C7_LONG表中的下标是4
            let jbark = TABLE_C7_LONG[bj][4];
            SPREADING_FUNCTION_LONG[bi][bj] = SpreadingFunction(ibark, jbark);
        }
    }
    for (let bi = 0; bi < TABLE_C7_SHORT.length; bi++) {
        SPREADING_FUNCTION_SHORT[bi] = new Array();
        for (let bj = 0; bj < TABLE_C7_SHORT.length; bj++) {
            let ibark = TABLE_C7_SHORT[bi][4]; // bval在TABLE_C7_LONG表中的下标是4
            let jbark = TABLE_C7_SHORT[bj][4];
            SPREADING_FUNCTION_SHORT[bi][bj] = SpreadingFunction(ibark, jbark);
        }
    }
}
/**
 * 心理声学模型：主流程
 * @input  PCM序列、granuleOffset（即一个576点序列的起始点）
 * @output PE、blockType、xmin
 */
function PAM2(PCM, granuleOffset) {
    // 初始化全局缓存
    // 计算长块/短块频谱
    // 计算长块/短块预测频谱
    // 计算不可预测度
    // 以长块参数计算阈值和PE
    // 根据PE判断是否Attack
    // 如果切换到短块，则计算3个短块的阈值
    // 修改全局缓存
    // 返回结果
    return {
        "PE": 0,
        "blockType": WINDOW_NORMAL,
        "xmin": 0 // 长块1个，短块3个
    };
}
/**
 * @description 窗口切换
 * @reference Fig.C.7(p95)
 * @input  prevWindowType - 上一个Granule的窗口类型
 * @input  isAttack - 由PAM2给出的是否attack的判断（true/false）
 * @output 当前Granule的窗口类型
 */
function SwitchWindowType(prevWindowType, isAttack) {
    if (prevWindowType === WINDOW_NORMAL) {
        return (isAttack) ? WINDOW_START : WINDOW_NORMAL;
    }
    else if (prevWindowType === WINDOW_START) {
        return WINDOW_SHORT;
    }
    else if (prevWindowType === WINDOW_SHORT) {
        return (isAttack) ? WINDOW_SHORT : WINDOW_STOP;
    }
    else if (prevWindowType === WINDOW_STOP) {
        return (isAttack) ? WINDOW_START : WINDOW_NORMAL;
    }
}
/**
 * @description 计算扩散函数c(w)
 * @reference C.1.5.3.2.1(p80) & D.2.3(p129)
 * @input  i - 从频点i（Bark）被扩散
 * @input  j - 扩散到频点j（Bark）所在处
 * @output 扩散函数值
 */
function SpreadingFunction(i, j) {
    let tmpx = 1.05 * (j - i);
    let x = 8 * Math.min((tmpx - 0.5) * (tmpx - 0.5) - 2 * (tmpx - 0.5), 0);
    // LayerIII的tmpy有变化，详见 @reference C.1.5.3.2.1(p80)
    // let tmpy = 15.811389 + 7.5 * (tmpx + 0.474) - 17.5 * Math.sqrt(1.0 + (tmpx + 0.474) * (tmpx + 0.474));
    // TODO 此处存疑，标准原文的(3.0 * (j - i))似乎应为(3.0 * (i - j))，曲线形状才合理。
    let tmpy = (j >= i) ? (3.0 * (i - j)) : (1.5 * (j - i));
    if (tmpy < -100) {
        return 0;
    }
    else {
        let result = Math.pow(10, (x + tmpy) / 10);
        return (result < 1e-6) ? 0 : result; // 根据 @reference C.1.5.3.2.1(p80)，凡是小于1e-6的值均设为0
    }
}
/**
 * @description 计算长块/短块极坐标频谱：加窗并执行1024/256点FFT
 * @reference D.2.4(p129)
 * @input  input - 1024（长块）/256（短块）点PCM序列，以576/192采样为中心
 * @input  isLongBlock - 长短块标识：true为长块，false为短块
 * @output 极坐标表示的频谱，r为模，f为相位 [r[w], f[w]], w=0~1023/255
 */
function CalculatePolarSpectrum(input, isLongBlock) {
    // FFT点数：长块1024，短块256
    let BlockLength = (isLongBlock) ? 1024 : 256;
    // 加Hann窗
    let windowedInput = new Array();
    for (let i = 0; i < BlockLength; i++) {
        windowedInput[i] = input[i] * (0.5 - 0.5 * Math.cos(2 * Math.PI * (i - 0.5) / BlockLength));
    }
    // 执行FFT
    let spectrum = FFT(RealArrayToComplexArray(windowedInput), BlockLength);
    // 转换成极坐标表示
    let polarSpectrum = ComplexArrayToPolarArrays(spectrum);
    return polarSpectrum;
}
/**
 * @description 计算长块/短块的预测极坐标频谱
 * @reference D.2.4(p129)
 * @input  prevPolarSpectrum1 - 当前块之前 第1个 长块或短块的极坐标频谱 [r[w], f[w]], w=0~1023/255
 * @input  prevPolarSpectrum2 - 当前块之前 第2个 长块或短块的极坐标频谱 [r[w], f[w]], w=0~1023/255
 * @input  isLongBlock - 长短块标识：true为长块，false为短块
 * @output  预测的长块/短块极坐标频谱 [r[w], f[w]], w=0~1023/255
 */
function CalculatePredictedPolarSpectrum(prevPolarSpectrum1, prevPolarSpectrum2, isLongBlock) {
    let predictedPolarSpectrum_Radius = new Array();
    let predictedPolarSpectrum_Phase = new Array();
    // 长块
    if (isLongBlock) {
        for (let w = 0; w < 1024; w++) {
            predictedPolarSpectrum_Radius[w] = 2 * prevPolarSpectrum1[0][w] - prevPolarSpectrum2[0][w];
            predictedPolarSpectrum_Phase[w] = 2 * prevPolarSpectrum1[1][w] - prevPolarSpectrum2[1][w];
        }
    }
    // 短块
    else {
        for (let w = 0; w < 256; w++) {
            predictedPolarSpectrum_Radius[w] = 2 * prevPolarSpectrum1[0][w] - prevPolarSpectrum2[0][w];
            predictedPolarSpectrum_Phase[w] = 2 * prevPolarSpectrum1[1][w] - prevPolarSpectrum2[1][w];
        }
    }
    return [predictedPolarSpectrum_Radius, predictedPolarSpectrum_Phase];
}
/**
 * @description 计算不可预测度c(w)
 * @reference C.1.5.3.2.1(p80) & D.2.4(p129-130)
 * @input  longBlockPolarSpectrum - 当前长块的极坐标频谱 [r[w], f[w]], w=0~1023
 * @input  longBlockPredictedPolarSpectrum - 当前长块的预测极坐标频谱 [r[w], f[w]], w=0~1023
 * @input  shortBlockPolarSpectrum - 当前短块的极坐标频谱 [r[w], f[w]], w=0~255
 * @input  shortBlockPredictedPolarSpectrum - 当前短块的预测极坐标频谱 [r[w], f[w]], w=0~255
 * @output 每个FFT频点(w)的不可预测度c[w], w=0~1023
 */
function CalculateUnpredictability(longBlockPolarSpectrum, longBlockPredictedPolarSpectrum, shortBlockPolarSpectrum, shortBlockPredictedPolarSpectrum) {
    // PAM2规定的c(w)计算公式  @reference D.2.4(p129-130)
    // 注意输入的 r, rp, f, fp 都是频点w上的值，因此函数没有参数w
    const BasicUnpredictability = (r, rp, f, fp) => {
        let temp1 = r * Math.cos(f) - rp * Math.cos(fp);
        let temp2 = r * Math.sin(f) - rp * Math.sin(fp);
        let temp3 = Math.sqrt(temp1 * temp1 + temp2 * temp2);
        let temp4 = r + Math.abs(rp);
        return temp3 / temp4;
    };
    // 以下是Layer3规定的c(w)计算方法 @reference C.1.5.3.2.1(p80)
    let c = new Array();
    // 长块
    let longBlockSpect_Radius = longBlockPolarSpectrum[0];
    let longBlockSpect_Phase = longBlockPolarSpectrum[1];
    let longBlockPredictedSpect_Radius = longBlockPredictedPolarSpectrum[0];
    let longBlockPredictedSpect_Phase = longBlockPredictedPolarSpectrum[1];
    // 短块
    let shortBlockSpect_Radius = shortBlockPolarSpectrum[0];
    let shortBlockSpect_Phase = shortBlockPolarSpectrum[1];
    let shortBlockPredictedSpect_Radius = shortBlockPredictedPolarSpectrum[0];
    let shortBlockPredictedSpect_Phase = shortBlockPredictedPolarSpectrum[1];
    for (let w = 0; w < 1024; w++) {
        if (w >= 0 && w < 6) {
            c[w] = BasicUnpredictability(longBlockSpect_Radius[w], longBlockPredictedSpect_Radius[w], longBlockSpect_Phase[w], longBlockPredictedSpect_Phase[w]);
        }
        else if (w >= 6 && w < 206) {
            let index = Math.round((w + 2) / 4);
            c[w] = BasicUnpredictability(shortBlockSpect_Radius[index], shortBlockPredictedSpect_Radius[index], shortBlockSpect_Phase[index], shortBlockPredictedSpect_Phase[index]);
        }
        else {
            c[w] = 0.4;
        }
    }
    return c;
}
/**
 * 计算SMR和PE（长块模式）
 */
function CalculateRatiosAndPE(longBlockPolarSpectrum, Unpred_w) {
    // (e) 计算阈值计算区间（Threshold Calculation Partition）内的能量、以及不可预测度加权的能量
    let Energy = new Array();
    let Unpred = new Array();
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let ebsum = 0;
        let cbsum = 0;
        for (let w = TCPS_LONG[b][0]; w <= TCPS_LONG[b][1]; w++) {
            let rw = longBlockPolarSpectrum[0][w];
            ebsum += (rw * rw);
            cbsum += (rw * rw * Unpred_w[w]);
        }
        Energy[b] = ebsum;
        Unpred[b] = cbsum;
    }
    // (f) 与扩散函数作卷积
    let ecb = new Array();
    let ct = new Array();
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let ecb_sum = 0;
        let ct_sum = 0;
        for (let bb = 0; bb < TABLE_C7_LONG.length; bb++) {
            let sprdngf = SPREADING_FUNCTION_LONG[bb][b];
            ecb_sum += (Energy[bb] * sprdngf);
            ct_sum += (Unpred[bb] * sprdngf);
        }
        ecb[b] = ecb_sum;
        ct[b] = ct_sum;
    }
    // 将ct[b]按照ecb[b]归一化，得到cb[b]
    let cb = new Array();
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        if (ecb[b] === 0) {
            cb[b] = 0;
        }
        else {
            cb[b] = ct[b] / ecb[b];
            if (cb[b] < 0.01)
                cb[b] = 0.01; // 参考dist10
        }
    }
    // 将ecb[b]归一化，得到en[b] （Layer3所用的PAM2不需要这一步）
    // (g) 计算每个TCP的纯音指数tb
    let tb = new Array();
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        tb[b] = -0.299 - 0.43 * Math.log(cb[b]);
        tb[b] = Math.min(1.0, Math.max(0, tb[b])); // 取值范围 (0,1)
    }
    // (h) 计算每个TCP的SNR
    let SNR = new Array();
    const NMT = 6.0; // (in dB) Noise masking tone. @reference C.1.5.3.2.1(p80)
    const TMN = 29.0; // (in dB) Tone masking noise. @reference C.1.5.3.2.1(p80)
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let minval = TABLE_C7_LONG[b][1]; // minval在TABLE_C7_LONG表中的下标是1
        SNR[b] = Math.max(minval, tb[b] * TMN + (1.0 - tb[b]) * NMT);
    }
    // (i)(j) 计算能量阈值nb
    let nb = new Array();
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let norm = TABLE_C7_LONG[b][3]; // norm在TABLE_C7_LONG表中的下标是3
        nb[b] = ecb[b] * norm * Math.pow(10, (-SNR[b] / 10)); // NOTE 标准附录C的算法框图中，此处少了一个符号。（以dist10源码为准）
    }
    // 以下不采用附录D的算法，而是采用附录C给出的算法（见p81、p92）
    // 计算每个TCP的阈值thr[b]（前回声控制）
    let thr = new Array();
    const rpelev = 2; // @reference C.1.5.3.2.1(p81)
    const rpelev2 = 16; // @reference C.1.5.3.2.1(p81)
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let qthr = TABLE_C7_LONG[b][2]; // qthr在TABLE_C7_LONG表中的下标是1
        let nb_l = PrevNB1[b] * rpelev; // @reference p92
        let nb_ll = PrevNB2[b] * rpelev2; // @reference p92
        // NOTE 根据dist10，标准文档p92有误，以下以dist10为准
        let min_nb = Math.min(nb[b], nb_l, nb_ll); // 标准文档是取大者
        thr[b] = Math.max(qthr, min_nb);
    }
    // 将thr[b]通过表C8直接转换到尺度因子频带上，并计算最终的ratio（Part2）
    let en_Sb = new Array();
    let thr_Sb = new Array();
    let ratio_Sb = new Array();
    for (let sb = 0; sb < 21; sb++) { // 长块SFB有21个
        let bu = TABLE_C8_LONG[sb][1];
        let bo = TABLE_C8_LONG[sb][2];
        let w1 = TABLE_C8_LONG[sb][3];
        let w2 = TABLE_C8_LONG[sb][4];
        let en_sum = w1 * Energy[bu] + w2 * Energy[bo];
        let thr_sum = w1 * thr[bu] + w2 * thr[bo];
        for (let b = bu + 1; b <= bo - 1; b++) {
            en_sum += Energy[b];
            thr_sum += thr[b];
        }
        en_Sb[sb] = en_sum;
        thr_Sb[sb] = thr_sum;
        if (en_Sb[sb] !== 0) {
            ratio_Sb[sb] = thr_Sb[sb] / en_Sb[sb];
        }
        else {
            ratio_Sb[sb] = 0;
        }
    }
    // 计算感知熵（PE）
    let PE = 0;
    for (let b = 0; b < TABLE_C7_LONG.length; b++) {
        let pe_b = -Math.min(0.0, Math.log((thr[b] + 1.0) / (Energy[b] + 1.0)));
        let lines = TABLE_C7_LONG[b][0]; // lines在TABLE_C7_LONG表中的下标是0
        PE += (pe_b * lines);
    }
    // 处理缓冲区：将本帧的nb保存到缓冲区中
    PrevNB2 = PrevNB1;
    PrevNB1 = nb;
    // 返回结果
    return {
        "threshold": thr_Sb,
        "ratio": ratio_Sb,
        "PE": PE
    };
}
/**
 * 计算单个短块的阈值 (p94)
 */
function CalculateShortBlockRatios(shortBlockPolarSpectrum) {
    // 计算每个TCP的能量
    let Energy = new Array();
    for (let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let ebsum = 0;
        for (let w = TCPS_SHORT[b][0]; w <= TCPS_SHORT[b][1]; w++) {
            let rw = shortBlockPolarSpectrum[0][w];
            ebsum += (rw * rw);
        }
        Energy[b] = ebsum;
    }
    // 与扩散函数作卷积
    let ecb = new Array();
    for (let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let ecb_sum = 0;
        for (let bb = 0; bb < TABLE_C7_SHORT.length; bb++) {
            let sprdngf = SPREADING_FUNCTION_SHORT[bb][b];
            ecb_sum += (Energy[bb] * sprdngf);
        }
        ecb[b] = ecb_sum;
    }
    // 计算能量阈值nb以及thr。与长块不同之处是：SNR通过查表而不是计算得到。
    let nb = new Array();
    let thr = new Array();
    for (let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let norm = TABLE_C7_SHORT[b][2]; // norm在TABLE_C7_SHORT表中的下标是2
        let SNR = TABLE_C7_SHORT[b][3]; //  SNR在TABLE_C7_SHORT表中的下标是3
        nb[b] = ecb[b] * norm * Math.pow(10, (SNR[b] / 10)); // NOTE 注意此处式中没有负号，因为负号在表里
        let qthr = TABLE_C7_SHORT[b][1]; // qthr在TABLE_C7_LONG表中的下标是1
        thr[b] = Math.max(qthr, nb[b]);
    }
    // 将thr[b]通过表C8直接转换到尺度因子频带上，并计算最终的ratio（Part2）
    // 这里流程与长块是相同的，只是需要使用短块的参数
    let en_Sb = new Array();
    let thr_Sb = new Array();
    let ratio_Sb = new Array();
    for (let sb = 0; sb < 12; sb++) { // 短块SFB有12个
        let bu = TABLE_C8_SHORT[sb][1];
        let bo = TABLE_C8_SHORT[sb][2];
        let w1 = TABLE_C8_SHORT[sb][3];
        let w2 = TABLE_C8_SHORT[sb][4];
        let en_sum = w1 * Energy[bu] + w2 * Energy[bo];
        let thr_sum = w1 * thr[bu] + w2 * thr[bo];
        for (let b = bu + 1; b <= bo - 1; b++) {
            en_sum += Energy[b];
            thr_sum += thr[b];
        }
        en_Sb[sb] = en_sum;
        thr_Sb[sb] = thr_sum;
        if (en_Sb[sb] !== 0) {
            ratio_Sb[sb] = thr_Sb[sb] / en_Sb[sb];
        }
        else {
            ratio_Sb[sb] = 0;
        }
    }
    // 返回结果
    return {
        "threshold": thr_Sb,
        "ratio": ratio_Sb
    };
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  subband_filter.js
//
//    分析子带滤波器。包含滤波算法和常数表。
//
/////////////////////////////////////////////////////////////////
/**
 * @description 分析子带滤波器的窗口系数
 * @reference Table.C.1(p68-69)
 */
const ANALYSIS_SUBBAND_FILTER_WINDOW_COEFFICIENTS = [
    0.000000000, -0.000000477, -0.000000477, -0.000000477,
    -0.000000477, -0.000000477, -0.000000477, -0.000000954,
    -0.000000954, -0.000000954, -0.000000954, -0.000001431,
    -0.000001431, -0.000001907, -0.000001907, -0.000002384,
    -0.000002384, -0.000002861, -0.000003338, -0.000003338,
    -0.000003815, -0.000004292, -0.000004768, -0.000005245,
    -0.000006199, -0.000006676, -0.000007629, -0.000008106,
    -0.000009060, -0.000010014, -0.000011444, -0.000012398,
    -0.000013828, -0.000014782, -0.000016689, -0.000018120,
    -0.000019550, -0.000021458, -0.000023365, -0.000025272,
    -0.000027657, -0.000030041, -0.000032425, -0.000034809,
    -0.000037670, -0.000040531, -0.000043392, -0.000046253,
    -0.000049591, -0.000052929, -0.000055790, -0.000059605,
    -0.000062943, -0.000066280, -0.000070095, -0.000073433,
    -0.000076771, -0.000080585, -0.000083923, -0.000087261,
    -0.000090599, -0.000093460, -0.000096321, -0.000099182,
    0.000101566, 0.000103951, 0.000105858, 0.000107288,
    0.000108242, 0.000108719, 0.000108719, 0.000108242,
    0.000106812, 0.000105381, 0.000102520, 0.000099182,
    0.000095367, 0.000090122, 0.000084400, 0.000077724,
    0.000069618, 0.000060558, 0.000050545, 0.000039577,
    0.000027180, 0.000013828, -0.000000954, -0.000017166,
    -0.000034332, -0.000052929, -0.000072956, -0.000093937,
    -0.000116348, -0.000140190, -0.000165462, -0.000191212,
    -0.000218868, -0.000247478, -0.000277042, -0.000307560,
    -0.000339031, -0.000371456, -0.000404358, -0.000438213,
    -0.000472546, -0.000507355, -0.000542164, -0.000576973,
    -0.000611782, -0.000646591, -0.000680923, -0.000714302,
    -0.000747204, -0.000779152, -0.000809669, -0.000838757,
    -0.000866413, -0.000891685, -0.000915051, -0.000935555,
    -0.000954151, -0.000968933, -0.000980854, -0.000989437,
    -0.000994205, -0.000995159, -0.000991821, -0.000983715,
    0.000971317, 0.000953674, 0.000930786, 0.000902653,
    0.000868797, 0.000829220, 0.000783920, 0.000731945,
    0.000674248, 0.000610352, 0.000539303, 0.000462532,
    0.000378609, 0.000288486, 0.000191689, 0.000088215,
    -0.000021458, -0.000137329, -0.000259876, -0.000388145,
    -0.000522137, -0.000661850, -0.000806808, -0.000956535,
    -0.001111031, -0.001269817, -0.001432419, -0.001597881,
    -0.001766682, -0.001937389, -0.002110004, -0.002283096,
    -0.002457142, -0.002630711, -0.002803326, -0.002974033,
    -0.003141880, -0.003306866, -0.003467083, -0.003622532,
    -0.003771782, -0.003914356, -0.004048824, -0.004174709,
    -0.004290581, -0.004395962, -0.004489899, -0.004570484,
    -0.004638195, -0.004691124, -0.004728317, -0.004748821,
    -0.004752159, -0.004737377, -0.004703045, -0.004649162,
    -0.004573822, -0.004477024, -0.004357815, -0.004215240,
    -0.004049301, -0.003858566, -0.003643036, -0.003401756,
    0.003134727, 0.002841473, 0.002521515, 0.002174854,
    0.001800537, 0.001399517, 0.000971317, 0.000515938,
    0.000033379, -0.000475883, -0.001011848, -0.001573563,
    -0.002161503, -0.002774239, -0.003411293, -0.004072189,
    -0.004756451, -0.005462170, -0.006189346, -0.006937027,
    -0.007703304, -0.008487225, -0.009287834, -0.010103703,
    -0.010933399, -0.011775017, -0.012627602, -0.013489246,
    -0.014358521, -0.015233517, -0.016112804, -0.016994476,
    -0.017876148, -0.018756866, -0.019634247, -0.020506859,
    -0.021372318, -0.022228718, -0.023074150, -0.023907185,
    -0.024725437, -0.025527000, -0.026310921, -0.027073860,
    -0.027815342, -0.028532982, -0.029224873, -0.029890060,
    -0.030526638, -0.031132698, -0.031706810, -0.032248020,
    -0.032754898, -0.033225536, -0.033659935, -0.034055710,
    -0.034412861, -0.034730434, -0.035007000, -0.035242081,
    -0.035435200, -0.035586357, -0.035694122, -0.035758972,
    0.035780907, 0.035758972, 0.035694122, 0.035586357,
    0.035435200, 0.035242081, 0.035007000, 0.034730434,
    0.034412861, 0.034055710, 0.033659935, 0.033225536,
    0.032754898, 0.032248020, 0.031706810, 0.031132698,
    0.030526638, 0.029890060, 0.029224873, 0.028532982,
    0.027815342, 0.027073860, 0.026310921, 0.025527000,
    0.024725437, 0.023907185, 0.023074150, 0.022228718,
    0.021372318, 0.020506859, 0.019634247, 0.018756866,
    0.017876148, 0.016994476, 0.016112804, 0.015233517,
    0.014358521, 0.013489246, 0.012627602, 0.011775017,
    0.010933399, 0.010103703, 0.009287834, 0.008487225,
    0.007703304, 0.006937027, 0.006189346, 0.005462170,
    0.004756451, 0.004072189, 0.003411293, 0.002774239,
    0.002161503, 0.001573563, 0.001011848, 0.000475883,
    -0.000033379, -0.000515938, -0.000971317, -0.001399517,
    -0.001800537, -0.002174854, -0.002521515, -0.002841473,
    0.003134727, 0.003401756, 0.003643036, 0.003858566,
    0.004049301, 0.004215240, 0.004357815, 0.004477024,
    0.004573822, 0.004649162, 0.004703045, 0.004737377,
    0.004752159, 0.004748821, 0.004728317, 0.004691124,
    0.004638195, 0.004570484, 0.004489899, 0.004395962,
    0.004290581, 0.004174709, 0.004048824, 0.003914356,
    0.003771782, 0.003622532, 0.003467083, 0.003306866,
    0.003141880, 0.002974033, 0.002803326, 0.002630711,
    0.002457142, 0.002283096, 0.002110004, 0.001937389,
    0.001766682, 0.001597881, 0.001432419, 0.001269817,
    0.001111031, 0.000956535, 0.000806808, 0.000661850,
    0.000522137, 0.000388145, 0.000259876, 0.000137329,
    0.000021458, -0.000088215, -0.000191689, -0.000288486,
    -0.000378609, -0.000462532, -0.000539303, -0.000610352,
    -0.000674248, -0.000731945, -0.000783920, -0.000829220,
    -0.000868797, -0.000902653, -0.000930786, -0.000953674,
    0.000971317, 0.000983715, 0.000991821, 0.000995159,
    0.000994205, 0.000989437, 0.000980854, 0.000968933,
    0.000954151, 0.000935555, 0.000915051, 0.000891685,
    0.000866413, 0.000838757, 0.000809669, 0.000779152,
    0.000747204, 0.000714302, 0.000680923, 0.000646591,
    0.000611782, 0.000576973, 0.000542164, 0.000507355,
    0.000472546, 0.000438213, 0.000404358, 0.000371456,
    0.000339031, 0.000307560, 0.000277042, 0.000247478,
    0.000218868, 0.000191212, 0.000165462, 0.000140190,
    0.000116348, 0.000093937, 0.000072956, 0.000052929,
    0.000034332, 0.000017166, 0.000000954, -0.000013828,
    -0.000027180, -0.000039577, -0.000050545, -0.000060558,
    -0.000069618, -0.000077724, -0.000084400, -0.000090122,
    -0.000095367, -0.000099182, -0.000102520, -0.000105381,
    -0.000106812, -0.000108242, -0.000108719, -0.000108719,
    -0.000108242, -0.000107288, -0.000105858, -0.000103951,
    0.000101566, 0.000099182, 0.000096321, 0.000093460,
    0.000090599, 0.000087261, 0.000083923, 0.000080585,
    0.000076771, 0.000073433, 0.000070095, 0.000066280,
    0.000062943, 0.000059605, 0.000055790, 0.000052929,
    0.000049591, 0.000046253, 0.000043392, 0.000040531,
    0.000037670, 0.000034809, 0.000032425, 0.000030041,
    0.000027657, 0.000025272, 0.000023365, 0.000021458,
    0.000019550, 0.000018120, 0.000016689, 0.000014782,
    0.000013828, 0.000012398, 0.000011444, 0.000010014,
    0.000009060, 0.000008106, 0.000007629, 0.000006676,
    0.000006199, 0.000005245, 0.000004768, 0.000004292,
    0.000003815, 0.000003338, 0.000003338, 0.000002861,
    0.000002384, 0.000002384, 0.000001907, 0.000001907,
    0.000001431, 0.000001431, 0.000000954, 0.000000954,
    0.000000954, 0.000000954, 0.000000477, 0.000000477,
    0.000000477, 0.000000477, 0.000000477, 0.000000477
];
const M_Mat = [
    [0.7071067811865476, 0.7409511253549592, 0.773010453362737, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234433, 0.9238795325112867, 0.9415440651830208, 0.9569403357322088, 0.970031253194544, 0.9807852804032304, 0.989176509964781, 0.9951847266721969, 0.9987954562051724, 1, 0.9987954562051724, 0.9951847266721969, 0.989176509964781, 0.9807852804032304, 0.970031253194544, 0.9569403357322088, 0.9415440651830208, 0.9238795325112867, 0.9039892931234433, 0.881921264348355, 0.8577286100002721, 0.8314696123025452, 0.8032075314806449, 0.773010453362737, 0.7409511253549592, 0.7071067811865476, 0.6715589548470184, 0.6343932841636455, 0.5956993044924335, 0.5555702330196023, 0.5141027441932217, 0.4713967368259978, 0.4275550934302822, 0.38268343236508984, 0.33688985339222005, 0.29028467725446233, 0.24298017990326398, 0.19509032201612833, 0.14673047445536175, 0.09801714032956077, 0.049067674327418126, 6.123233995736766e-17, -0.04906767432741801, -0.09801714032956065, -0.14673047445536164, -0.1950903220161282, -0.24298017990326387, -0.29028467725446216, -0.33688985339221994, -0.3826834323650897, -0.42755509343028186, -0.4713967368259977, -0.5141027441932216, -0.555570233019602, -0.5956993044924334, -0.6343932841636454, -0.6715589548470184],
    [-0.7071067811865475, -0.5956993044924334, -0.4713967368259977, -0.33688985339221994, -0.1950903220161282, -0.04906767432741801, 0.09801714032956077, 0.24298017990326398, 0.38268343236508984, 0.5141027441932217, 0.6343932841636455, 0.7409511253549592, 0.8314696123025452, 0.9039892931234433, 0.9569403357322088, 0.989176509964781, 1, 0.989176509964781, 0.9569403357322088, 0.9039892931234433, 0.8314696123025452, 0.7409511253549592, 0.6343932841636455, 0.5141027441932217, 0.38268343236508984, 0.24298017990326398, 0.09801714032956077, -0.04906767432741801, -0.1950903220161282, -0.33688985339221994, -0.4713967368259977, -0.5956993044924334, -0.7071067811865475, -0.8032075314806448, -0.8819212643483549, -0.9415440651830207, -0.9807852804032304, -0.9987954562051724, -0.9951847266721969, -0.970031253194544, -0.9238795325112868, -0.8577286100002721, -0.7730104533627371, -0.6715589548470187, -0.5555702330196022, -0.4275550934302825, -0.29028467725446244, -0.1467304744553623, -1.8369701987210297e-16, 0.14673047445536194, 0.29028467725446205, 0.42755509343028214, 0.5555702330196018, 0.6715589548470183, 0.7730104533627365, 0.857728610000272, 0.9238795325112865, 0.970031253194544, 0.9951847266721969, 0.9987954562051724, 0.9807852804032304, 0.9415440651830209, 0.881921264348355, 0.8032075314806453],
    [-0.7071067811865477, -0.8577286100002721, -0.9569403357322089, -0.9987954562051724, -0.9807852804032304, -0.9039892931234433, -0.773010453362737, -0.5956993044924334, -0.3826834323650897, -0.14673047445536164, 0.09801714032956077, 0.33688985339222005, 0.5555702330196023, 0.7409511253549592, 0.881921264348355, 0.970031253194544, 1, 0.970031253194544, 0.881921264348355, 0.7409511253549592, 0.5555702330196023, 0.33688985339222005, 0.09801714032956077, -0.14673047445536164, -0.3826834323650897, -0.5956993044924334, -0.773010453362737, -0.9039892931234433, -0.9807852804032304, -0.9987954562051724, -0.9569403357322089, -0.8577286100002721, -0.7071067811865477, -0.5141027441932218, -0.29028467725446244, -0.04906767432741803, 0.1950903220161283, 0.42755509343028214, 0.6343932841636456, 0.803207531480645, 0.9238795325112865, 0.9891765099647809, 0.9951847266721969, 0.9415440651830209, 0.8314696123025456, 0.6715589548470188, 0.471396736825998, 0.24298017990326423, 3.061616997868383e-16, -0.2429801799032628, -0.4713967368259975, -0.6715589548470177, -0.8314696123025451, -0.9415440651830205, -0.9951847266721969, -0.9891765099647811, -0.9238795325112867, -0.8032075314806454, -0.6343932841636454, -0.4275550934302827, -0.19509032201612803, 0.04906767432741742, 0.29028467725446266, 0.5141027441932213],
    [0.7071067811865474, 0.42755509343028214, 0.09801714032956009, -0.24298017990326412, -0.5555702330196022, -0.8032075314806449, -0.9569403357322089, -0.9987954562051724, -0.9238795325112867, -0.7409511253549589, -0.4713967368259977, -0.14673047445536164, 0.19509032201612833, 0.5141027441932217, 0.773010453362737, 0.9415440651830208, 1, 0.9415440651830208, 0.773010453362737, 0.5141027441932217, 0.19509032201612833, -0.14673047445536164, -0.4713967368259977, -0.7409511253549589, -0.9238795325112867, -0.9987954562051724, -0.9569403357322089, -0.8032075314806449, -0.5555702330196022, -0.24298017990326412, 0.09801714032956009, 0.42755509343028214, 0.7071067811865474, 0.9039892931234431, 0.9951847266721969, 0.9700312531945441, 0.8314696123025456, 0.5956993044924332, 0.29028467725446255, -0.04906767432741754, -0.3826834323650899, -0.6715589548470177, -0.8819212643483548, -0.989176509964781, -0.9807852804032307, -0.8577286100002723, -0.6343932841636454, -0.336889853392221, -4.286263797015736e-16, 0.3368898533922202, 0.6343932841636447, 0.8577286100002719, 0.9807852804032304, 0.9891765099647811, 0.8819212643483553, 0.6715589548470182, 0.38268343236509067, 0.0490676743274184, -0.29028467725446255, -0.5956993044924326, -0.831469612302545, -0.9700312531945441, -0.9951847266721969, -0.9039892931234434],
    [0.7071067811865477, 0.9415440651830209, 0.9951847266721969, 0.857728610000272, 0.5555702330196018, 0.14673047445536194, -0.29028467725446244, -0.6715589548470187, -0.9238795325112868, -0.9987954562051724, -0.8819212643483549, -0.5956993044924334, -0.1950903220161282, 0.24298017990326398, 0.6343932841636455, 0.9039892931234433, 1, 0.9039892931234433, 0.6343932841636455, 0.24298017990326398, -0.1950903220161282, -0.5956993044924334, -0.8819212643483549, -0.9987954562051724, -0.9238795325112868, -0.6715589548470187, -0.29028467725446244, 0.14673047445536194, 0.5555702330196018, 0.857728610000272, 0.9951847266721969, 0.9415440651830209, 0.7071067811865477, 0.33688985339222005, -0.09801714032955997, -0.5141027441932214, -0.8314696123025451, -0.989176509964781, -0.9569403357322087, -0.7409511253549599, -0.38268343236509056, 0.04906767432741742, 0.47139673682599736, 0.8032075314806448, 0.9807852804032304, 0.9700312531945443, 0.7730104533627377, 0.4275550934302828, 5.51091059616309e-16, -0.4275550934302818, -0.7730104533627369, -0.9700312531945441, -0.9807852804032307, -0.8032075314806455, -0.4713967368259983, -0.04906767432741852, 0.38268343236508956, 0.7409511253549591, 0.9569403357322089, 0.9891765099647809, 0.8314696123025448, 0.5141027441932239, 0.09801714032956282, -0.33688985339221816],
    [-0.7071067811865467, -0.2429801799032628, 0.29028467725446255, 0.7409511253549592, 0.9807852804032304, 0.9415440651830208, 0.6343932841636456, 0.14673047445536194, -0.38268343236509034, -0.8032075314806449, -0.9951847266721969, -0.9039892931234433, -0.555570233019602, -0.04906767432741801, 0.4713967368259978, 0.8577286100002721, 1, 0.8577286100002721, 0.4713967368259978, -0.04906767432741801, -0.555570233019602, -0.9039892931234433, -0.9951847266721969, -0.8032075314806449, -0.38268343236509034, 0.14673047445536194, 0.6343932841636456, 0.9415440651830208, 0.9807852804032304, 0.7409511253549592, 0.29028467725446255, -0.2429801799032628, -0.7071067811865467, -0.9700312531945441, -0.9569403357322087, -0.6715589548470182, -0.19509032201612803, 0.3368898533922202, 0.773010453362737, 0.989176509964781, 0.9238795325112867, 0.5956993044924335, 0.09801714032956081, -0.4275550934302818, -0.831469612302545, -0.9987954562051724, -0.8819212643483562, -0.5141027441932238, -2.4499125789312946e-15, 0.5141027441932227, 0.8819212643483555, 0.9987954562051724, 0.8314696123025448, 0.4275550934302814, -0.09801714032956124, -0.5956993044924338, -0.923879532511287, -0.9891765099647809, -0.7730104533627368, -0.33688985339221983, 0.19509032201612844, 0.6715589548470184, 0.9569403357322088, 0.970031253194544],
    [-0.7071067811865471, -0.9891765099647811, -0.8819212643483548, -0.42755509343028203, 0.19509032201612878, 0.7409511253549592, 0.9951847266721969, 0.857728610000272, 0.38268343236509, -0.24298017990326412, -0.7730104533627371, -0.9987954562051724, -0.8314696123025453, -0.33688985339221994, 0.29028467725446233, 0.8032075314806449, 1, 0.8032075314806449, 0.29028467725446233, -0.33688985339221994, -0.8314696123025453, -0.9987954562051724, -0.7730104533627371, -0.24298017990326412, 0.38268343236509, 0.857728610000272, 0.9951847266721969, 0.7409511253549592, 0.19509032201612878, -0.42755509343028203, -0.8819212643483548, -0.9891765099647811, -0.7071067811865471, -0.14673047445536166, 0.47139673682599736, 0.903989293123443, 0.9807852804032307, 0.6715589548470182, 0.09801714032956081, -0.5141027441932212, -0.9238795325112864, -0.9700312531945443, -0.6343932841636456, -0.04906767432741852, 0.5555702330196015, 0.9415440651830204, 0.9569403357322094, 0.595699304492435, -9.803364199544708e-16, -0.5956993044924338, -0.9569403357322089, -0.9415440651830209, -0.5555702330196027, 0.049067674327416926, 0.6343932841636444, 0.9700312531945435, 0.9238795325112876, 0.5141027441932241, -0.09801714032956099, -0.6715589548470184, -0.9807852804032303, -0.9039892931234437, -0.47139673682599875, 0.1467304744553601],
    [0.7071067811865466, 0.04906767432741742, -0.6343932841636454, -0.9891765099647811, -0.8314696123025451, -0.2429801799032628, 0.471396736825998, 0.9415440651830209, 0.9238795325112865, 0.42755509343028214, -0.29028467725446244, -0.8577286100002721, -0.9807852804032304, -0.5956993044924334, 0.09801714032956077, 0.7409511253549592, 1, 0.7409511253549592, 0.09801714032956077, -0.5956993044924334, -0.9807852804032304, -0.8577286100002721, -0.29028467725446244, 0.42755509343028214, 0.9238795325112865, 0.9415440651830209, 0.471396736825998, -0.2429801799032628, -0.8314696123025451, -0.9891765099647811, -0.6343932841636454, 0.04906767432741742, 0.7071067811865466, 0.9987954562051724, 0.7730104533627377, 0.1467304744553618, -0.5555702330196015, -0.9700312531945441, -0.8819212643483562, -0.33688985339221955, 0.38268343236508956, 0.9039892931234429, 0.9569403357322094, 0.5141027441932239, -0.19509032201612858, -0.8032075314806446, -0.995184726672197, -0.6715589548470199, -2.6948419387607653e-15, 0.6715589548470184, 0.9951847266721968, 0.8032075314806457, 0.19509032201613036, -0.5141027441932223, -0.9569403357322088, -0.9039892931234437, -0.3826834323650912, 0.33688985339221783, 0.8819212643483553, 0.9700312531945441, 0.5555702330196061, -0.1467304744553635, -0.7730104533627375, -0.9987954562051724],
    [0.7071067811865472, 0.9987954562051724, 0.6343932841636447, -0.14673047445536166, -0.8314696123025456, -0.9700312531945441, -0.4713967368259975, 0.33688985339222005, 0.9238795325112867, 0.9039892931234431, 0.29028467725446205, -0.5141027441932218, -0.9807852804032304, -0.8032075314806448, -0.09801714032956065, 0.6715589548470184, 1, 0.6715589548470184, -0.09801714032956065, -0.8032075314806448, -0.9807852804032304, -0.5141027441932218, 0.29028467725446205, 0.9039892931234431, 0.9238795325112867, 0.33688985339222005, -0.4713967368259975, -0.9700312531945441, -0.8314696123025456, -0.14673047445536166, 0.6343932841636447, 0.9987954562051724, 0.7071067811865472, -0.04906767432741729, -0.7730104533627369, -0.9891765099647811, -0.5555702330196026, 0.24298017990326243, 0.8819212643483555, 0.9415440651830208, 0.3826834323650909, -0.42755509343028003, -0.9569403357322089, -0.8577286100002726, -0.19509032201613025, 0.5956993044924337, 0.9951847266721968, 0.7409511253549602, -7.354070601250002e-16, -0.7409511253549589, -0.995184726672197, -0.5956993044924354, 0.19509032201612822, 0.8577286100002715, 0.9569403357322095, 0.4275550934302851, -0.382683432365089, -0.9415440651830214, -0.8819212643483565, -0.24298017990326443, 0.5555702330196038, 0.9891765099647806, 0.7730104533627371, 0.04906767432742292],
    [-0.7071067811865465, 0.1467304744553618, 0.8819212643483553, 0.903989293123443, 0.1950903220161272, -0.6715589548470182, -0.9951847266721969, -0.5141027441932214, 0.38268343236509045, 0.9700312531945441, 0.7730104533627365, -0.04906767432741803, -0.8314696123025455, -0.9415440651830207, -0.29028467725446216, 0.5956993044924335, 1, 0.5956993044924335, -0.29028467725446216, -0.9415440651830207, -0.8314696123025455, -0.04906767432741803, 0.7730104533627365, 0.9700312531945441, 0.38268343236509045, -0.5141027441932214, -0.9951847266721969, -0.6715589548470182, 0.1950903220161272, 0.903989293123443, 0.8819212643483553, 0.1467304744553618, -0.7071067811865465, -0.9891765099647811, -0.4713967368259983, 0.4275550934302801, 0.9807852804032304, 0.7409511253549601, -0.09801714032956124, -0.8577286100002717, -0.9238795325112876, -0.24298017990326395, 0.6343932841636444, 0.9987954562051724, 0.5555702330196028, -0.33688985339221794, -0.9569403357322088, -0.8032075314806458, -2.939771298590236e-15, 0.8032075314806444, 0.9569403357322095, 0.33688985339222016, -0.555570233019601, -0.9987954562051723, -0.6343932841636489, 0.24298017990326515, 0.9238795325112867, 0.8577286100002729, 0.09801714032956356, -0.7409511253549561, -0.9807852804032302, -0.4275550934302822, 0.47139673682599625, 0.9891765099647806],
    [-0.7071067811865474, -0.9700312531945441, -0.29028467725446255, 0.6715589548470182, 0.9807852804032304, 0.3368898533922202, -0.6343932841636454, -0.989176509964781, -0.3826834323650899, 0.5956993044924332, 0.9951847266721969, 0.42755509343028214, -0.5555702330196022, -0.9987954562051724, -0.4713967368259977, 0.5141027441932217, 1, 0.5141027441932217, -0.4713967368259977, -0.9987954562051724, -0.5555702330196022, 0.42755509343028214, 0.9951847266721969, 0.5956993044924332, -0.3826834323650899, -0.989176509964781, -0.6343932841636454, 0.3368898533922202, 0.9807852804032304, 0.6715589548470182, -0.29028467725446255, -0.9700312531945441, -0.7071067811865474, 0.24298017990326243, 0.9569403357322089, 0.7409511253549601, -0.19509032201612858, -0.9415440651830203, -0.7730104533627368, 0.14673047445536033, 0.923879532511287, 0.8032075314806457, -0.09801714032956099, -0.9039892931234428, -0.831469612302545, 0.04906767432741668, 0.8819212643483553, 0.8577286100002728, -4.904777002955296e-16, -0.8577286100002696, -0.8819212643483565, -0.04906767432741925, 0.8314696123025456, 0.9039892931234453, 0.09801714032956356, -0.8032075314806442, -0.9238795325112865, -0.1467304744553664, 0.7730104533627351, 0.9415440651830211, 0.1950903220161276, -0.740951125354956, -0.9569403357322097, -0.24298017990326493],
    [0.7071067811865465, -0.33688985339221955, -0.9951847266721969, -0.5141027441932212, 0.5555702330196025, 0.989176509964781, 0.29028467725446266, -0.7409511253549599, -0.9238795325112864, -0.04906767432741754, 0.881921264348355, 0.803207531480645, -0.19509032201612866, -0.970031253194544, -0.6343932841636454, 0.4275550934302822, 1, 0.4275550934302822, -0.6343932841636454, -0.970031253194544, -0.19509032201612866, 0.803207531480645, 0.881921264348355, -0.04906767432741754, -0.9238795325112864, -0.7409511253549599, 0.29028467725446266, 0.989176509964781, 0.5555702330196025, -0.5141027441932212, -0.9951847266721969, -0.33688985339221955, 0.7071067811865465, 0.9415440651830208, 0.09801714032956282, -0.8577286100002717, -0.8314696123025449, 0.14673047445536033, 0.9569403357322088, 0.67155895484702, -0.3826834323650892, -0.9987954562051723, -0.47139673682599875, 0.5956993044924335, 0.9807852804032309, 0.24298017990326776, -0.7730104533627375, -0.9039892931234438, -3.1847006584197066e-15, 0.9039892931234441, 0.7730104533627371, -0.2429801799032616, -0.9807852804032295, -0.5956993044924329, 0.47139673682599625, 0.9987954562051726, 0.3826834323650885, -0.6715589548470179, -0.9569403357322097, -0.14673047445536663, 0.8314696123025452, 0.8577286100002731, -0.09801714032955648, -0.941544065183021],
    [0.7071067811865475, 0.9039892931234429, -0.0980171403295627, -0.9700312531945443, -0.5555702330196015, 0.5956993044924335, 0.9569403357322085, 0.04906767432741742, -0.9238795325112867, -0.6715589548470177, 0.471396736825998, 0.9891765099647809, 0.1950903220161283, -0.8577286100002721, -0.773010453362737, 0.33688985339222005, 1, 0.33688985339222005, -0.773010453362737, -0.8577286100002721, 0.1950903220161283, 0.9891765099647809, 0.471396736825998, -0.6715589548470177, -0.9238795325112867, 0.04906767432741742, 0.9569403357322085, 0.5956993044924335, -0.5555702330196015, -0.9700312531945443, -0.0980171403295627, 0.9039892931234429, 0.7071067811865475, -0.42755509343028003, -0.995184726672197, -0.24298017990326395, 0.8314696123025438, 0.8032075314806457, -0.2902846772544621, -0.9987954562051723, -0.3826834323650912, 0.7409511253549588, 0.8819212643483564, -0.1467304744553635, -0.9807852804032297, -0.5141027441932244, 0.6343932841636439, 0.941544065183021, -2.45548340466059e-16, -0.9415440651830213, -0.634393284163649, 0.5141027441932187, 0.9807852804032309, 0.146730474455363, -0.8819212643483549, -0.7409511253549584, 0.3826834323650851, 0.9987954562051726, 0.29028467725446505, -0.8032075314806439, -0.8314696123025456, 0.24298017990326445, 0.9951847266721964, 0.42755509343028597],
    [-0.7071067811865464, 0.5141027441932239, 0.9569403357322089, -0.04906767432741852, -0.9807852804032307, -0.4275550934302818, 0.7730104533627377, 0.8032075314806448, -0.38268343236509056, -0.989176509964781, -0.09801714032955997, 0.9415440651830209, 0.5555702330196018, -0.6715589548470187, -0.8819212643483549, 0.24298017990326398, 1, 0.24298017990326398, -0.8819212643483549, -0.6715589548470187, 0.5555702330196018, 0.9415440651830209, -0.09801714032955997, -0.989176509964781, -0.38268343236509056, 0.8032075314806448, 0.7730104533627377, -0.4275550934302818, -0.9807852804032307, -0.04906767432741852, 0.9569403357322089, 0.5141027441932239, -0.7071067811865464, -0.8577286100002726, 0.2902846772544622, 0.9987954562051724, 0.19509032201613036, -0.9039892931234428, -0.6343932841636459, 0.5956993044924335, 0.9238795325112877, -0.1467304744553635, -0.9951847266721968, -0.3368898533922236, 0.8314696123025456, 0.7409511253549605, -0.47139673682599326, -0.9700312531945442, -3.4296300182491773e-15, 0.9700312531945442, 0.4713967368259993, -0.740951125354956, -0.8314696123025453, 0.33688985339221716, 0.9951847266721968, 0.14673047445536325, -0.9238795325112851, -0.5956993044924332, 0.6343932841636434, 0.9039892931234457, -0.19509032201612714, -0.9987954562051722, -0.290284677254462, 0.8577286100002709],
    [-0.7071067811865476, -0.8032075314806446, 0.4713967368259984, 0.9415440651830204, -0.19509032201613002, -0.9987954562051724, -0.09801714032955972, 0.9700312531945443, 0.3826834323650898, -0.8577286100002723, -0.6343932841636448, 0.6715589548470188, 0.8314696123025452, -0.4275550934302825, -0.9569403357322088, 0.14673047445536175, 1, 0.14673047445536175, -0.9569403357322088, -0.4275550934302825, 0.8314696123025452, 0.6715589548470188, -0.6343932841636448, -0.8577286100002723, 0.3826834323650898, 0.9700312531945443, -0.09801714032955972, -0.9987954562051724, -0.19509032201613002, 0.9415440651830204, 0.4713967368259984, -0.8032075314806446, -0.7071067811865476, 0.5956993044924337, 0.8819212643483563, -0.33688985339221794, -0.9807852804032308, 0.04906767432741668, 0.9951847266721968, 0.24298017990326776, -0.9238795325112854, -0.5141027441932244, 0.7730104533627352, 0.7409511253549605, -0.5555702330196007, -0.9039892931234439, 0.2902846772544615, 0.989176509964781, -6.189806365883577e-19, -0.989176509964781, -0.2902846772544615, 0.9039892931234439, 0.5555702330196066, -0.7409511253549558, -0.7730104533627398, 0.5141027441932183, 0.9238795325112881, -0.24298017990326087, -0.9951847266721972, -0.04906767432742023, 0.9807852804032301, 0.33688985339222133, -0.8819212643483513, -0.5956993044924337],
    [0.7071067811865462, -0.6715589548470199, -0.7730104533627357, 0.595699304492435, 0.831469612302544, -0.5141027441932238, -0.8819212643483547, 0.4275550934302828, 0.9238795325112864, -0.336889853392221, -0.9569403357322085, 0.24298017990326423, 0.9807852804032303, -0.1467304744553623, -0.9951847266721968, 0.049067674327418126, 1, 0.049067674327418126, -0.9951847266721968, -0.1467304744553623, 0.9807852804032303, 0.24298017990326423, -0.9569403357322085, -0.336889853392221, 0.9238795325112864, 0.4275550934302828, -0.8819212643483547, -0.5141027441932238, 0.831469612302544, 0.595699304492435, -0.7730104533627357, -0.6715589548470199, 0.7071067811865462, 0.7409511253549602, -0.6343932841636443, -0.8032075314806458, 0.5555702330196011, 0.8577286100002728, -0.4713967368259935, -0.9039892931234438, 0.38268343236508556, 0.941544065183021, -0.2902846772544582, -0.9700312531945442, 0.19509032201612425, 0.989176509964781, -0.09801714032955673, -0.9987954562051724, -3.674559378078648e-15, 0.9987954562051724, 0.09801714032956405, -0.989176509964781, -0.19509032201613144, 0.9700312531945441, 0.2902846772544653, -0.941544065183021, -0.3826834323650924, 0.9039892931234437, 0.4713967368259999, -0.8577286100002727, -0.5555702330196102, 0.8032075314806414, 0.6343932841636472, -0.7409511253549601],
    [0.7071067811865476, 0.6715589548470184, -0.7730104533627368, -0.5956993044924338, 0.8314696123025448, 0.5141027441932227, -0.8819212643483562, -0.4275550934302818, 0.9238795325112867, 0.3368898533922202, -0.9569403357322087, -0.2429801799032628, 0.9807852804032304, 0.14673047445536194, -0.9951847266721969, -0.04906767432741801, 1, -0.04906767432741801, -0.9951847266721969, 0.14673047445536194, 0.9807852804032304, -0.2429801799032628, -0.9569403357322087, 0.3368898533922202, 0.9238795325112867, -0.4275550934302818, -0.8819212643483562, 0.5141027441932227, 0.8314696123025448, -0.5956993044924338, -0.7730104533627368, 0.6715589548470184, 0.7071067811865476, -0.7409511253549589, -0.6343932841636459, 0.8032075314806444, 0.5555702330196061, -0.8577286100002696, -0.47139673682599587, 0.9039892931234441, 0.3826834323650883, -0.9415440651830213, -0.2902846772544613, 0.9700312531945442, 0.1950903220161276, -0.989176509964781, -0.09801714032956038, 0.9987954562051724, 2.443103791928823e-16, -0.9987954562051724, 0.0980171403295599, 0.9891765099647811, -0.19509032201612714, -0.9700312531945443, 0.29028467725446083, 0.9415440651830214, -0.3826834323650813, -0.9039892931234473, 0.47139673682598915, 0.8577286100002699, -0.5555702330196056, -0.8032075314806426, 0.6343932841636484, 0.7409511253549568],
    [-0.7071067811865461, 0.8032075314806457, 0.4713967368259969, -0.9415440651830209, -0.19509032201612858, 0.9987954562051724, -0.0980171403295627, -0.9700312531945441, 0.38268343236509067, 0.8577286100002719, -0.6343932841636454, -0.6715589548470177, 0.8314696123025456, 0.42755509343028214, -0.9569403357322089, -0.14673047445536164, 1, -0.14673047445536164, -0.9569403357322089, 0.42755509343028214, 0.8314696123025456, -0.6715589548470177, -0.6343932841636454, 0.8577286100002719, 0.38268343236509067, -0.9700312531945441, -0.0980171403295627, 0.9987954562051724, -0.19509032201612858, -0.9415440651830209, 0.4713967368259969, 0.8032075314806457, -0.7071067811865461, -0.5956993044924354, 0.8819212643483553, 0.33688985339222016, -0.9807852804032297, -0.04906767432741925, 0.9951847266721967, -0.2429801799032616, -0.9238795325112865, 0.5141027441932187, 0.7730104533627373, -0.740951125354956, -0.5555702330196036, 0.9039892931234439, 0.29028467725446505, -0.989176509964781, -3.919488737908119e-15, 0.9891765099647811, -0.29028467725445756, -0.9039892931234442, 0.555570233019603, 0.7409511253549612, -0.7730104533627369, -0.5141027441932254, 0.9238795325112835, 0.2429801799032623, -0.9951847266721966, 0.04906767432741142, 0.9807852804032298, -0.33688985339221944, -0.8819212643483573, 0.5956993044924263],
    [-0.7071067811865477, -0.5141027441932223, 0.9569403357322095, 0.049067674327416926, -0.9807852804032304, 0.4275550934302814, 0.7730104533627358, -0.8032075314806455, -0.38268343236508967, 0.9891765099647811, -0.09801714032956069, -0.9415440651830205, 0.5555702330196023, 0.6715589548470183, -0.881921264348355, -0.24298017990326387, 1, -0.24298017990326387, -0.881921264348355, 0.6715589548470183, 0.5555702330196023, -0.9415440651830205, -0.09801714032956069, 0.9891765099647811, -0.38268343236508967, -0.8032075314806455, 0.7730104533627358, 0.4275550934302814, -0.9807852804032304, 0.049067674327416926, 0.9569403357322095, -0.5141027441932223, -0.7071067811865477, 0.8577286100002715, 0.29028467725446433, -0.9987954562051723, 0.19509032201612447, 0.9039892931234453, -0.6343932841636466, -0.5956993044924329, 0.9238795325112866, 0.146730474455363, -0.9951847266721972, 0.33688985339221716, 0.8314696123025475, -0.7409511253549558, -0.4713967368259965, 0.9700312531945441, 4.892397390223529e-16, -0.9700312531945443, 0.47139673682599564, 0.7409511253549612, -0.8314696123025429, -0.33688985339221805, 0.9951847266721963, -0.14673047445536205, -0.9238795325112897, 0.5956993044924321, 0.6343932841636528, -0.9039892931234419, -0.19509032201612544, 0.9987954562051726, -0.2902846772544634, -0.8577286100002757],
    [0.707106781186546, -0.9039892931234437, -0.09801714032956099, 0.9700312531945435, -0.5555702330196027, -0.5956993044924338, 0.9569403357322094, -0.04906767432741852, -0.9238795325112864, 0.6715589548470182, 0.47139673682599736, -0.9891765099647811, 0.19509032201612878, 0.857728610000272, -0.7730104533627371, -0.33688985339221994, 1, -0.33688985339221994, -0.7730104533627371, 0.857728610000272, 0.19509032201612878, -0.9891765099647811, 0.47139673682599736, 0.6715589548470182, -0.9238795325112864, -0.04906767432741852, 0.9569403357322094, -0.5956993044924338, -0.5555702330196027, 0.9700312531945435, -0.09801714032956099, -0.9039892931234437, 0.707106781186546, 0.4275550934302851, -0.9951847266721968, 0.24298017990326515, 0.8314696123025471, -0.8032075314806442, -0.2902846772544613, 0.9987954562051726, -0.3826834323650885, -0.7409511253549584, 0.8819212643483533, 0.14673047445536325, -0.9807852804032303, 0.5141027441932183, 0.6343932841636468, -0.941544065183021, -4.164418097737589e-15, 0.9415440651830214, -0.6343932841636404, -0.5141027441932254, 0.9807852804032301, -0.14673047445536205, -0.8819212643483538, 0.7409511253549529, 0.3826834323650962, -0.9987954562051722, 0.2902846772544601, 0.8032075314806449, -0.8314696123025465, -0.24298017990327322, 0.9951847266721976, -0.4275550934302776],
    [0.7071067811865503, 0.33688985339221783, -0.9951847266721968, 0.5141027441932241, 0.5555702330196013, -0.9891765099647809, 0.2902846772544639, 0.7409511253549591, -0.9238795325112875, 0.0490676743274184, 0.8819212643483547, -0.8032075314806454, -0.1950903220161273, 0.970031253194544, -0.6343932841636459, -0.42755509343028186, 1, -0.42755509343028186, -0.6343932841636459, 0.970031253194544, -0.1950903220161273, -0.8032075314806454, 0.8819212643483547, 0.0490676743274184, -0.9238795325112875, 0.7409511253549591, 0.2902846772544639, -0.9891765099647809, 0.5555702330196013, 0.5141027441932241, -0.9951847266721968, 0.33688985339221783, 0.7071067811865503, -0.9415440651830214, 0.09801714032956063, 0.8577286100002729, -0.8314696123025435, -0.1467304744553664, 0.9569403357322086, -0.6715589548470179, -0.38268343236509195, 0.9987954562051726, -0.4713967368259928, -0.5956993044924332, 0.9807852804032302, -0.24298017990326087, -0.77301045336274, 0.9039892931234437, 7.839596456452825e-15, -0.9039892931234473, 0.773010453362739, 0.2429801799032623, -0.9807852804032304, 0.5956993044924321, 0.47139673682600036, -0.9987954562051722, 0.382683432365084, 0.6715589548470242, -0.9569403357322062, 0.14673047445536494, 0.8314696123025443, -0.8577286100002721, -0.09801714032956209, 0.9415440651830218],
    [-0.707106781186546, 0.9700312531945441, -0.2902846772544642, -0.6715589548470184, 0.9807852804032308, -0.33688985339221983, -0.6343932841636444, 0.9891765099647809, -0.3826834323650908, -0.5956993044924326, 0.9951847266721969, -0.4275550934302827, -0.5555702330196017, 0.9987954562051724, -0.4713967368259979, -0.5141027441932216, 1, -0.5141027441932216, -0.4713967368259979, 0.9987954562051724, -0.5555702330196017, -0.4275550934302827, 0.9951847266721969, -0.5956993044924326, -0.3826834323650908, 0.9891765099647809, -0.6343932841636444, -0.33688985339221983, 0.9807852804032308, -0.6715589548470184, -0.2902846772544642, 0.9700312531945441, -0.707106781186546, -0.24298017990326443, 0.9569403357322086, -0.7409511253549561, -0.19509032201613097, 0.9415440651830211, -0.7730104533627373, -0.14673047445536663, 0.9238795325112881, -0.8032075314806439, -0.09801714032956063, 0.9039892931234457, -0.8314696123025431, -0.04906767432742023, 0.8819212643483553, -0.8577286100002727, -4.40934745756706e-15, 0.8577286100002699, -0.8819212643483545, 0.04906767432741142, 0.831469612302544, -0.9039892931234419, 0.09801714032955186, 0.8032075314806449, -0.9238795325112846, 0.14673047445536494, 0.7730104533627383, -0.9415440651830181, 0.1950903220161293, 0.7409511253549621, -0.9569403357322059, 0.2429801799032628],
    [-0.7071067811865479, -0.1467304744553635, 0.8819212643483553, -0.9039892931234437, 0.19509032201613036, 0.6715589548470184, -0.995184726672197, 0.5141027441932239, 0.38268343236508956, -0.9700312531945441, 0.7730104533627377, 0.04906767432741742, -0.8314696123025451, 0.9415440651830209, -0.29028467725446244, -0.5956993044924334, 1, -0.5956993044924334, -0.29028467725446244, 0.9415440651830209, -0.8314696123025451, 0.04906767432741742, 0.7730104533627377, -0.9700312531945441, 0.38268343236508956, 0.5141027441932239, -0.995184726672197, 0.6715589548470184, 0.19509032201613036, -0.9039892931234437, 0.8819212643483553, -0.1467304744553635, -0.7071067811865479, 0.9891765099647806, -0.47139673682599326, -0.4275550934302822, 0.9807852804032309, -0.740951125354956, -0.09801714032956038, 0.8577286100002731, -0.9238795325112851, 0.24298017990326445, 0.6343932841636468, -0.9987954562051722, 0.555570233019603, 0.33688985339222133, -0.9569403357322078, 0.8032075314806414, 9.790984586812941e-16, -0.8032075314806426, 0.9569403357322073, -0.33688985339221944, -0.5555702330196105, 0.9987954562051726, -0.6343932841636453, -0.24298017990327322, 0.9238795325112886, -0.8577286100002721, 0.09801714032955137, 0.7409511253549621, -0.9807852804032305, 0.42755509343027404, 0.47139673682600125, -0.9891765099647809],
    [0.7071067811865483, -0.9987954562051724, 0.634393284163646, 0.1467304744553601, -0.8314696123025438, 0.970031253194544, -0.47139673682599853, -0.33688985339221816, 0.923879532511287, -0.9039892931234434, 0.2902846772544636, 0.5141027441932213, -0.9807852804032305, 0.8032075314806453, -0.09801714032956045, -0.6715589548470184, 1, -0.6715589548470184, -0.09801714032956045, 0.8032075314806453, -0.9807852804032305, 0.5141027441932213, 0.2902846772544636, -0.9039892931234434, 0.923879532511287, -0.33688985339221816, -0.47139673682599853, 0.970031253194544, -0.8314696123025438, 0.1467304744553601, 0.634393284163646, -0.9987954562051724, 0.7071067811865483, 0.04906767432742292, -0.7730104533627394, 0.9891765099647806, -0.5555702330196005, -0.24298017990326493, 0.881921264348355, -0.941544065183021, 0.3826834323650849, 0.42755509343028597, -0.9569403357322098, 0.8577286100002709, -0.1950903220161269, -0.5956993044924337, 0.9951847266721968, -0.7409511253549601, 2.4511505402044715e-15, 0.7409511253549568, -0.9951847266721959, 0.5956993044924263, 0.19509032201613602, -0.8577286100002757, 0.9569403357322072, -0.4275550934302776, -0.3826834323650935, 0.9415440651830218, -0.881921264348354, 0.2429801799032628, 0.5555702330196024, -0.9891765099647809, 0.7730104533627381, -0.04906767432742072],
    [0.7071067811865505, -0.04906767432741925, -0.6343932841636468, 0.9891765099647806, -0.831469612302545, 0.2429801799032641, 0.4713967368259969, -0.9415440651830203, 0.9238795325112875, -0.4275550934302813, -0.29028467725446255, 0.8577286100002719, -0.9807852804032307, 0.5956993044924332, 0.09801714032956009, -0.7409511253549589, 1, -0.7409511253549589, 0.09801714032956009, 0.5956993044924332, -0.9807852804032307, 0.8577286100002719, -0.29028467725446255, -0.4275550934302813, 0.9238795325112875, -0.9415440651830203, 0.4713967368259969, 0.2429801799032641, -0.831469612302545, 0.9891765099647806, -0.6343932841636468, -0.04906767432741925, 0.7071067811865505, -0.9987954562051724, 0.7730104533627351, -0.146730474455363, -0.5555702330196036, 0.9700312531945451, -0.8819212643483548, 0.33688985339221694, 0.382683432365089, -0.9039892931234442, 0.9569403357322074, -0.5141027441932149, -0.19509032201612497, 0.8032075314806446, -0.9951847266721966, 0.6715589548470144, 8.329455176111767e-15, -0.6715589548470162, 0.9951847266721969, -0.8032075314806432, 0.19509032201612256, 0.5141027441932292, -0.9569403357322082, 0.9039892931234432, -0.38268343236508673, -0.33688985339222594, 0.8819212643483594, -0.9700312531945445, 0.5555702330196015, 0.14673047445536544, -0.7730104533627412, 0.998795456205172],
    [-0.7071067811865458, 0.9891765099647806, -0.8819212643483565, 0.4275550934302851, 0.19509032201612822, -0.7409511253549589, 0.9951847266721968, -0.8577286100002726, 0.3826834323650909, 0.24298017990326243, -0.7730104533627369, 0.9987954562051724, -0.8314696123025456, 0.33688985339222005, 0.29028467725446205, -0.8032075314806448, 1, -0.8032075314806448, 0.29028467725446205, 0.33688985339222005, -0.8314696123025456, 0.9987954562051724, -0.7730104533627369, 0.24298017990326243, 0.3826834323650909, -0.8577286100002726, 0.9951847266721968, -0.7409511253549589, 0.19509032201612822, 0.4275550934302851, -0.8819212643483565, 0.9891765099647806, -0.7071067811865458, 0.1467304744553596, 0.4713967368259993, -0.903989293123444, 0.9807852804032302, -0.6715589548470177, 0.0980171403295599, 0.5141027441932221, -0.9238795325112868, 0.9700312531945441, -0.6343932841636404, 0.049067674327418764, 0.5555702330196073, -0.9415440651830204, 0.9569403357322073, -0.5956993044924349, -4.899206177226001e-15, 0.5956993044924314, -0.9569403357322102, 0.9415440651830218, -0.5555702330195991, -0.04906767432742855, 0.6343932841636479, -0.9700312531945464, 0.9238795325112857, -0.5141027441932137, -0.09801714032956259, 0.6715589548470249, -0.9807852804032308, 0.9039892931234398, -0.4713967368259969, -0.1467304744553693],
    [-0.707106781186548, 0.242980179903268, 0.2902846772544618, -0.7409511253549563, 0.9807852804032303, -0.9415440651830209, 0.6343932841636458, -0.14673047445536216, -0.38268343236508945, 0.8032075314806447, -0.9951847266721968, 0.9039892931234434, -0.5555702330196024, 0.049067674327418154, 0.4713967368259976, -0.857728610000272, 1, -0.857728610000272, 0.4713967368259976, 0.049067674327418154, -0.5555702330196024, 0.9039892931234434, -0.9951847266721968, 0.8032075314806447, -0.38268343236508945, -0.14673047445536216, 0.6343932841636458, -0.9415440651830209, 0.9807852804032303, -0.7409511253549563, 0.2902846772544618, 0.242980179903268, -0.707106781186548, 0.9700312531945451, -0.9569403357322086, 0.6715589548470151, -0.19509032201612736, -0.3368898533922243, 0.7730104533627375, -0.9891765099647817, 0.9238795325112863, -0.5956993044924352, 0.09801714032955235, 0.4275550934302864, -0.8314696123025459, 0.9987954562051723, -0.881921264348351, 0.5141027441932174, 1.4689571783402355e-15, -0.51410274419322, 0.8819212643483592, -0.9987954562051722, 0.8314696123025443, -0.42755509343028375, -0.09801714032956942, 0.5956993044924376, -0.9238795325112874, 0.9891765099647812, -0.7730104533627312, 0.33688985339221483, 0.19509032201613025, -0.6715589548470173, 0.9569403357322115, -0.9700312531945426],
    [0.7071067811865482, -0.9415440651830213, 0.9951847266721967, -0.857728610000271, 0.5555702330196061, -0.14673047445536241, -0.2902846772544621, 0.6715589548470184, -0.923879532511287, 0.9987954562051724, -0.8819212643483562, 0.5956993044924335, -0.19509032201612803, -0.2429801799032628, 0.6343932841636456, -0.9039892931234433, 1, -0.9039892931234433, 0.6343932841636456, -0.2429801799032628, -0.19509032201612803, 0.5956993044924335, -0.8819212643483562, 0.9987954562051724, -0.923879532511287, 0.6715589548470184, -0.2902846772544621, -0.14673047445536241, 0.5555702330196061, -0.857728610000271, 0.9951847266721967, -0.9415440651830213, 0.7071067811865482, -0.3368898533922206, -0.09801714032956038, 0.5141027441932219, -0.8314696123025456, 0.9891765099647811, -0.9569403357322085, 0.7409511253549579, -0.3826834323650813, -0.04906767432742757, 0.4713967368259939, -0.8032075314806426, 0.9807852804032298, -0.9700312531945448, 0.7730104533627387, -0.4275550934302842, 1.96129182054553e-15, 0.42755509343028064, -0.7730104533627362, 0.9700312531945438, -0.9807852804032305, 0.8032075314806449, -0.47139673682599736, 0.0490676743274173, 0.3826834323650908, -0.7409511253549601, 0.9569403357322094, -0.9891765099647807, 0.8314696123025438, -0.5141027441932191, 0.09801714032955722, 0.3368898533922236],
    [0.7071067811865507, -0.4275550934302822, 0.09801714032956356, 0.24298017990326515, -0.555570233019601, 0.8032075314806444, -0.9569403357322088, 0.9987954562051724, -0.9238795325112876, 0.7409511253549601, -0.4713967368259983, 0.1467304744553618, 0.1950903220161272, -0.5141027441932214, 0.7730104533627365, -0.9415440651830207, 1, -0.9415440651830207, 0.7730104533627365, -0.5141027441932214, 0.1950903220161272, 0.1467304744553618, -0.4713967368259983, 0.7409511253549601, -0.9238795325112876, 0.9987954562051724, -0.9569403357322088, 0.8032075314806444, -0.555570233019601, 0.24298017990326515, 0.09801714032956356, -0.4275550934302822, 0.7071067811865507, -0.903989293123444, 0.9951847266721968, -0.9700312531945433, 0.8314696123025451, -0.5956993044924298, 0.29028467725446083, 0.04906767432741681, -0.3826834323650926, 0.6715589548470239, -0.8819212643483538, 0.9891765099647812, -0.9807852804032293, 0.8577286100002668, -0.6343932841636453, 0.3368898533922158, 8.819313895770708e-15, -0.336889853392219, 0.6343932841636479, -0.8577286100002759, 0.98078528040323, -0.9891765099647807, 0.8819212643483522, -0.6715589548470108, 0.38268343236508945, -0.04906767432741338, -0.2902846772544709, 0.5956993044924325, -0.831469612302547, 0.9700312531945459, -0.9951847266721972, 0.9039892931234365],
    [-0.7071067811865457, 0.8577286100002712, -0.9569403357322087, 0.9987954562051724, -0.9807852804032302, 0.9039892931234438, -0.7730104533627369, 0.5956993044924352, -0.382683432365091, 0.14673047445536205, 0.09801714032956137, -0.3368898533922201, 0.5555702330196016, -0.7409511253549593, 0.8819212643483548, -0.970031253194544, 1, -0.970031253194544, 0.8819212643483548, -0.7409511253549593, 0.5555702330196016, -0.3368898533922201, 0.09801714032956137, 0.14673047445536205, -0.382683432365091, 0.5956993044924352, -0.7730104533627369, 0.9039892931234438, -0.9807852804032302, 0.9987954562051724, -0.9569403357322087, 0.8577286100002712, -0.7071067811865457, 0.5141027441932186, -0.2902846772544578, 0.04906767432741926, 0.19509032201612808, -0.42755509343028286, 0.634393284163647, -0.8032075314806467, 0.9238795325112856, -0.9891765099647817, 0.9951847266721969, -0.9415440651830184, 0.8314696123025446, -0.6715589548470114, 0.47139673682599476, -0.2429801799032666, -5.389064896884942e-15, 0.24298017990326326, -0.47139673682600425, 0.6715589548470194, -0.8314696123025506, 0.941544065183022, -0.9951847266721966, 0.9891765099647801, -0.923879532511287, 0.8032075314806403, -0.6343932841636442, 0.42755509343027315, -0.19509032201612447, -0.04906767432741582, 0.2902846772544681, -0.5141027441932339],
    [-0.7071067811865482, 0.5956993044924359, -0.47139673682599603, 0.3368898533922204, -0.19509032201613072, 0.04906767432742268, 0.09801714032956088, -0.24298017990326207, 0.38268343236508934, -0.5141027441932225, 0.6343932841636445, -0.7409511253549592, 0.8314696123025451, -0.9039892931234431, 0.9569403357322088, -0.989176509964781, 1, -0.989176509964781, 0.9569403357322088, -0.9039892931234431, 0.8314696123025451, -0.7409511253549592, 0.6343932841636445, -0.5141027441932225, 0.38268343236508934, -0.24298017990326207, 0.09801714032956088, 0.04906767432742268, -0.19509032201613072, 0.3368898533922204, -0.47139673682599603, 0.5956993044924359, -0.7071067811865482, 0.8032075314806442, -0.8819212643483568, 0.9415440651830214, -0.9807852804032303, 0.9987954562051726, -0.9951847266721959, 0.9700312531945422, -0.9238795325112849, 0.8577286100002706, -0.7730104533627365, 0.6715589548470194, -0.5555702330196053, 0.4275550934302745, -0.29028467725445634, 0.14673047445535767, 1.9588158979991767e-15, -0.14673047445536155, 0.2902846772544601, -0.42755509343029086, 0.5555702330196085, -0.6715589548470224, 0.773010453362739, -0.8577286100002727, 0.9238795325112863, -0.9700312531945466, 0.9951847266721977, -0.9987954562051727, 0.9807852804032268, -0.9415440651830153, 0.8819212643483483, -0.8032075314806376],
    [0.7071067811865481, -0.740951125354956, 0.7730104533627351, -0.8032075314806442, 0.8314696123025456, -0.8577286100002696, 0.8819212643483553, -0.9039892931234428, 0.923879532511287, -0.9415440651830203, 0.9569403357322089, -0.9700312531945441, 0.9807852804032304, -0.989176509964781, 0.9951847266721969, -0.9987954562051724, 1, -0.9987954562051724, 0.9951847266721969, -0.989176509964781, 0.9807852804032304, -0.9700312531945441, 0.9569403357322089, -0.9415440651830203, 0.923879532511287, -0.9039892931234428, 0.8819212643483553, -0.8577286100002696, 0.8314696123025456, -0.8032075314806442, 0.7730104533627351, -0.740951125354956, 0.7071067811865481, -0.6715589548470177, 0.6343932841636434, -0.5956993044924298, 0.555570233019603, -0.5141027441932149, 0.47139673682598915, -0.42755509343028464, 0.3826834323650908, -0.33688985339221944, 0.2902846772544601, -0.24298017990325993, 0.19509032201612256, -0.14673047445535428, 0.09801714032955137, -0.049067674327421214, 1.471433100886589e-15, 0.04906767432741827, -0.09801714032956259, 0.14673047445536544, -0.1950903220161336, 0.24298017990327087, -0.2902846772544709, 0.33688985339223004, -0.38268343236508806, 0.427555093430282, -0.47139673682601163, 0.5141027441932247, -0.5555702330196183, 0.5956993044924388, -0.6343932841636412, 0.671558954847026]
];
// 输入：512个样本，其中前32个是滤波器的输入。
//       可以理解成一个512点的窗口从左向右滑过样本，每次滑动步进32点。窗口最右侧为0，最左侧为511，与输入序列**顺序相反**。窗口最右侧为实际的输入，其左侧为缓冲区。
// 输出：长度为32的子带滤波结果，每一点代表每一频带在此32点时域窗口对应的时间点上的（降）采样值
function BasicAnalysisSubbandFilter(inputBuffer) {
    // Window by 512 Coefficients (ANALYSIS_SUBBAND_FILTER_WINDOW_COEFFICIENTS[])
    let Z = new Array(); // length = 512
    for (let i = 0; i < 512; i++) {
        Z[i] = inputBuffer[i] * ANALYSIS_SUBBAND_FILTER_WINDOW_COEFFICIENTS[i];
    }
    // Partial Calculation
    let Y = new Array(); // length = 64
    for (let i = 0; i < 64; i++) {
        let sum = 0;
        for (let j = 0; j < 8; j++) {
            sum += Z[i + 64 * j];
        }
        Y[i] = sum;
    }
    // Calculate 32 Samples by Matrixing
    // NOTE 考虑到性能，并不调用此函数，而是查表M_Mat
    // const M = (i, k) => { // def. @ p.67
    //     return Math.cos((2 * i + 1) * (k - 16) * Math.PI / 64); // for i = 0 to 31, and k = 0 to 63.
    // }
    let S = new Array(); // length = 32
    for (let i = 0; i < 32; i++) {
        let sum = 0;
        for (let k = 0; k < 64; k++) {
            sum += (M_Mat[i][k] /*M(i, k)*/ * Y[k]);
        }
        S[i] = sum;
    }
    // Output 32 Subband Samples
    return S;
}
// 输入：原始PCM序列；Granule（576点）起点index
// 输出：32个频带的时域序列，每个序列18点
function AnalysisSubbandFilter(PCMData, GranuleStartOffset) {
    // 滑动窗口，对一帧节进行分析子带滤波
    let Outputs = new Array(); // 此数组存储18个子带滤波结果，每个结果有32点
    for (let step = 1; step <= 18; step++) {
        let offset = GranuleStartOffset + 32 * step;
        let inputBuffer = new Array();
        // 倒序从原始序列读取512个采样，原始序列第一个采样之前的值以0填充
        for (let i = 0; i < 512; i++) {
            let dataIndex = offset - i;
            inputBuffer[i] = (dataIndex >= 0 && dataIndex < PCMData.length) ? PCMData[dataIndex] : 0;
        }
        // 滤波
        let output = BasicAnalysisSubbandFilter(inputBuffer);
        Outputs[step - 1] = output;
    }
    // 将结果转换为32个频带的结果
    let Subbands = new Array();
    for (let t = 0; t < Outputs.length; t++) {
        for (let band = 0; band < Outputs[t].length; band++) {
            if (Subbands[band] === undefined) {
                Subbands[band] = new Array();
            }
            Subbands[band][t] = Outputs[t][band];
            // NOTE 由于子带滤波器的输入缓冲区是反向的，因此需要对输出结果做处理。这个问题是在dist10源码中发现的。
            if ((band % 2 === 1) && (t % 2 === 1)) {
                Subbands[band][t] *= -1;
            }
        }
    }
    return Subbands;
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  huffman.js
//
//    哈夫曼编码。包含哈夫曼编码表、哈夫曼树和编解码相关函数。
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//
//  哈 夫 曼 编 码 表 （字典实现，容易编辑）
//
/////////////////////////////////////////////////////////////////
const HuffmanTableQuadruple = [
    // Table A
    ["1", "0101", "0100", "00101", "0110", "000101", "00100", "000100", "0111", "00011", "00110", "000000", "00111", "000010", "000011", "000001"],
    // Table B
    ["1111", "1110", "1101", "1100", "1011", "1010", "1001", "1000", "0111", "0110", "0101", "0100", "0011", "0010", "0001", "0000"]
];
// 与16~23共享
const HuffmanTable16 = {
    "0 0": "1", "0 1": "0101", "0 2": "001110", "0 3": "00101100", "0 4": "001001010", "0 5": "000111111", "0 6": "0001101110", "0 7": "0001011101",
    "0 8": "00010101100", "0 9": "00010010101", "0 10": "00010001010", "0 11": "000011110010", "0 12": "000011100001", "0 13": "000011000011", "0 14": "0000101111000", "0 15": "000010001",
    "1 0": "011", "1 1": "0100", "1 2": "001100", "1 3": "0010100", "1 4": "00100011", "1 5": "000111110", "1 6": "000110101", "1 7": "000101111",
    "1 8": "0001010011", "1 9": "0001001011", "1 10": "0001000100", "1 11": "00001110111", "1 12": "000011001001", "1 13": "00001101011", "1 14": "000011001111", "1 15": "00001001",
    "2 0": "001111", "2 1": "001101", "2 2": "0010111", "2 3": "00100110", "2 4": "001000011", "2 5": "000111010", "2 6": "0001100111", "2 7": "0001011010",
    "2 8": "00010100001", "2 9": "0001001000", "2 10": "00001111111", "2 11": "00001110101", "2 12": "00001101110", "2 13": "000011010001", "2 14": "000011001110", "2 15": "000010000",
    "3 0": "00101101", "3 1": "0010101", "3 2": "00100111", "3 3": "001000101", "3 4": "001000000", "3 5": "0001110010", "3 6": "0001100011", "3 7": "0001010111",
    "3 8": "00010011110", "3 9": "00010001100", "3 10": "000011111100", "3 11": "000011010100", "3 12": "000011000111", "3 13": "0000110000011", "3 14": "0000101101101", "3 15": "0000011010",
    "4 0": "001001011", "4 1": "00100100", "4 2": "001000100", "4 3": "001000001", "4 4": "0001110011", "4 5": "0001100101", "4 6": "00010110011", "4 7": "00010100100",
    "4 8": "00010011011", "4 9": "000100001000", "4 10": "000011110110", "4 11": "000011100010", "4 12": "0000110001011", "4 13": "0000101111110", "4 14": "0000101101010", "4 15": "000001001",
    "5 0": "001000010", "5 1": "00011110", "5 2": "000111011", "5 3": "000111000", "5 4": "0001100110", "5 5": "00010111001", "5 6": "00010101101", "5 7": "000100001001",
    "5 8": "00010001110", "5 9": "000011111101", "5 10": "000011101000", "5 11": "0000110010000", "5 12": "0000110000100", "5 13": "0000101111010", "5 14": "00000110111101", "5 15": "0000010000",
    "6 0": "0001101111", "6 1": "000110110", "6 2": "000110100", "6 3": "0001100100", "6 4": "00010111000", "6 5": "00010110010", "6 6": "00010100000", "6 7": "00010000101",
    "6 8": "000100000001", "6 9": "000011110100", "6 10": "000011100100", "6 11": "000011011001", "6 12": "0000110000001", "6 13": "0000101101110", "6 14": "00001011001011", "6 15": "0000001010",
    "7 0": "0001100010", "7 1": "000110000", "7 2": "0001011011", "7 3": "0001011000", "7 4": "00010100101", "7 5": "00010011101", "7 6": "00010010100", "7 7": "000100000101",
    "7 8": "000011111000", "7 9": "0000110010111", "7 10": "0000110001101", "7 11": "0000101110100", "7 12": "0000101111100", "7 13": "000001101111001", "7 14": "000001101110100", "7 15": "0000001000",
    "8 0": "0001010101", "8 1": "0001010100", "8 2": "0001010001", "8 3": "00010011111", "8 4": "00010011100", "8 5": "00010001111", "8 6": "000100000100", "8 7": "000011111001",
    "8 8": "0000110101011", "8 9": "0000110010001", "8 10": "0000110001000", "8 11": "0000101111111", "8 12": "00001011010111", "8 13": "00001011001001", "8 14": "00001011000100", "8 15": "0000000111",
    "9 0": "00010011010", "9 1": "0001001100", "9 2": "0001001001", "9 3": "00010001101", "9 4": "00010000011", "9 5": "000100000000", "9 6": "000011110101", "9 7": "0000110101010",
    "9 8": "0000110010110", "9 9": "0000110001010", "9 10": "0000110000000", "9 11": "00001011011111", "9 12": "0000101100111", "9 13": "00001011000110", "9 14": "0000101100000", "9 15": "00000001011",
    "10 0": "00010001011", "10 1": "00010000001", "10 2": "0001000011", "10 3": "00001111101", "10 4": "000011110111", "10 5": "000011101001", "10 6": "000011100101", "10 7": "000011011011",
    "10 8": "0000110001001", "10 9": "00001011100111", "10 10": "00001011100001", "10 11": "00001011010000", "10 12": "000001101110101", "10 13": "000001101110010", "10 14": "00000110110111", "10 15": "0000000100",
    "11 0": "000011110011", "11 1": "00001111000", "11 2": "00001110110", "11 3": "00001110011", "11 4": "000011100011", "11 5": "000011011111", "11 6": "0000110001100", "11 7": "00001011101010",
    "11 8": "00001011100110", "11 9": "00001011100000", "11 10": "00001011010001", "11 11": "00001011001000", "11 12": "00001011000010", "11 13": "0000011011111", "11 14": "00000110110100", "11 15": "00000000110",
    "12 0": "000011001010", "12 1": "000011100000", "12 2": "000011011110", "12 3": "000011011010", "12 4": "000011011000", "12 5": "0000110000101", "12 6": "0000110000010", "12 7": "0000101111101",
    "12 8": "0000101101100", "12 9": "000001101111000", "12 10": "00000110111011", "12 11": "00001011000011", "12 12": "00000110111000", "12 13": "00000110110101", "12 14": "0000011011000000", "12 15": "00000000100",
    "13 0": "00001011101011", "13 1": "000011010011", "13 2": "000011010010", "13 3": "000011010000", "13 4": "0000101110010", "13 5": "0000101111011", "13 6": "00001011011110", "13 7": "00001011010011",
    "13 8": "00001011001010", "13 9": "0000011011000111", "13 10": "000001101110011", "13 11": "000001101101101", "13 12": "000001101101100", "13 13": "00000110110000011", "13 14": "000001101100001", "13 15": "00000000010",
    "14 0": "0000101111001", "14 1": "0000101110001", "14 2": "00001100110", "14 3": "000010111011", "14 4": "00001011010110", "14 5": "00001011010010", "14 6": "0000101100110", "14 7": "00001011000111",
    "14 8": "00001011000101", "14 9": "000001101100010", "14 10": "0000011011000110", "14 11": "000001101100111", "14 12": "00000110110000010", "14 13": "000001101100110", "14 14": "00000110110010", "14 15": "00000000000",
    "15 0": "000001100", "15 1": "00001010", "15 2": "00000111", "15 3": "000001011", "15 4": "000001010", "15 5": "0000010001", "15 6": "0000001011", "15 7": "0000001001",
    "15 8": "00000001101", "15 9": "00000001100", "15 10": "00000001010", "15 11": "00000000111", "15 12": "00000000101", "15 13": "00000000011", "15 14": "00000000001", "15 15": "00000011"
};
const HuffmanTable24 = {
    "0 0": "1111", "0 1": "1101", "0 2": "101110", "0 3": "1010000", "0 4": "10010010", "0 5": "100000110", "0 6": "011111000", "0 7": "0110110010",
    "0 8": "0110101010", "0 9": "01010011101", "0 10": "01010001101", "0 11": "01010001001", "0 12": "01001101101", "0 13": "01000000101", "0 14": "010000001000", "0 15": "001011000",
    "1 0": "1110", "1 1": "1100", "1 2": "10101", "1 3": "100110", "1 4": "1000111", "1 5": "10000010", "1 6": "01111010", "1 7": "011011000",
    "1 8": "011010001", "1 9": "011000110", "1 10": "0101000111", "1 11": "0101011001", "1 12": "0100111111", "1 13": "0100101001", "1 14": "0100010111", "1 15": "00101010",
    "2 0": "101111", "2 1": "10110", "2 2": "101001", "2 3": "1001010", "2 4": "1000100", "2 5": "10000000", "2 6": "01111000", "2 7": "011011101",
    "2 8": "011001111", "2 9": "011000010", "2 10": "010110110", "2 11": "0101010100", "2 12": "0100111011", "2 13": "0100100111", "2 14": "01000011101", "2 15": "0010010",
    "3 0": "1010001", "3 1": "100111", "3 2": "1001011", "3 3": "1000110", "3 4": "10000110", "3 5": "01111101", "3 6": "01110100", "3 7": "011011100",
    "3 8": "011001100", "3 9": "010111110", "3 10": "010110010", "3 11": "0101000101", "3 12": "0100110111", "3 13": "0100100101", "3 14": "0100001111", "3 15": "0010000",
    "4 0": "10010011", "4 1": "1001000", "4 2": "1000101", "4 3": "10000111", "4 4": "01111111", "4 5": "01110110", "4 6": "01110000", "4 7": "011010010",
    "4 8": "011001000", "4 9": "010111100", "4 10": "0101100000", "4 11": "0101000011", "4 12": "0100110010", "4 13": "0100011101", "4 14": "01000011100", "4 15": "0001110",
    "5 0": "100000111", "5 1": "1000010", "5 2": "10000001", "5 3": "01111110", "5 4": "01110111", "5 5": "01110010", "5 6": "011010110", "5 7": "011001010",
    "5 8": "011000000", "5 9": "010110100", "5 10": "0101010101", "5 11": "0100111101", "5 12": "0100101101", "5 13": "0100011001", "5 14": "0100000110", "5 15": "0001100",
    "6 0": "011111001", "6 1": "01111011", "6 2": "01111001", "6 3": "01110101", "6 4": "01110001", "6 5": "011010111", "6 6": "011001110", "6 7": "011000011",
    "6 8": "010111001", "6 9": "0101011011", "6 10": "0101001010", "6 11": "0100110100", "6 12": "0100100011", "6 13": "0100010000", "6 14": "01000001000", "6 15": "0001010",
    "7 0": "0110110011", "7 1": "01110011", "7 2": "01101111", "7 3": "01101101", "7 4": "011010011", "7 5": "011001011", "7 6": "011000100", "7 7": "010111011",
    "7 8": "0101100001", "7 9": "0101001100", "7 10": "0100111001", "7 11": "0100101010", "7 12": "0100011011", "7 13": "01000010011", "7 14": "00101111101", "7 15": "00010001",
    "8 0": "0110101011", "8 1": "011010100", "8 2": "011010000", "8 3": "011001101", "8 4": "011001001", "8 5": "011000001", "8 6": "010111010", "8 7": "010110001",
    "8 8": "010101001", "8 9": "0101000000", "8 10": "0100101111", "8 11": "0100011110", "8 12": "0100001100", "8 13": "01000000010", "8 14": "00101111001", "8 15": "00010000",
    "9 0": "0101001111", "9 1": "011000111", "9 2": "011000101", "9 3": "010111111", "9 4": "010111101", "9 5": "010110101", "9 6": "010101110", "9 7": "0101001101",
    "9 8": "0101000001", "9 9": "0100110001", "9 10": "0100100001", "9 11": "0100010011", "9 12": "01000001001", "9 13": "00101111011", "9 14": "00101110011", "9 15": "00001011",
    "10 0": "01010011100", "10 1": "010111000", "10 2": "010110111", "10 3": "010110011", "10 4": "010101111", "10 5": "0101011000", "10 6": "0101001011", "10 7": "0100111010",
    "10 8": "0100110000", "10 9": "0100100010", "10 10": "0100010101", "10 11": "01000010010", "10 12": "00101111111", "10 13": "00101110101", "10 14": "00101101110", "10 15": "00001010",
    "11 0": "01010001100", "11 1": "0101011010", "11 2": "010101011", "11 3": "010101000", "11 4": "010100100", "11 5": "0100111110", "11 6": "0100110101", "11 7": "0100101011",
    "11 8": "0100011111", "11 9": "0100010100", "11 10": "0100000111", "11 11": "01000000001", "11 12": "00101110111", "11 13": "00101110000", "11 14": "00101101010", "11 15": "00000110",
    "12 0": "01010001000", "12 1": "0101000010", "12 2": "0100111100", "12 3": "0100111000", "12 4": "0100110011", "12 5": "0100101110", "12 6": "0100100100", "12 7": "0100011100",
    "12 8": "0100001101", "12 9": "0100000101", "12 10": "01000000000", "12 11": "00101111000", "12 12": "00101110010", "12 13": "00101101100", "12 14": "00101100111", "12 15": "00000100",
    "13 0": "01001101100", "13 1": "0100101100", "13 2": "0100101000", "13 3": "0100100110", "13 4": "0100100000", "13 5": "0100011010", "13 6": "0100010001", "13 7": "0100001010",
    "13 8": "01000000011", "13 9": "00101111100", "13 10": "00101110110", "13 11": "00101110001", "13 12": "00101101101", "13 13": "00101101001", "13 14": "00101100101", "13 15": "00000010",
    "14 0": "010000001001", "14 1": "0100011000", "14 2": "0100010110", "14 3": "0100010010", "14 4": "0100001011", "14 5": "0100001000", "14 6": "0100000011", "14 7": "00101111110",
    "14 8": "00101111010", "14 9": "00101110100", "14 10": "00101101111", "14 11": "00101101011", "14 12": "00101101000", "14 13": "00101100110", "14 14": "00101100100", "14 15": "00000000",
    "15 0": "00101011", "15 1": "0010100", "15 2": "0010011", "15 3": "0010001", "15 4": "0001111", "15 5": "0001101", "15 6": "0001011", "15 7": "0001001",
    "15 8": "0000111", "15 9": "0000110", "15 10": "0000100", "15 11": "00000111", "15 12": "00000101", "15 13": "00000011", "15 14": "00000001", "15 15": "0011"
};
const HuffmanTableDuple = [
    // Table 0
    {
        "maxvalue": 0,
        "linbits": 0,
        "table": {
            "0 0": ""
        }
    },
    // Table 1
    {
        "maxvalue": 1,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "001", "1 0": "01", "1 1": "000"
        }
    },
    // Table 2
    {
        "maxvalue": 2,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "010", "0 2": "000001", "1 0": "011", "1 1": "001", "1 2": "00001", "2 0": "00011", "2 1": "00010", "2 2": "000000"
        }
    },
    // Table 3
    {
        "maxvalue": 2,
        "linbits": 0,
        "table": {
            "0 0": "11", "0 1": "10", "0 2": "000001", "1 0": "001", "1 1": "01", "1 2": "00001", "2 0": "00011", "2 1": "00010", "2 2": "000000"
        }
    },
    // Table 4
    null,
    // Table 5
    {
        "maxvalue": 3,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "010", "0 2": "000110", "0 3": "0000101", "1 0": "011", "1 1": "001", "1 2": "000100", "1 3": "0000100", "2 0": "000111", "2 1": "000101", "2 2": "0000111", "2 3": "00000001", "3 0": "0000110", "3 1": "000001", "3 2": "0000001", "3 3": "00000000"
        }
    },
    // Table 6
    {
        "maxvalue": 3,
        "linbits": 0,
        "table": {
            "0 0": "111", "0 1": "011", "0 2": "00101", "0 3": "0000001", "1 0": "110", "1 1": "10", "1 2": "0011", "1 3": "00010", "2 0": "0101", "2 1": "0100", "2 2": "00100", "2 3": "000001", "3 0": "000011", "3 1": "00011", "3 2": "000010", "3 3": "0000000"
        }
    },
    // Table 7
    {
        "maxvalue": 5,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "010", "0 2": "001010", "0 3": "00010011", "0 4": "00010000", "0 5": "000001010", "1 0": "011", "1 1": "0011", "1 2": "000111", "1 3": "0001010", "1 4": "0000101", "1 5": "00000011", "2 0": "001011", "2 1": "00100", "2 2": "0001101", "2 3": "00010001", "2 4": "00001000", "2 5": "000000100", "3 0": "0001100", "3 1": "0001011", "3 2": "00010010", "3 3": "000001111", "3 4": "000001011", "3 5": "000000010", "4 0": "0000111", "4 1": "0000110", "4 2": "00001001", "4 3": "000001110", "4 4": "000000011", "4 5": "0000000001", "5 0": "00000110", "5 1": "00000100", "5 2": "000000101", "5 3": "0000000011", "5 4": "0000000010", "5 5": "0000000000"
        }
    },
    // Table 8
    {
        "maxvalue": 5,
        "linbits": 0,
        "table": {
            "0 0": "11", "0 1": "100", "0 2": "000110", "0 3": "00010010", "0 4": "00001100", "0 5": "000000101", "1 0": "101", "1 1": "01", "1 2": "0010", "1 3": "00010000", "1 4": "00001001", "1 5": "00000011", "2 0": "000111", "2 1": "0011", "2 2": "000101", "2 3": "00001110", "2 4": "00000111", "2 5": "000000011", "3 0": "00010011", "3 1": "00010001", "3 2": "00001111", "3 3": "000001101", "3 4": "000001010", "3 5": "0000000100", "4 0": "00001101", "4 1": "0000101", "4 2": "00001000", "4 3": "000001011", "4 4": "0000000101", "4 5": "0000000001", "5 0": "000001100", "5 1": "00000100", "5 2": "000000100", "5 3": "000000001", "5 4": "00000000001", "5 5": "00000000000"
        }
    },
    // Table 9
    {
        "maxvalue": 5,
        "linbits": 0,
        "table": {
            "0 0": "111", "0 1": "101", "0 2": "01001", "0 3": "001110", "0 4": "00001111", "0 5": "000000111", "1 0": "110", "1 1": "100", "1 2": "0101", "1 3": "00101", "1 4": "000110", "1 5": "00000111", "2 0": "0111", "2 1": "0110", "2 2": "01000", "2 3": "001000", "2 4": "0001000", "2 5": "00000101", "3 0": "001111", "3 1": "00110", "3 2": "001001", "3 3": "0001010", "3 4": "0000101", "3 5": "00000001", "4 0": "0001011", "4 1": "000111", "4 2": "0001001", "4 3": "0000110", "4 4": "00000100", "4 5": "000000001", "5 0": "00001110", "5 1": "0000100", "5 2": "00000110", "5 3": "00000010", "5 4": "000000110", "5 5": "000000000"
        }
    },
    // Table 10
    {
        "maxvalue": 7,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "010", "0 2": "001010", "0 3": "00010111", "0 4": "000100011", "0 5": "000011110", "0 6": "000001100", "0 7": "0000010001",
            "1 0": "011", "1 1": "0011", "1 2": "001000", "1 3": "0001100", "1 4": "00010010", "1 5": "000010101", "1 6": "00001100", "1 7": "00000111",
            "2 0": "001011", "2 1": "001001", "2 2": "0001111", "2 3": "00010101", "2 4": "000100000", "2 5": "0000101000", "2 6": "000010011", "2 7": "000000110",
            "3 0": "0001110", "3 1": "0001101", "3 2": "00010110", "3 3": "000100010", "3 4": "0000101110", "3 5": "0000010111", "3 6": "000010010", "3 7": "0000000111",
            "4 0": "00010100", "4 1": "00010011", "4 2": "000100001", "4 3": "0000101111", "4 4": "0000011011", "4 5": "0000010110", "4 6": "0000001001", "4 7": "0000000011",
            "5 0": "000011111", "5 1": "000010110", "5 2": "0000101001", "5 3": "0000011010", "5 4": "00000010101", "5 5": "00000010100", "5 6": "0000000101", "5 7": "00000000011",
            "6 0": "00001110", "6 1": "00001101", "6 2": "000001010", "6 3": "0000001011", "6 4": "0000010000", "6 5": "0000000110", "6 6": "00000000101", "6 7": "00000000001",
            "7 0": "000001001", "7 1": "00001000", "7 2": "000000111", "7 3": "0000001000", "7 4": "0000000100", "7 5": "00000000100", "7 6": "00000000010", "7 7": "00000000000"
        }
    },
    // Table 11
    {
        "maxvalue": 7,
        "linbits": 0,
        "table": {
            "0 0": "11", "0 1": "100", "0 2": "01010", "0 3": "0011000", "0 4": "00100010", "0 5": "000100001", "0 6": "00010101", "0 7": "000001111",
            "1 0": "101", "1 1": "011", "1 2": "0100", "1 3": "001010", "1 4": "00100000", "1 5": "00010001", "1 6": "0001011", "1 7": "00001010",
            "2 0": "01011", "2 1": "00111", "2 2": "001101", "2 3": "0010010", "2 4": "00011110", "2 5": "000011111", "2 6": "00010100", "2 7": "00000101",
            "3 0": "0011001", "3 1": "001011", "3 2": "0010011", "3 3": "000111011", "3 4": "00011011", "3 5": "0000010010", "3 6": "00001100", "3 7": "000000101",
            "4 0": "00100011", "4 1": "00100001", "4 2": "00011111", "4 3": "000111010", "4 4": "000011110", "4 5": "0000010000", "4 6": "000000111", "4 7": "0000000101",
            "5 0": "00011100", "5 1": "00011010", "5 2": "000100000", "5 3": "0000010011", "5 4": "0000010001", "5 5": "00000001111", "5 6": "0000001000", "5 7": "00000001110",
            "6 0": "00001110", "6 1": "0001100", "6 2": "0001001", "6 3": "00001101", "6 4": "000001110", "6 5": "0000001001", "6 6": "0000000100", "6 7": "0000000001",
            "7 0": "00001011", "7 1": "0000100", "7 2": "00000110", "7 3": "000000110", "7 4": "0000000110", "7 5": "0000000011", "7 6": "0000000010", "7 7": "0000000000"
        }
    },
    // Table 12
    {
        "maxvalue": 7,
        "linbits": 0,
        "table": {
            "0 0": "1001", "0 1": "110", "0 2": "10000", "0 3": "0100001", "0 4": "00101001", "0 5": "000100111", "0 6": "000100110", "0 7": "000011010",
            "1 0": "111", "1 1": "101", "1 2": "0110", "1 3": "01001", "1 4": "0010111", "1 5": "0010000", "1 6": "00011010", "1 7": "00001011",
            "2 0": "10001", "2 1": "0111", "2 2": "01011", "2 3": "001110", "2 4": "0010101", "2 5": "00011110", "2 6": "0001010", "2 7": "00000111",
            "3 0": "010001", "3 1": "01010", "3 2": "001111", "3 3": "001100", "3 4": "0010010", "3 5": "00011100", "3 6": "00001110", "3 7": "00000101",
            "4 0": "0100000", "4 1": "001101", "4 2": "0010110", "4 3": "0010011", "4 4": "00010010", "4 5": "00010000", "4 6": "00001001", "4 7": "000000101",
            "5 0": "00101000", "5 1": "0010001", "5 2": "00011111", "5 3": "00011101", "5 4": "00010001", "5 5": "000001101", "5 6": "00000100", "5 7": "000000010",
            "6 0": "00011011", "6 1": "0001100", "6 2": "0001011", "6 3": "00001111", "6 4": "00001010", "6 5": "000000111", "6 6": "000000100", "6 7": "0000000001",
            "7 0": "000011011", "7 1": "00001100", "7 2": "00001000", "7 3": "000001100", "7 4": "000000110", "7 5": "000000011", "7 6": "000000001", "7 7": "0000000000"
        }
    },
    // Table 13
    {
        "maxvalue": 15,
        "linbits": 0,
        "table": {
            "0 0": "1", "0 1": "0101", "0 2": "001110", "0 3": "0010101", "0 4": "00100010", "0 5": "000110011", "0 6": "000101110", "0 7": "0001000111",
            "0 8": "000101010", "0 9": "0000110100", "0 10": "00001000100", "0 11": "00000110100", "0 12": "000001000011", "0 13": "000000101100", "0 14": "0000000101011", "0 15": "0000000010011",
            "1 0": "011", "1 1": "0100", "1 2": "001100", "1 3": "0010011", "1 4": "00011111", "1 5": "00011010", "1 6": "000101100", "1 7": "000100001",
            "1 8": "000011111", "1 9": "000011000", "1 10": "0000100000", "1 11": "0000011000", "1 12": "00000011111", "1 13": "000000100011", "1 14": "000000010110", "1 15": "000000001110",
            "2 0": "001111", "2 1": "001101", "2 2": "0010111", "2 3": "00100100", "2 4": "000111011", "2 5": "000110001", "2 6": "0001001101", "2 7": "0001000001",
            "2 8": "000011101", "2 9": "0000101000", "2 10": "0000011110", "2 11": "00000101000", "2 12": "00000011011", "2 13": "000000100001", "2 14": "0000000101010", "2 15": "0000000010000",
            "3 0": "0010110", "3 1": "0010100", "3 2": "00100101", "3 3": "000111101", "3 4": "000111000", "3 5": "0001001111", "3 6": "0001001001", "3 7": "0001000000",
            "3 8": "0000101011", "3 9": "00001001100", "3 10": "00000111000", "3 11": "00000100101", "3 12": "00000011010", "3 13": "000000011111", "3 14": "0000000011001", "3 15": "0000000001110",
            "4 0": "00100011", "4 1": "0010000", "4 2": "000111100", "4 3": "000111001", "4 4": "0001100001", "4 5": "0001001011", "4 6": "00001110010", "4 7": "00001011011",
            "4 8": "0000110110", "4 9": "00001001001", "4 10": "00000110111", "4 11": "000000101001", "4 12": "000000110000", "4 13": "0000000110101", "4 14": "0000000010111", "4 15": "00000000011000",
            "5 0": "000111010", "5 1": "00011011", "5 2": "000110010", "5 3": "0001100000", "5 4": "0001001100", "5 5": "0001000110", "5 6": "00001011101", "5 7": "00001010100",
            "5 8": "00001001101", "5 9": "00000111010", "5 10": "000001001111", "5 11": "00000011101", "5 12": "0000001001010", "5 13": "0000000110001", "5 14": "00000000101001", "5 15": "00000000010001",
            "6 0": "000101111", "6 1": "000101101", "6 2": "0001001110", "6 3": "0001001010", "6 4": "00001110011", "6 5": "00001011110", "6 6": "00001011010", "6 7": "00001001111",
            "6 8": "00001000101", "6 9": "000001010011", "6 10": "000001000111", "6 11": "000000110010", "6 12": "0000000111011", "6 13": "0000000100110", "6 14": "00000000100100", "6 15": "00000000001111",
            "7 0": "0001001000", "7 1": "000100010", "7 2": "0000111000", "7 3": "00001011111", "7 4": "00001011100", "7 5": "00001010101", "7 6": "000001011011", "7 7": "000001011010",
            "7 8": "000001010110", "7 9": "000001001001", "7 10": "0000001001101", "7 11": "0000001000001", "7 12": "0000000110011", "7 13": "00000000101100", "7 14": "0000000000101011", "7 15": "0000000000101010",
            "8 0": "000101011", "8 1": "00010100", "8 2": "000011110", "8 3": "0000101100", "8 4": "0000110111", "8 5": "00001001110", "8 6": "00001001000", "8 7": "000001010111",
            "8 8": "000001001110", "8 9": "000000111101", "8 10": "000000101110", "8 11": "0000000110110", "8 12": "0000000100101", "8 13": "00000000011110", "8 14": "000000000010100", "8 15": "000000000010000",
            "9 0": "0000110101", "9 1": "000011001", "9 2": "0000101001", "9 3": "0000100101", "9 4": "00000101100", "9 5": "00000111011", "9 6": "00000110110", "9 7": "0000001010001",
            "9 8": "000001000010", "9 9": "0000001001100", "9 10": "0000000111001", "9 11": "00000000110110", "9 12": "00000000100101", "9 13": "00000000010010", "9 14": "0000000000100111", "9 15": "000000000001011",
            "10 0": "0000100011", "10 1": "0000100001", "10 2": "0000011111", "10 3": "00000111001", "10 4": "00000101010", "10 5": "000001010010", "10 6": "000001001000", "10 7": "0000001010000",
            "10 8": "000000101111", "10 9": "0000000111010", "10 10": "00000000110111", "10 11": "0000000010101", "10 12": "00000000010110", "10 13": "000000000011010", "10 14": "0000000000100110", "10 15": "00000000000010110",
            "11 0": "00000110101", "11 1": "0000011001", "11 2": "0000010111", "11 3": "00000100110", "11 4": "000001000110", "11 5": "000000111100", "11 6": "000000110011", "11 7": "000000100100",
            "11 8": "0000000110111", "11 9": "0000000011010", "11 10": "0000000100010", "11 11": "00000000010111", "11 12": "000000000011011", "11 13": "000000000001110", "11 14": "000000000001001", "11 15": "0000000000000111",
            "12 0": "00000100010", "12 1": "00000100000", "12 2": "00000011100", "12 3": "000000100111", "12 4": "000000110001", "12 5": "0000001001011", "12 6": "000000011110", "12 7": "0000000110100",
            "12 8": "00000000110000", "12 9": "00000000101000", "12 10": "000000000110100", "12 11": "000000000011100", "12 12": "000000000010010", "12 13": "0000000000010001", "12 14": "0000000000001001", "12 15": "0000000000000101",
            "13 0": "000000101101", "13 1": "00000010101", "13 2": "000000100010", "13 3": "0000001000000", "13 4": "0000000111000", "13 5": "0000000110010", "13 6": "00000000110001", "13 7": "00000000101101",
            "13 8": "00000000011111", "13 9": "00000000010011", "13 10": "00000000001100", "13 11": "000000000001111", "13 12": "0000000000001010", "13 13": "000000000000111", "13 14": "0000000000000110", "13 15": "0000000000000011",
            "14 0": "0000000110000", "14 1": "000000010111", "14 2": "000000010100", "14 3": "0000000100111", "14 4": "0000000100100", "14 5": "0000000100011", "14 6": "000000000110101", "14 7": "00000000010101",
            "14 8": "00000000010000", "14 9": "00000000000010111", "14 10": "000000000001101", "14 11": "000000000001010", "14 12": "000000000000110", "14 13": "00000000000000001", "14 14": "0000000000000100", "14 15": "0000000000000010",
            "15 0": "000000010000", "15 1": "000000001111", "15 2": "0000000010001", "15 3": "00000000011011", "15 4": "00000000011001", "15 5": "00000000010100", "15 6": "000000000011101", "15 7": "00000000001011",
            "15 8": "000000000010001", "15 9": "000000000001100", "15 10": "0000000000010000", "15 11": "0000000000001000", "15 12": "0000000000000000001", "15 13": "000000000000000001", "15 14": "0000000000000000000", "15 15": "0000000000000001"
        }
    },
    // Table 14
    null,
    // Table 15
    {
        "maxvalue": 15,
        "linbits": 0,
        "table": {
            "0 0": "111", "0 1": "1100", "0 2": "10010", "0 3": "0110101", "0 4": "0101111", "0 5": "01001100", "0 6": "001111100", "0 7": "001101100",
            "0 8": "001011001", "0 9": "0001111011", "0 10": "0001101100", "0 11": "00001110111", "0 12": "00001101011", "0 13": "00001010001", "0 14": "000001111010", "0 15": "0000000111111",
            "1 0": "1101", "1 1": "101", "1 2": "10000", "1 3": "011011", "1 4": "0101110", "1 5": "0100100", "1 6": "00111101", "1 7": "00110011",
            "1 8": "00101010", "1 9": "001000110", "1 10": "000110100", "1 11": "0001010011", "1 12": "0001000001", "1 13": "0000101001", "1 14": "00000111011", "1 15": "00000100100",
            "2 0": "10011", "2 1": "10001", "2 2": "01111", "2 3": "011000", "2 4": "0101001", "2 5": "0100010", "2 6": "00111011", "2 7": "00110000",
            "2 8": "00101000", "2 9": "001000000", "2 10": "000110010", "2 11": "0001001110", "2 12": "0000111110", "2 13": "00001010000", "2 14": "00000111000", "2 15": "00000100001",
            "3 0": "011101", "3 1": "011100", "3 2": "011001", "3 3": "0101011", "3 4": "0100111", "3 5": "00111111", "3 6": "00110111", "3 7": "001011101",
            "3 8": "001001100", "3 9": "000111011", "3 10": "0001011101", "3 11": "0001001000", "3 12": "0000110110", "3 13": "00001001011", "3 14": "00000110010", "3 15": "00000011101",
            "4 0": "0110100", "4 1": "010110", "4 2": "0101010", "4 3": "0101000", "4 4": "01000011", "4 5": "00111001", "4 6": "001011111", "4 7": "001001111",
            "4 8": "001001000", "4 9": "000111001", "4 10": "0001011001", "4 11": "0001000101", "4 12": "0000110001", "4 13": "00001000010", "4 14": "00000101110", "4 15": "00000011011",
            "5 0": "01001101", "5 1": "0100101", "5 2": "0100011", "5 3": "01000010", "5 4": "00111010", "5 5": "00110100", "5 6": "001011011", "5 7": "001001010",
            "5 8": "000111110", "5 9": "000110000", "5 10": "0001001111", "5 11": "0000111111", "5 12": "00001011010", "5 13": "00000111110", "5 14": "00000101000", "5 15": "000000100110",
            "6 0": "001111101", "6 1": "0100000", "6 2": "00111100", "6 3": "00111000", "6 4": "00110010", "6 5": "001011100", "6 6": "001001110", "6 7": "001000001",
            "6 8": "000110111", "6 9": "0001010111", "6 10": "0001000111", "6 11": "0000110011", "6 12": "00001001001", "6 13": "00000110011", "6 14": "000001000110", "6 15": "000000011110",
            "7 0": "001101101", "7 1": "00110101", "7 2": "00110001", "7 3": "001011110", "7 4": "001011000", "7 5": "001001011", "7 6": "001000010", "7 7": "0001111010",
            "7 8": "0001011011", "7 9": "0001001001", "7 10": "0000111000", "7 11": "0000101010", "7 12": "00001000000", "7 13": "00000101100", "7 14": "00000010101", "7 15": "000000011001",
            "8 0": "001011010", "8 1": "00101011", "8 2": "00101001", "8 3": "001001101", "8 4": "001001001", "8 5": "000111111", "8 6": "000111000", "8 7": "0001011100",
            "8 8": "0001001101", "8 9": "0001000010", "8 10": "0000101111", "8 11": "00001000011", "8 12": "00000110000", "8 13": "000000110101", "8 14": "000000100100", "8 15": "000000010100",
            "9 0": "001000111", "9 1": "00100010", "9 2": "001000011", "9 3": "000111100", "9 4": "000111010", "9 5": "000110001", "9 6": "0001011000", "9 7": "0001001100",
            "9 8": "0001000011", "9 9": "00001101010", "9 10": "00001000111", "9 11": "00000110110", "9 12": "00000100110", "9 13": "000000100111", "9 14": "000000010111", "9 15": "000000001111",
            "10 0": "0001101101", "10 1": "000110101", "10 2": "000110011", "10 3": "000101111", "10 4": "0001011010", "10 5": "0001010010", "10 6": "0000111010", "10 7": "0000111001",
            "10 8": "0000110000", "10 9": "00001001000", "10 10": "00000111001", "10 11": "00000101001", "10 12": "00000010111", "10 13": "000000011011", "10 14": "0000000111110", "10 15": "000000001001",
            "11 0": "0001010110", "11 1": "000101010", "11 2": "000101000", "11 3": "000100101", "11 4": "0001000110", "11 5": "0001000000", "11 6": "0000110100", "11 7": "0000101011",
            "11 8": "00001000110", "11 9": "00000110111", "11 10": "00000101010", "11 11": "00000011001", "11 12": "000000011101", "11 13": "000000010010", "11 14": "000000001011", "11 15": "0000000001011",
            "12 0": "00001110110", "12 1": "0001000100", "12 2": "000011110", "12 3": "0000110111", "12 4": "0000110010", "12 5": "0000101110", "12 6": "00001001010", "12 7": "00001000001",
            "12 8": "00000110001", "12 9": "00000100111", "12 10": "00000011000", "12 11": "00000010000", "12 12": "000000010110", "12 13": "000000001101", "12 14": "0000000001110", "12 15": "0000000000111",
            "13 0": "00001011011", "13 1": "0000101100", "13 2": "0000100111", "13 3": "0000100110", "13 4": "0000100010", "13 5": "00000111111", "13 6": "00000110100", "13 7": "00000101101",
            "13 8": "00000011111", "13 9": "000000110100", "13 10": "000000011100", "13 11": "000000010011", "13 12": "000000001110", "13 13": "000000001000", "13 14": "0000000001001", "13 15": "0000000000011",
            "14 0": "000001111011", "14 1": "00000111100", "14 2": "00000111010", "14 3": "00000110101", "14 4": "00000101111", "14 5": "00000101011", "14 6": "00000100000", "14 7": "00000010110",
            "14 8": "000000100101", "14 9": "000000011000", "14 10": "000000010001", "14 11": "000000001100", "14 12": "0000000001111", "14 13": "0000000001010", "14 14": "000000000010", "14 15": "0000000000001",
            "15 0": "000001000111", "15 1": "00000100101", "15 2": "00000100010", "15 3": "00000011110", "15 4": "00000011100", "15 5": "00000010100", "15 6": "00000010001", "15 7": "000000011010",
            "15 8": "000000010101", "15 9": "000000010000", "15 10": "000000001010", "15 11": "000000000110", "15 12": "0000000001000", "15 13": "0000000000110", "15 14": "0000000000010", "15 15": "0000000000000"
        }
    },
    // Table 16
    {
        "maxvalue": 16,
        "linbits": 1,
        "table": HuffmanTable16
    },
    // Table 17
    {
        "maxvalue": 18,
        "linbits": 2,
        "table": HuffmanTable16
    },
    // Table 18
    {
        "maxvalue": 22,
        "linbits": 3,
        "table": HuffmanTable16
    },
    // Table 19
    {
        "maxvalue": 30,
        "linbits": 4,
        "table": HuffmanTable16
    },
    // Table 20
    {
        "maxvalue": 78,
        "linbits": 6,
        "table": HuffmanTable16
    },
    // Table 21
    {
        "maxvalue": 270,
        "linbits": 8,
        "table": HuffmanTable16
    },
    // Table 22
    {
        "maxvalue": 1038,
        "linbits": 10,
        "table": HuffmanTable16
    },
    // Table 23
    {
        "maxvalue": 8206,
        "linbits": 13,
        "table": HuffmanTable16
    },
    // Table 24
    {
        "maxvalue": 30,
        "linbits": 4,
        "table": HuffmanTable24
    },
    // Table 25
    {
        "maxvalue": 46,
        "linbits": 5,
        "table": HuffmanTable24
    },
    // Table 26
    {
        "maxvalue": 78,
        "linbits": 6,
        "table": HuffmanTable24
    },
    // Table 27
    {
        "maxvalue": 142,
        "linbits": 7,
        "table": HuffmanTable24
    },
    // Table 28
    {
        "maxvalue": 270,
        "linbits": 8,
        "table": HuffmanTable24
    },
    // Table 29
    {
        "maxvalue": 526,
        "linbits": 9,
        "table": HuffmanTable24
    },
    // Table 30
    {
        "maxvalue": 2062,
        "linbits": 11,
        "table": HuffmanTable24
    },
    // Table 31
    {
        "maxvalue": 8206,
        "linbits": 13,
        "table": HuffmanTable24
    }
];
/**
 * 注：可用以下代码格式化
 *
const str = `
0 0 1 1
0 1 3 010
0 2 6 000001
1 0 3 011
1 1 3 001
1 2 5 00001
...
`;
let buffer = new Array();
let lines = str.split("\n");

let prevX = 0;
for(let i = 0; i < lines.length; i++) {
    let line = lines[i].trim();
    if(line.length <= 0) continue;
    let fields = line.split(/\s+/gi);
    let crlf = (fields[1] === "15" || fields[1] === "7") ? "\n" : " ";
    let newline = `"${fields[0]} ${fields[1]}": "${fields[3]}",${crlf}`;
    buffer.push(newline);
}
LOG(buffer.join(""));
 */
/////////////////////////////////////////////////////////////////
//
//   哈 夫 曼 树 及 其 初 始 化 函 数
//
/////////////////////////////////////////////////////////////////
function HuffmanTree() {
    this.isEnd = false;
    this.nexts = new Array();
    return this;
}
HuffmanTree.prototype.AddCode = function (bincode, key) {
    let currentTree = this;
    for (let i = 0; i < bincode.length; i++) {
        let currentBit = (bincode[i] === "0") ? 0 : 1;
        let nextTree = currentTree.nexts[currentBit];
        if (!nextTree) {
            nextTree = new HuffmanTree();
            currentTree.nexts[currentBit] = nextTree;
        }
        currentTree = nextTree;
        if (i === bincode.length - 1) {
            currentTree.key = key;
            currentTree.isEnd = true;
        }
    }
    return this;
};
HuffmanTree.prototype.Decode = function (str) {
    let currentTree = this;
    for (let i = 0; i < str.length; i++) {
        let bit = (str[i] === "0") ? 0 : 1;
        currentTree = currentTree.nexts[bit];
        if (currentTree.isEnd === true) {
            return {
                key: currentTree.key,
                runlength: i + 1
            };
        }
    }
    return null;
};
// 初始化哈夫曼树
function HuffmanTreeInit() {
    let HuffmanTreeDuple = new Array();
    let HuffmanTreeQuadruple = new Array();
    // 大值表
    for (let i = 0; i < HuffmanTableDuple.length; i++) {
        if (HuffmanTableDuple[i] === null)
            continue;
        let htree = new HuffmanTree();
        let htable = HuffmanTableDuple[i].table;
        for (let key in htable) {
            let hcode = htable[key];
            htree.AddCode(hcode, key);
        }
        HuffmanTreeDuple[i] = htree;
    }
    // 小值表
    let htree0 = new HuffmanTree();
    let htree1 = new HuffmanTree();
    for (let i = 0; i < 16; i++) {
        let key = BinaryString(i, 4).split("").join(" ");
        let hcode0 = HuffmanTableQuadruple[0][i];
        let hcode1 = HuffmanTableQuadruple[1][i];
        htree0.AddCode(hcode0, key);
        htree1.AddCode(hcode1, key);
    }
    HuffmanTreeQuadruple[0] = htree0;
    HuffmanTreeQuadruple[1] = htree1;
    return {
        HuffmanTreeQuadruple: HuffmanTreeQuadruple,
        HuffmanTreeDuple: HuffmanTreeDuple
    };
}
// 使用选定的哈夫曼树解码字符串（仅匹配前缀）
function DecodePrefix(str, htree) {
    let hresult = htree.Decode(str);
    let key = hresult.key.split(" ");
    if (key.length === 2) {
        return {
            runlength: hresult.runlength,
            x: parseInt(key[0]),
            y: parseInt(key[1])
        };
    }
    else if (key.length === 4) {
        return {
            runlength: hresult.runlength,
            v: parseInt(key[0]),
            w: parseInt(key[1]),
            x: parseInt(key[2]),
            y: parseInt(key[3])
        };
    }
}
// 使用指定的小值哈夫曼表（0/1），对小值四元组进行编码
function EncodeQuadruple(v, w, x, y, tableSelect) {
    let key = (Math.abs(v) << 3) + (Math.abs(w) << 2) + (Math.abs(x) << 1) + (Math.abs(y) << 0);
    let hcode = HuffmanTableQuadruple[tableSelect][key];
    return hcode;
}
// 使用指定的大值哈夫曼表，对大值二元组进行编码，并返回相应的linbitsX、linbitsY
function EncodeDuple(x, y, tableSelect) {
    x = Math.abs(x);
    y = Math.abs(y);
    let huffmanTableObject = HuffmanTableDuple[tableSelect]; // TODO 码表存在性检查
    let linbits = huffmanTableObject.linbits;
    let linbitsX = null;
    let linbitsY = null;
    if (x >= 15) {
        linbitsX = BinaryString(x - 15, linbits);
        x = 15;
    }
    if (y >= 15) {
        linbitsY = BinaryString(y - 15, linbits);
        y = 15;
    }
    let hcode = (huffmanTableObject.table)[16 * x + y];
    return {
        "huffmanCode": hcode,
        "linbits": linbits,
        "linbitsX": linbitsX,
        "linbitsY": linbitsY
    };
}
// 576点量化频谱分区：一般分为大值区（bigvalues）、小值区（smallvalues）和零值区（zeros）
function PartitionQuantizedSpectrum(spect576, blockType) {
    let rzero = 0;
    let big_values = 0;
    let count1 = 0;
    if (blockType === WINDOW_SHORT) {
        big_values = 288;
        count1 = 0;
    }
    else {
        let i;
        for (i = 576; i > 1; i -= 2) {
            if ((spect576[i - 1] === 0) && (spect576[i - 2] === 0)) {
                rzero++;
            }
            else
                break;
        }
        count1 = 0;
        for (; i > 3; i -= 4) {
            if (Math.abs(spect576[i - 1]) <= 1 &&
                Math.abs(spect576[i - 2]) <= 1 &&
                Math.abs(spect576[i - 3]) <= 1 &&
                Math.abs(spect576[i - 4]) <= 1) {
                count1++;
            }
            else
                break;
        }
        big_values = i / 2;
    }
    return {
        "bigvalues": [0, big_values * 2],
        "smallvalues": [big_values * 2, count1 * 4 + big_values * 2],
        "zeros": [count1 * 4 + big_values * 2, spect576.length]
    };
}
// 对量化频谱作哈夫曼编码
function HuffmanEncode(qspectrum576, blockType) {
    let Bigvalues = -1, BigvalueTableSelect = new Array(), Region0Count = -1, Region1Count = -1, SmallvalueTableSelect = 0;
    // 首先检查最大值是否超过 8191+15=8206，如果超过，则返回null
    for (let i = 0; i < qspectrum576.length; i++) {
        if (Math.abs(qspectrum576[i]) > 8206)
            return null;
    }
    // 对量化后的频谱分区
    let partition = PartitionQuantizedSpectrum(qspectrum576, blockType);
    let BigvaluesPartition = partition.bigvalues;
    let SmallvaluesPartition = partition.smallvalues;
    Bigvalues = (BigvaluesPartition[1] - BigvaluesPartition[0]) / 2;
    let BigvaluesCodeString = "", SmallvaluesCodeString = "";
    // 处理大值区
    // 以尺度因子频带（scalefactor bands，SFB）划分子区间（region）：按照C.1.5.4.4.6的推荐，选择大值区内的前三分之一SFB、后四分之一SFB为分割点，并保证分割点跟SFB的分割点对齐（即region划分不能跨过SFB）。（详见p27）
    // 保存分割点信息到region0_count和region1_count，具体是子区间0和1所包含的SFB数量减一。
    // 注意：对于短块部分（即非混合块模式的全部短块，以及混合块模式下高频方向的短块部分），这两个数量应相应地乘以3。详见p27。
    if (BigvaluesPartition[1] > 0) {
        let region01 = 0, region12 = 0;
        let LastSFBIndexOfBigvalues = -1;
        let BigvaluesEndIndex = BigvaluesPartition[1] - 1;
        // 普通块（长块）
        if (blockType === WINDOW_NORMAL) {
            let SFBands = ScaleFactorBands[SAMPLE_RATE][LONG_BLOCK];
            // 确定大值区的尺度因子频带数目，计算分割点
            for (let sfb = 0; sfb < SFBands.length; sfb++) {
                let sfbPartition = SFBands[sfb];
                // 因最后一个SFB并未延伸到频谱末端，所以应将其延伸到频谱末端
                if (sfb === SFBands.length - 1)
                    sfbPartition = [sfbPartition[0], qspectrum576.length - 1];
                if (BigvaluesEndIndex > 0 && BigvaluesEndIndex >= sfbPartition[0] && BigvaluesEndIndex <= sfbPartition[1]) {
                    LastSFBIndexOfBigvalues = sfb;
                    break;
                }
            }
            // 计算各个region的SFB数量
            let SFBNumberInBigvalues = LastSFBIndexOfBigvalues + 1;
            let Region0_SFBNum = Math.round(SFBNumberInBigvalues / 3); // 注意：作为sideinfo的值应减1
            let Region1_SFBNum = SFBNumberInBigvalues - Math.round(SFBNumberInBigvalues / 4) - Region0_SFBNum;
            let Region2_SFBNum = SFBNumberInBigvalues - Region0_SFBNum - Region1_SFBNum;
            // 计算SFB边界与region0/1_count
            if (Region1_SFBNum <= 0) {
                Region1_SFBNum = Region2_SFBNum;
                Region2_SFBNum = 0;
            }
            // 由于sideInfo中Region0/1Count长度为4bit/3bit，因此需要限幅
            Region0_SFBNum = (Region0_SFBNum > 16) ? 16 : Region0_SFBNum;
            Region1_SFBNum = (Region1_SFBNum > 8) ? 8 : Region1_SFBNum;
            Region0Count = Region0_SFBNum - 1;
            Region1Count = Region1_SFBNum - 1;
            region01 = SFBands[Region0_SFBNum][0]; // Region 1 的起点
            region12 = SFBands[Region0_SFBNum + Region1_SFBNum][0]; // Region 2 的起点
        }
        // 起始块（长块）、结束块（长块）、短块（仅支持非混合的）
        else {
            /**
             * 短窗、起始窗、结束窗情况下，以下两个值为标准规定，实际上并不会被编码到边信息中 @reference p26
             * 目前暂时不实现混合块
             */
            if (blockType === WINDOW_SHORT) {
                Region0Count = 8;
            }
            else if (blockType === WINDOW_START || blockType === WINDOW_STOP) {
                Region0Count = 7;
            }
            Region1Count = 36;
            let SFBands = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK];
            for (let sfb = 0; sfb < 3; sfb++) { // NOTE 因为Region0Count=8，意味着有(8+1)/3=3个SFB
                let sfbPartition = SFBands[sfb];
                region01 += (sfbPartition[1] - sfbPartition[0] + 1) * 3;
            }
            // 短块没有region2，因此region12就是大值区的右边界
            region12 = BigvaluesPartition[1];
        }
        // 计算每个region的最大值，选取不同的Huffman编码表，保留码表编号到table_select
        let MaxValue0 = -1, MaxValue1 = -1, MaxValue2 = -1;
        for (let i = 0; i < region01; i++) {
            if (Math.abs(qspectrum576[i]) > MaxValue0) {
                MaxValue0 = Math.abs(qspectrum576[i]);
            }
        }
        for (let i = region01; i < region12; i++) {
            if (Math.abs(qspectrum576[i]) > MaxValue1) {
                MaxValue1 = Math.abs(qspectrum576[i]);
            }
        }
        for (let i = region12; i < BigvaluesPartition[1]; i++) {
            if (Math.abs(qspectrum576[i]) > MaxValue2) {
                MaxValue2 = Math.abs(qspectrum576[i]);
            }
        }
        let tableSelect0 = -1, tableSelect1 = -1, tableSelect2 = -1;
        for (let i = 0; i < HuffmanTableDuple.length; i++) {
            let htable = HuffmanTableDuple[i];
            if (htable === null)
                continue;
            let huffmanTableMaxValue = htable.maxvalue;
            if (tableSelect0 < 0 && MaxValue0 <= huffmanTableMaxValue) {
                tableSelect0 = i;
            }
            if (tableSelect1 < 0 && MaxValue1 <= huffmanTableMaxValue) {
                tableSelect1 = i;
            }
            if (tableSelect2 < 0 && MaxValue2 <= huffmanTableMaxValue) {
                tableSelect2 = i;
            }
            // 如果所有的表格都已确定，则终止循环
            if (tableSelect0 >= 0 && tableSelect1 >= 0 && tableSelect2 >= 0)
                break;
        }
        BigvalueTableSelect[0] = tableSelect0;
        BigvalueTableSelect[1] = tableSelect1;
        BigvalueTableSelect[2] = tableSelect2;
        // 按照格式对大值区进行编码
        let codeString0 = "", codeString1 = "", codeString2 = "";
        for (let i = 0; i < region01; i += 2) {
            let x = qspectrum576[i], y = qspectrum576[i + 1];
            let huffman = EncodeDuple(x, y, tableSelect0);
            codeString0 += String(huffman.huffmanCode);
            if (huffman.linbitsX !== null) {
                codeString0 += String(huffman.linbitsX);
            }
            if (x !== 0) {
                codeString0 += String((x < 0) ? "1" : "0");
            }
            if (huffman.linbitsY !== null) {
                codeString0 += String(huffman.linbitsY);
            }
            if (y !== 0) {
                codeString0 += String((y < 0) ? "1" : "0");
            }
        }
        for (let i = region01; i < region12; i += 2) {
            let x = qspectrum576[i], y = qspectrum576[i + 1];
            let huffman = EncodeDuple(x, y, tableSelect1);
            codeString1 += String(huffman.huffmanCode);
            if (huffman.linbitsX !== null) {
                codeString1 += String(huffman.linbitsX);
            }
            if (x !== 0) {
                codeString1 += String((x < 0) ? "1" : "0");
            }
            if (huffman.linbitsY !== null) {
                codeString1 += String(huffman.linbitsY);
            }
            if (y !== 0) {
                codeString1 += String((y < 0) ? "1" : "0");
            }
        }
        for (let i = region12; i < BigvaluesPartition[1]; i += 2) {
            let x = qspectrum576[i], y = qspectrum576[i + 1];
            let huffman = EncodeDuple(x, y, tableSelect2);
            codeString2 += String(huffman.huffmanCode);
            if (huffman.linbitsX !== null) {
                codeString2 += String(huffman.linbitsX);
            }
            if (x !== 0) {
                codeString2 += String((x < 0) ? "1" : "0");
            }
            if (huffman.linbitsY !== null) {
                codeString2 += String(huffman.linbitsY);
            }
            if (y !== 0) {
                codeString2 += String((y < 0) ? "1" : "0");
            }
        }
        BigvaluesCodeString = String(codeString0) + String(codeString1) + String(codeString2);
    }
    // 处理小值区
    // 分别使用0和1两个四元组Huffman码表进行编码，计算总码长，选取较小者为最终的编码，并记录对应的码表编号0或1到count1table_select。
    if (SmallvaluesPartition[1] > SmallvaluesPartition[0]) {
        let codeStringA = "", codeStringB = "";
        // 分别使用两个码表进行编码，计算编码长度
        for (let i = SmallvaluesPartition[0]; i < SmallvaluesPartition[1]; i += 4) {
            let v = qspectrum576[i], w = qspectrum576[i + 1], x = qspectrum576[i + 2], y = qspectrum576[i + 3];
            codeStringA += String(EncodeQuadruple(v, w, x, y, 0));
            if (v !== 0) {
                codeStringA += String((v < 0) ? "1" : "0");
            }
            if (w !== 0) {
                codeStringA += String((w < 0) ? "1" : "0");
            }
            if (x !== 0) {
                codeStringA += String((x < 0) ? "1" : "0");
            }
            if (y !== 0) {
                codeStringA += String((y < 0) ? "1" : "0");
            }
            codeStringB += String(EncodeQuadruple(v, w, x, y, 1));
            if (v !== 0) {
                codeStringB += String((v < 0) ? "1" : "0");
            }
            if (w !== 0) {
                codeStringB += String((w < 0) ? "1" : "0");
            }
            if (x !== 0) {
                codeStringB += String((x < 0) ? "1" : "0");
            }
            if (y !== 0) {
                codeStringB += String((y < 0) ? "1" : "0");
            }
        }
        if (codeStringA.length <= codeStringB.length) {
            SmallvaluesCodeString = codeStringA;
            SmallvalueTableSelect = 0;
        }
        else {
            SmallvaluesCodeString = codeStringB;
            SmallvalueTableSelect = 1;
        }
    }
    // 将大值区和小值区编码拼接起来
    let HuffmanCodeString = BigvaluesCodeString + SmallvaluesCodeString;
    if (Region0Count < 0)
        Region0Count = 0;
    if (Region1Count < 0)
        Region1Count = 0;
    return {
        "blockType": blockType,
        "spectrum576": qspectrum576,
        "partition": partition,
        "codeString": HuffmanCodeString,
        "bigvalues": Bigvalues,
        "bigvalueTableSelect": BigvalueTableSelect,
        "region0Count": Region0Count,
        "region1Count": Region1Count,
        "smallvalueTableSelect": SmallvalueTableSelect
    };
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  mdct.js
//
//    改进的离散余弦变换。
//
/////////////////////////////////////////////////////////////////
/**
 * @description 长窗 窗函数（Type = 0）
 * @reference C.1.5.3.3(p96)
 */
// return (i >= 0 && i < 36) ? Math.sin(Math.PI * (i + 0.5) / 36) :
//        0;
const WindowNormal = [
    0.043619387365336, 0.13052619222005157, 0.21643961393810288, 0.3007057995042731, 0.3826834323650898, 0.46174861323503386,
    0.5372996083468239, 0.6087614290087205, 0.6755902076156602, 0.737277336810124, 0.7933533402912352, 0.8433914458128856,
    0.8870108331782217, 0.9238795325112867, 0.9537169507482269, 0.9762960071199334, 0.9914448613738104, 0.9990482215818578,
    0.9990482215818578, 0.9914448613738105, 0.9762960071199335, 0.9537169507482269, 0.9238795325112867, 0.8870108331782216,
    0.8433914458128858, 0.7933533402912352, 0.7372773368101241, 0.6755902076156604, 0.6087614290087209, 0.5372996083468241,
    0.4617486132350339, 0.3826834323650899, 0.30070579950427334, 0.21643961393810318, 0.13052619222005157, 0.04361938736533607
];
/**
 * @description 起始窗 窗函数（Type = 1）
 * @reference C.1.5.3.3(p95)
 */
// return (i >= 0  && i < 18) ? Math.sin(Math.PI * (i + 0.5) / 36) :
//        (i >= 18 && i < 24) ? 1 :
//        (i >= 24 && i < 30) ? Math.sin(Math.PI * (i + 0.5 - 18) / 12) :
//        0;
const WindowStart = [
    0.043619387365336, 0.13052619222005157, 0.21643961393810288, 0.3007057995042731, 0.3826834323650898, 0.46174861323503386,
    0.5372996083468239, 0.6087614290087205, 0.6755902076156602, 0.737277336810124, 0.7933533402912352, 0.8433914458128856,
    0.8870108331782217, 0.9238795325112867, 0.9537169507482269, 0.9762960071199334, 0.9914448613738104, 0.9990482215818578,
    1, 1, 1, 1, 1, 1,
    0.9914448613738104, 0.9238795325112868, 0.7933533402912352, 0.6087614290087209, 0.3826834323650899, 0.130526192220052,
    0, 0, 0, 0, 0, 0
];
/**
 * @description 短窗 窗函数（Type = 2）
 * @reference C.1.5.3.3(p96)
 */
// return (i >= 0 && i < 12) ? Math.sin(Math.PI * (i + 0.5) / 12) :
//        0;
const WindowShort = [
    0.13052619222005157, 0.3826834323650898, 0.6087614290087207, 0.7933533402912352, 0.9238795325112867, 0.9914448613738104,
    0.9914448613738104, 0.9238795325112868, 0.7933533402912352, 0.6087614290087209, 0.3826834323650899, 0.130526192220052,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0
];
/**
 * @description 结束窗 窗函数（Type = 3）
 * @reference C.1.5.3.3(p96)
 */
// return (i >= 0  && i < 6 ) ? 0:
//        (i >= 6  && i < 12) ? Math.sin(Math.PI * (i + 0.5 - 6) / 12) :
//        (i >= 12 && i < 18) ? 1 :
//        (i >= 18 && i < 36) ? Math.sin(Math.PI * (i + 0.5) / 36) :
//        0;
const WindowStop = [
    0, 0, 0, 0, 0, 0,
    0.13052619222005157, 0.3826834323650898, 0.6087614290087207, 0.7933533402912352, 0.9238795325112867, 0.9914448613738104,
    1, 1, 1, 1, 1, 1,
    0.9990482215818578, 0.9914448613738105, 0.9762960071199335, 0.9537169507482269, 0.9238795325112867, 0.8870108331782216,
    0.8433914458128858, 0.7933533402912352, 0.7372773368101241, 0.6755902076156604, 0.6087614290087209, 0.5372996083468241,
    0.4617486132350339, 0.3826834323650899, 0.30070579950427334, 0.21643961393810318, 0.13052619222005157, 0.04361938736533607
];
/**
 * @description 改进的离散余弦变换（MDCT）
 * @reference C.1.5.3.3(p96)
 * @input  input - 36或者12点时域序列
 * @input  length - 输入时域序列长度：36为长窗口；12为短窗口
 * @output 18/6个频域点
 */
function MDCT(input, length) {
    let output = new Array();
    let MDCT_FACTOR = (length === 12) ? MDCT_FACTOR_12 : MDCT_FACTOR_36;
    for (let i = 0; i < (length / 2); i++) {
        let sum = 0;
        for (let k = 0; k < length; k++) {
            sum += input[k] * MDCT_FACTOR[i * length + k];
        }
        output[i] = sum / length * 4; // NOTE 20200525 保证长短块的频点尺度相同，否则会出现长短块电平不一致。乘以4的目的是将幅度调整到0.7~1附近（但仍需回放增益）
    }
    return output;
}
/**
 * @description 去混叠蝶形结的系数
 * @reference Table.B.9(p65)
 *
 * NOTE ALIASING_CS 和 ALIASING_CA 的计算方法
 * for(let i = 0; i < 8; i++) {
 *     let ci = ALIASING_REDUCTION_COEFFICIENTS[i];
 *     ALIASING_CS[i] = 1 / Math.sqrt(1 + ci * ci);
 *     ALIASING_CA[i] = ci / Math.sqrt(1 + ci * ci);
 * }
 *
 */
const ALIASING_REDUCTION_COEFFICIENTS = [-0.6, -0.535, -0.33, -0.185, -0.095, -0.041, -0.0142, -0.0037];
const ALIASING_CS = [0.8574929257125443, 0.8817419973177052, 0.9496286491027328, 0.9833145924917902, 0.9955178160675858, 0.9991605581781475, 0.9998991952444471, 0.9999931550702803];
const ALIASING_CA = [-0.5144957554275266, -0.47173196856497235, -0.31337745420390184, -0.18191319961098118, -0.09457419252642066, -0.04096558288530405, -0.01419856857247115, -0.0036999746737600373];
/**
 * @description 去混叠蝶形结运算（仅用于长块频谱）
 * @reference Fig.A.5(p96) Table.B.9(p65) C.1.5.3.3(p96-97) Fig.C.8(p97)
 * @input  longBlockSpectrum - 由MDCT输出的576点长块频谱（窗口类型：Normal、Start、Stop）
 * @output 经蝶形运算的576点长块频谱
 */
function ReduceAliasing(longBlockSpectrum) {
    let input = longBlockSpectrum;
    let output = new Array();
    // 首先以input初始化output
    for (let i = 0; i < 576; i++) {
        output[i] = input[i];
    }
    // 每两个长块（18点子序列）之间执行蝶形结，共31个交叠间隙
    for (let i = 1; i < 32; i++) { // 1~31（从1开始）
        let indexA = 18 * i - 1;
        let indexB = 18 * i;
        // 每个交叠间隙执行8个蝶形结
        for (let butterfly = 0; butterfly < 8; butterfly++) {
            let inputA = input[indexA - butterfly];
            let inputB = input[indexB + butterfly];
            output[indexA - butterfly] = inputA * ALIASING_CS[butterfly] + inputB * ALIASING_CA[butterfly];
            output[indexB + butterfly] = -inputA * ALIASING_CA[butterfly] + inputB * ALIASING_CS[butterfly];
        }
    }
    return output;
}
/**
 * @description 计算一个Granule的频谱输出，含MDCT和去混叠（仅长块）
 * @reference C.1.5.3.3(p96-97)
 * @input  currentGranuleSubbands - 当前Granule的分析子带滤波器输出：[SB0[18]..SB31[18]]
 * @input  prevGranuleSubbands - 时域的前一个Granule的分析子带滤波器输出：[SB0[18]..SB31[18]]
 * @input  windowType - PAM2提供的窗口类型：枚举值 WINDOW_NORMAL | WINDOW_START | WINDOW_SHORT | WINDOW_STOP
 * @output 频谱（数组），结果分为长块|短块两类。长块结果为[576点长块频谱]；短块结果为[192点短块频谱0, 192点短块频谱1, 192点短块频谱2]，三者按照时域时间顺序排列。
 */
function GranuleMDCT(currentGranuleSubbands, prevGranuleSubbands, windowType) {
    if (windowType === WINDOW_NORMAL ||
        windowType === WINDOW_START ||
        windowType === WINDOW_STOP) {
        // 对每个子带进行处理，最后将每个子带的结果拼接成1个576点的长块频谱
        let LongBlockSpectrum = new Array();
        for (let sbindex = 0; sbindex < 32; sbindex++) {
            let currentGranule = currentGranuleSubbands[sbindex];
            let prevGranule = prevGranuleSubbands[sbindex];
            // 加窗
            let windowedMdctInput = new Array();
            let windowFunction = (windowType === WINDOW_NORMAL) ? WindowNormal :
                (windowType === WINDOW_START) ? WindowStart :
                    (windowType === WINDOW_STOP) ? WindowStop : undefined;
            for (let i = 0; i < 36; i++) {
                windowedMdctInput[i] = (i < 18) ? (prevGranule[i] * windowFunction[i]) :
                    (currentGranule[i - 18] * windowFunction[i]);
            }
            // MDCT
            let mdctOutput = MDCT(windowedMdctInput, 36);
            // 拼接到长块频谱上
            LongBlockSpectrum = LongBlockSpectrum.concat(mdctOutput);
        }
        // 对长块频谱作去混叠蝶形结运算
        let LongBlockSpectrumWithoutAliasing = ReduceAliasing(LongBlockSpectrum);
        return [LongBlockSpectrumWithoutAliasing];
    }
    else if (windowType === WINDOW_SHORT) {
        // 对每个子带进行处理，将每个子带的结果拼接成三个192点的短块频谱
        let ShortBlockSpectrums = new Array();
        ShortBlockSpectrums[0] = new Array();
        ShortBlockSpectrums[1] = new Array();
        ShortBlockSpectrums[2] = new Array();
        for (let sbindex = 0; sbindex < 32; sbindex++) {
            let currentGranule = currentGranuleSubbands[sbindex];
            let prevGranule = prevGranuleSubbands[sbindex];
            let frame = prevGranule.concat(currentGranule);
            // 处理三个按时间顺序排列的短块
            for (let shortBlockCount = 0; shortBlockCount < 3; shortBlockCount++) {
                // 截取短块（长度为12）
                let shortBlock = frame.slice((shortBlockCount + 1) * 6, (shortBlockCount + 1) * 6 + 12);
                // 加窗并MDCT
                let shortWindowedMdctInput = new Array();
                for (let i = 0; i < 12; i++) {
                    shortWindowedMdctInput[i] = shortBlock[i] * WindowShort[i];
                }
                let shortMdctOutput = MDCT(shortWindowedMdctInput, 12);
                // 拼接到第 shortBlockCount 个短块频谱上
                ShortBlockSpectrums[shortBlockCount] = ShortBlockSpectrums[shortBlockCount].concat(shortMdctOutput);
            }
        }
        return ShortBlockSpectrums;
    }
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  reservoir.js
//
//    比特储备机制。
//
/////////////////////////////////////////////////////////////////
// 设置最大比特储备容量（bits），同dist10的ResvFrameBegin
function SetReservoirMax() {
    // 根据当前帧长度修改比特储备池最大长度
    // if(frameLength > 7680) { // NOTE 7680是320k/48kHz的帧比特数（320000*1152/48000=7680）
    //     RESERVOIR_MAX = 0;
    // }
    // else {
    //     RESERVOIR_MAX = 7680 - frameLength;
    // }
    // 因为mainDataBegin为9bit，因此最多能表示511*8=4088bit的比特储备池
    if (RESERVOIR_MAX > 4088) {
        RESERVOIR_MAX = 4088;
    }
}
// 给每个Channel的分配比特预算
function AllocateBudget(perceptualEntropy, meanBitsPerChannel) {
    let budget = meanBitsPerChannel;
    // 如果比特储备为0，则直接以平均比特数为预算（需要限幅）
    if (RESERVOIR_SIZE === 0) {
        return (budget > 4095) ? 4095 : budget; // 因为part23Length最大值为4095
    }
    let moreBits = perceptualEntropy * 3.1 - meanBitsPerChannel;
    let addBits = (moreBits > 100) ?
        Math.min(moreBits, 0.6 * RESERVOIR_SIZE) : // NOTE 这里采用dist10的实现，似乎与11172有出入。11172是取大者，但dist10是取小者。
        0;
    budget += addBits;
    let overBits = RESERVOIR_SIZE - 0.8 * RESERVOIR_MAX - addBits;
    budget += ((overBits > 0) ? overBits : 0);
    return (budget > 4095) ? 4095 : Math.round(budget); // 因为part23Length最大值为4095
}
// 编码一个Channel后，将编码后剩余的比特返还给比特储备池
function ReturnUnusedBits(part23Length, meanBitsPerChannel) {
    RESERVOIR_SIZE += (meanBitsPerChannel - part23Length);
}
// 调整比特储备的容量，使其不超过最大容量，并为8的倍数（因为main_data_begin为8的倍数），并将多余的容量填充进main_data
function RegulateAndStuff(granules) {
    // LOG(`    ► 调整前的main_data_begin = ${RESERVOIR_SIZE / 8} bytes (${RESERVOIR_SIZE} bits)`);
    let stuffingBits = 0;
    // 若比特储备已经溢出，则将溢出部分从比特储备移除，填充进main_data
    if (RESERVOIR_SIZE > RESERVOIR_MAX) {
        stuffingBits += (RESERVOIR_SIZE - RESERVOIR_MAX);
        RESERVOIR_SIZE = RESERVOIR_MAX;
    }
    // 由于main_data_begin以字节为单位，且其值等于比特储备的大小，因此将比特储备调整为小于它自己的8的倍数。被调整掉的比特，填充进main_data
    let remainder = (RESERVOIR_SIZE & 7);
    RESERVOIR_SIZE -= remainder;
    stuffingBits += remainder;
    // LOG(`    ► 调整后的main_data_begin = ${RESERVOIR_SIZE / 8} bytes (${RESERVOIR_SIZE} bits)`);
    // 将多余的比特填充进main_data，方法是修改part23Length，由formatter执行实际的比特填充。
    // 策略是从第一个granule的第一个channel开始填充，如果充满（长度达到part23Length的上限4095），则继续填充下一channel、下一granule，直至填充完毕。
    let isFinished = false;
    for (let gr = 0; gr < 2; gr++) {
        for (let ch = 0; ch < CHANNELS; ch++) {
            if (granules[gr][ch].part23Length + stuffingBits > 4095) {
                stuffingBits -= (4095 - granules[gr][ch].part23Length);
                granules[gr][ch].part23Length = 4095;
                // LOG(`    ► Granule[${gr}][${ch}] 被填满至4095bits`);
            }
            else {
                // LOG(`    ► Granule[${gr}][${ch}] 被填充 ${stuffingBits} bits`);
                granules[gr][ch].part23Length += stuffingBits;
                isFinished = true;
                break;
            }
        }
        if (isFinished)
            break;
    }
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  qloop.js
//
//    量化和码率控制循环。包含量化、外层循环和内层循环。
//
/////////////////////////////////////////////////////////////////
/**
 * @description 频谱平坦度，用于计算量化步长初值 Ref: https://en.wikipedia.org/wiki/Spectral_flatness , doi:10.1109/lsp.2004.831663
 */
function SFM(xr576) {
    let temp1 = 0, temp2 = 0;
    let xrlen = 0;
    for (let i = 0; i < xr576.length; i++) {
        if (xr576[i] === 0)
            continue;
        let sqr = xr576[i] * xr576[i];
        temp1 += Math.log(sqr);
        temp2 += sqr;
        xrlen++;
    }
    if (temp2 === 0)
        return 1;
    temp1 /= xrlen;
    temp1 = Math.exp(temp1);
    temp2 /= xrlen;
    return (temp1 / temp2);
}
/**
 * @description 计算各个尺度因子频带的量化误差
 */
function QuantNoise(xr, ix, quantStep, blockType) {
    let xfsf = new Array();
    let SFB = ScaleFactorBands[SAMPLE_RATE][blockType];
    for (let sbindex = 0; sbindex < SFB.length; sbindex++) {
        let sum = 0;
        for (let i = SFB[sbindex][0]; i <= SFB[sbindex][1]; i++) {
            let temp1 = (ix[i] === 0) ? Math.abs(xr[i]) : (Math.abs(xr[i]) - Math.pow(Math.abs(ix[i]), (4 / 3)) * POWER_OF_ROOT_2_4[quantStep + 256]); // NOTE 与标准原文的差异：给ix[i]加了绝对值
            sum += (temp1 * temp1);
        }
        xfsf[sbindex] = sum / (SFB[sbindex][1] - SFB[sbindex][0] + 1); // NOTE 此处dist10与IS有出入，以dist10为准。
    }
    return xfsf;
}
/**
 * @description 对576点序列执行量化
 * @note TODO 根据dist10，此处应该区分长短块，加上subblock_gain，目前暂不实现
 */
function Quantize(xr576, quantStep) {
    let ix576 = new Array();
    for (let i = 0; i < 576; i++) {
        let xr = xr576[i];
        if (xr === 0) {
            ix576[i] = 0;
        }
        else if (xr > 0) {
            ix576[i] = Math.round(Math.pow((xr * INV_POWER_OF_ROOT_2_4[quantStep + 256]), 0.75) - 0.0946);
        }
        else {
            ix576[i] = -Math.round(Math.pow(((-xr) * INV_POWER_OF_ROOT_2_4[quantStep + 256]), 0.75) - 0.0946);
        }
    }
    return ix576;
}
/**
 * @description 短块频谱重排
 */
function MuxShortBlockSpectrum(qspects) {
    let qspect576 = new Array();
    let SFBands = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK];
    for (let sfb = 0; sfb < SFBands.length; sfb++) {
        let sfbPartition = SFBands[sfb];
        // 因最后一个SFB并未延伸到频谱末端(191)，所以应将其延伸到频谱末端
        if (sfb === SFBands.length - 1)
            sfbPartition = [sfbPartition[0], 191];
        for (let w = 0; w < 3; w++) {
            for (let i = sfbPartition[0]; i <= sfbPartition[1]; i++) {
                qspect576.push(qspects[w][i]);
            }
        }
    }
    return qspect576;
}
/**
 * @description 576点短块频谱拆分成3个短块频谱
 */
function DemuxShortBlockSpectrum(spect576) {
    let spect = new Array();
    spect[0] = new Array();
    spect[1] = new Array();
    spect[2] = new Array();
    let SFBands = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK];
    let offset = 0;
    for (let sfb = 0; sfb < SFBands.length; sfb++) {
        let sfbPartition = SFBands[sfb];
        // 因最后一个SFB并未延伸到频谱末端(191)，所以应将其延伸到频谱末端
        if (sfb === SFBands.length - 1)
            sfbPartition = [sfbPartition[0], 191];
        for (let w = 0; w < 3; w++) {
            for (let i = sfbPartition[0]; i <= sfbPartition[1]; i++) {
                spect[w][i] = spect576[offset];
                offset++;
            }
        }
    }
    return spect;
}
/**
 * @description 计算尺度因子的scalefac_compress  TODO 不支持混合块模式
 * @reference 2.4.2.7(p25-26)
 * @input  Scalefactors - 一组长块尺度因子（21个），或者三组短块尺度因子（3×12个）
 * @input  blockType - 窗口类型（长块或短块）
 * @output scalefac_compress
 */
function ScalefactorCompress(Scalefactors, blockType) {
    let maxValue1 = -1;
    let maxValue2 = -1;
    if (blockType !== WINDOW_SHORT) {
        // 计算0~10和11~20两个SFB区间的最大值
        for (let i = 0; i <= 10; i++) {
            if (Scalefactors[i] > maxValue1)
                maxValue1 = Scalefactors[i];
        }
        for (let i = 11; i <= 20; i++) {
            if (Scalefactors[i] > maxValue2)
                maxValue2 = Scalefactors[i];
        }
    }
    else if (blockType === WINDOW_SHORT) {
        // 计算0~5和6~11两个SFB区间的最大值
        for (let i = 0; i <= 5; i++) {
            let sf = Math.max(Scalefactors[0][i], Scalefactors[1][i], Scalefactors[2][i]);
            if (sf > maxValue1)
                maxValue1 = sf;
        }
        for (let i = 6; i <= 11; i++) {
            let sf = Math.max(Scalefactors[0][i], Scalefactors[1][i], Scalefactors[2][i]);
            if (sf > maxValue2)
                maxValue2 = sf;
        }
    }
    // 计算各自的位数
    let slen1 = (maxValue1 === 0) ? 0 : (Math.floor(Math.log2(maxValue1)) + 1);
    let slen2 = (maxValue2 === 0) ? 0 : (Math.floor(Math.log2(maxValue2)) + 1);
    let sfcompress = SF_COMPRESS[slen1][slen2];
    return (!(sfcompress >= 0)) ? 15 : sfcompress;
}
/**
 * @description 计算part2（尺度因子）长度
 */
function Part2Length(scalefactorCompress, blockType) {
    let part2Length = 0;
    let slens = SF_COMPRESS_INDEX[scalefactorCompress];
    if (blockType !== WINDOW_SHORT) {
        part2Length = 11 * slens[0] + 10 * slens[1];
    }
    else if (blockType === WINDOW_SHORT) {
        part2Length = (6 * slens[0] + 6 * slens[1]) * 3;
    }
    return part2Length;
}
/**
 * @description 内层循环（码率控制循环）
 */
function InnerLoop(Spectrum, blockType, bitRateLimit) {
    let initLength = -1; // 用于减少迭代次数
    let spectrum576;
    // 根据长短块不同，构造576点频谱供量化
    if (blockType !== WINDOW_SHORT) {
        spectrum576 = Spectrum[0];
    }
    else {
        spectrum576 = MuxShortBlockSpectrum(Spectrum);
    }
    // 计算量化初值
    // NOTE 下一行中，dist10是减去70。试验结果显示，对于某些测试用例（如 Zwei!! OST 的《おやすみ》），减去70的确可以防止准静音帧出现可闻噪声。
    //      但是这里考虑到性能，采取了一个较小的值。如果以后测试出问题，将继续修改这个参数。
    //      简单解释：所谓准静音，指的是幅度非常小、频谱平坦度又较高的片段，例如乐曲开始前或结束后的静音。由于频谱平坦度较高，初始量化步长较大，再加上
    //               本身幅度较小，因而量化噪音很容易超出掩蔽阈值和/或听阈，导致产生可闻量化噪声。所以，解决的办法就是尽可能减小量化初值。
    let quantanf = Math.round(8 * Math.log(SFM(spectrum576))) - 50;
    for (let qquant = 0; qquant < 256; qquant++) { // global_gain为8bit
        // 量化
        let quantizedSpectrum576 = Quantize(spectrum576, (quantanf + qquant));
        // 保存量化步长
        let globalGain = quantanf + qquant + 210; // NOTE 关于这个210的来历，见标准p35的2.4.3.4.7。
        // 哈夫曼编码
        let huffman = HuffmanEncode(quantizedSpectrum576, blockType);
        // 以下代码的目的是尽可能减少迭代次数 TODO 这里的可靠性还需要进一步验证
        if (huffman !== null) {
            if (initLength < 0)
                initLength = huffman.codeString.length;
            let gone = initLength - huffman.codeString.length; // 已经缩减的比特数
            let togo = huffman.codeString.length - bitRateLimit; // 距离目标比特数还剩多少
            // 以下的分界点和加速步长都可以调整
            if (gone < 2 * togo) {
                qquant += 4;
            }
            else if (gone < 4 * togo) {
                qquant += 2;
            }
        }
        // 满足条件退出
        if (huffman !== null && huffman.codeString.length < bitRateLimit) {
            if (huffman.codeString.length === 0)
                globalGain = 0; // 静音情况
            return {
                "huffman": huffman,
                "globalGain": Math.min(globalGain, 255),
                "subblockGain": [0, 0, 0],
                "qquant": qquant,
                "quantizedSpectrum576": quantizedSpectrum576
            };
        }
    }
    // 量化超时
    return null;
}
/**
 * @description 外层循环（噪声控制循环）
 */
function OuterLoop(Spectrum, // NOTE 该值会被修改（每轮循环都会放大一个尺度因子，并重新量化、编码）
windowType, bitRateLimit, xmin // NOTE 该值不会被修改（函数内部会拷贝一份副本）
) {
    // 【量化·编码结果】
    let innerLoopOutput;
    // 【循环初始化】
    // 循环计数器（防止超时）
    let outerLoopCount = 0;
    // 长块SFB个数
    let LongBlockSFBNumber = ScaleFactorBands[SAMPLE_RATE][LONG_BLOCK].length;
    let ShortBlockSFBNumber = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK].length;
    // 初始化尺度因子
    let LongBlockScalefactors = new Array();
    for (let i = 0; i < LongBlockSFBNumber; i++) {
        LongBlockScalefactors[i] = 0;
    }
    let ShortBlockScalefactors = new Array();
    ShortBlockScalefactors[0] = new Array();
    ShortBlockScalefactors[1] = new Array();
    ShortBlockScalefactors[2] = new Array();
    for (let i = 0; i < ShortBlockSFBNumber; i++) {
        ShortBlockScalefactors[0][i] = 0;
        ShortBlockScalefactors[1][i] = 0;
        ShortBlockScalefactors[2][i] = 0;
    }
    // 由于循环时xmin要被分别放大，因此需要将xmin拷贝，循环时修改的是其副本
    let xminForLong = new Array();
    let xminForShort = new Array();
    xminForShort[0] = new Array();
    xminForShort[1] = new Array();
    xminForShort[2] = new Array();
    for (let i = 0; i < xmin.length; i++) {
        xminForLong[i] = xmin[i];
        xminForShort[0][i] = xmin[i];
        xminForShort[1][i] = xmin[i];
        xminForShort[2][i] = xmin[i];
    }
    // 用于指示短块情况下每个子块是否已经处理完成
    let isFinished = new Array();
    isFinished[0] = false;
    isFinished[1] = false;
    isFinished[2] = false;
    while (outerLoopCount < 100) { // 超时控制
        // LOG(`  外层循环第 ${outerLoopCount} 次`);
        // 缩放系数
        let scalefactorScale = 0;
        let ifqstep = (scalefactorScale === 0) ? 1.4142135623730951 : 2;
        // 【内层循环：码率控制循环】
        innerLoopOutput = InnerLoop(Spectrum, windowType, bitRateLimit);
        // LOG(`    内层循环结束，量化步数：${innerLoopOutput.qquant}`);
        /////////////////////////////
        //  长 块
        /////////////////////////////
        if (windowType !== WINDOW_SHORT) {
            // 【计算量化噪声】
            let xfsf = QuantNoise(Spectrum[0], innerLoopOutput.quantizedSpectrum576, innerLoopOutput.globalGain - 210, LONG_BLOCK);
            // 【预加重】（暂缓实现）
            // 【对所有超限的SFB放大一步】 C.1.5.4.3.5
            let sfbsOverXmin = new Array(); // 记录超限的SFB的index，用于判断退出条件
            for (let sbindex = 0; sbindex < LongBlockSFBNumber; sbindex++) {
                if (xfsf[sbindex] > xminForLong[sbindex]) {
                    sfbsOverXmin.push(sbindex);
                    xminForLong[sbindex] *= (ifqstep * ifqstep);
                    LongBlockScalefactors[sbindex]++;
                    let sfbPartition = ScaleFactorBands[SAMPLE_RATE][LONG_BLOCK][sbindex];
                    for (let i = sfbPartition[0]; i <= sfbPartition[1]; i++) {
                        Spectrum[0][i] *= ifqstep;
                    }
                }
            }
            // LOG(`    已放大长块超限SFB：${sfbsOverXmin}`);
            // 【保存尺度因子】
            let result = {
                "blockType": windowType,
                "scalefactors": LongBlockScalefactors,
                "scalefactorScale": scalefactorScale,
                "scalefactorCompress": 15,
                "part23Length": 0,
                // 以下是内层循环的结果
                "huffman": innerLoopOutput.huffman,
                "globalGain": innerLoopOutput.globalGain,
                "subblockGain": innerLoopOutput.subblockGain,
                "qquant": innerLoopOutput.qquant,
                "quantizedSpectrum576": innerLoopOutput.quantizedSpectrum576
            };
            // 【检查退出条件】
            let isExit = false;
            // 1 所有的尺度因子频带都被放大过？如果是，则退出
            let isAllSfbAmplified = true;
            for (let sb = 0; sb < LongBlockSFBNumber; sb++) {
                if (LongBlockScalefactors[sb] === 0) {
                    isAllSfbAmplified = false;
                    break;
                }
            }
            if (isAllSfbAmplified === false) {
                // 2 尺度因子的值是否有超过其各自的动态范围？如果有超过，则退出
                let isScalefactorExceeded = false;
                for (let sb = 0; sb <= 10; sb++) {
                    if (LongBlockScalefactors[sb] >= 15) {
                        isScalefactorExceeded = true;
                        break;
                    }
                }
                for (let sb = 11; sb <= 20; sb++) {
                    if (LongBlockScalefactors[sb] >= 7) {
                        isScalefactorExceeded = true;
                        break;
                    }
                }
                if (isScalefactorExceeded === false) {
                    // 3 还有超限的尺度因子频带吗？如果没有，则退出
                    if (sfbsOverXmin.length <= 0) {
                        isExit = true;
                    }
                }
                else {
                    isExit = true;
                }
            }
            else {
                isExit = true;
            }
            //////// EXIT ////////
            if (isExit) {
                let scalefactorCompress = ScalefactorCompress(result.scalefactors, result.blockType);
                let part2Length = Part2Length(scalefactorCompress, result.blockType);
                result.scalefactorCompress = scalefactorCompress;
                result.part23Length = part2Length + result.huffman.codeString.length;
                return result;
            }
        }
        /////////////////////////////
        //  短 块
        /////////////////////////////
        else {
            // 首先将量化后的576点频谱分解为3个192点（量化后的）频谱
            let ShortBlockSpectrums = DemuxShortBlockSpectrum(innerLoopOutput.quantizedSpectrum576);
            // 分别处理每个子块的尺度因子
            for (let window = 0; window < 3; window++) {
                // 跳过已经完成的子块
                if (isFinished[window] === true) {
                    // LOG(`    短块[${window}]已处理完毕，跳过。`);
                    continue;
                }
                let quantizedShortSpectrum = ShortBlockSpectrums[window];
                // 【计算量化噪声】
                let xfsf = QuantNoise(Spectrum[window], quantizedShortSpectrum, innerLoopOutput.globalGain - 210, SHORT_BLOCK);
                // 【预加重】（暂缓实现）
                // 【对所有超限的SFB放大一步】 C.1.5.4.3.5
                let sfbsOverXmin = new Array(); // 记录超限的SFB的index，用于判断退出条件
                for (let sbindex = 0; sbindex < ShortBlockSFBNumber; sbindex++) {
                    if (xfsf[sbindex] > xminForShort[window][sbindex]) {
                        sfbsOverXmin.push(sbindex);
                        xminForShort[window][sbindex] *= (ifqstep * ifqstep);
                        ShortBlockScalefactors[window][sbindex]++;
                        let sfbPartition = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK][sbindex];
                        for (let i = sfbPartition[0]; i <= sfbPartition[1]; i++) {
                            Spectrum[window][i] *= ifqstep;
                        }
                    }
                }
                // LOG(`    已放大短块[${window}]超限SFB：${sfbsOverXmin}`);
                // 【保存尺度因子】
                // （直接保存在ShortBlockScalefactors）
                // 【检查退出条件】
                // 1 所有的尺度因子频带都被放大过？如果是，则退出
                let isAllSfbAmplified = true;
                for (let sb = 0; sb < LongBlockSFBNumber; sb++) {
                    if (ShortBlockScalefactors[window][sb] === 0) {
                        isAllSfbAmplified = false;
                        break;
                    }
                }
                if (isAllSfbAmplified === true) {
                    isFinished[window] = true;
                    continue;
                }
                // 2 尺度因子的值是否有超过其各自的动态范围？如果有超过，则退出
                let isScalefactorExceeded = false;
                for (let sb = 0; sb <= 5; sb++) {
                    if (ShortBlockScalefactors[window][sb] >= 15) {
                        isScalefactorExceeded = true;
                        break;
                    }
                }
                for (let sb = 5; sb <= 11; sb++) {
                    if (ShortBlockScalefactors[window][sb] >= 7) {
                        isScalefactorExceeded = true;
                        break;
                    }
                }
                if (isScalefactorExceeded === true) {
                    isFinished[window] = true;
                    continue;
                }
                // 3 还有超限的尺度因子频带吗？如果没有，则退出
                if (sfbsOverXmin.length <= 0) {
                    isFinished[window] = true;
                    continue;
                }
            } // 子块循环结束
            // 所有子块都处理完毕
            //////// EXIT ////////
            if (isFinished[0] === true && isFinished[1] === true && isFinished[2] === true) {
                let result = {
                    "blockType": windowType,
                    "scalefactors": ShortBlockScalefactors,
                    "scalefactorScale": scalefactorScale,
                    "scalefactorCompress": 15,
                    "part23Length": 0,
                    // 以下是内层循环的结果
                    "huffman": innerLoopOutput.huffman,
                    "globalGain": innerLoopOutput.globalGain,
                    "subblockGain": innerLoopOutput.subblockGain,
                    "qquant": innerLoopOutput.qquant,
                    "quantizedSpectrum576": innerLoopOutput.quantizedSpectrum576
                };
                // 计算尺度因子长度
                let scalefactorCompress = ScalefactorCompress(result.scalefactors, result.blockType);
                let part2Length = Part2Length(scalefactorCompress, result.blockType);
                result.scalefactorCompress = scalefactorCompress;
                result.part23Length = part2Length + result.huffman.codeString.length;
                return result;
            }
        } // 短块分支结束
        outerLoopCount++;
    } // 一个Granule的噪声控制循环结束
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  stream.js
//
//    MP3比特流构建。
//
/////////////////////////////////////////////////////////////////
function FormatFrameBitStream(frame, isPadding, mainDataBegin) {
    let fixedData = ""; // Header+CRC+SideIndo
    let mainData = ""; // Scalefactors+Huffman
    ////////////////////////////////////
    //  构 造 固 定 部 分
    ////////////////////////////////////
    // Header (32bits 4Bytes)
    fixedData += "111111111111"; // syncword = 1111 1111 1111
    fixedData += "1"; // ID = 1, MP3
    fixedData += "01"; // Layer 3 = 01
    fixedData += "1"; // no CRC = 1
    fixedData += BIT_RATE_BINCODE[BIT_RATE]; // Bitrate index
    fixedData += SAMPLE_RATE_BINCODE[SAMPLE_RATE]; // Sample rate index
    fixedData += (isPadding) ? "1" : "0"; // padding bit
    fixedData += "0"; // private bit
    fixedData += (CHANNELS >= 2) ? "00" : "11"; // 仅支持stereo和mono
    fixedData += "00"; // mode extension
    fixedData += "01"; // no copyright = 0; original = 1
    fixedData += "00"; // emphasis = 00 none
    // CRC (none)
    // SideInfo (136bits 17Bytes / 256bits 32Bytes)
    fixedData += BinaryString(mainDataBegin, 9); // main_data_begin
    if (CHANNELS >= 2) {
        fixedData += "000"; // private_bits (3bits while stereo)
    }
    else {
        fixedData += "00000"; // private_bits (3bits while mono)
    }
    // scfsi
    for (let ch = 0; ch < CHANNELS; ch++) {
        fixedData += "0000"; // TODO 暂不实现scfsi，因此固定为0
    }
    for (let gr = 0; gr < 2; gr++) {
        let granule = frame[gr];
        for (let ch = 0; ch < CHANNELS; ch++) {
            let channel = granule[ch];
            fixedData += BinaryString(channel.part23Length, 12);
            fixedData += BinaryString(channel.bigvalues, 9);
            fixedData += BinaryString(channel.globalGain, 8);
            fixedData += BinaryString(channel.scalefactorCompress, 4);
            fixedData += String(channel.windowSwitchingFlag);
            if (channel.windowSwitchingFlag === "1") {
                fixedData += BinaryString(channel.blockType, 2);
                fixedData += "0"; // mixed_block_flag
                for (let region = 0; region < 2; region++) {
                    fixedData += BinaryString(channel.tableSelect[region], 5);
                }
                for (let window = 0; window < 3; window++) {
                    fixedData += "000"; // TODO 暂未实现 subblock_gain，设置为0
                }
            }
            else if (channel.windowSwitchingFlag === "0") {
                for (let region = 0; region < 3; region++) {
                    fixedData += BinaryString(channel.tableSelect[region], 5);
                }
                fixedData += BinaryString(channel.region0Count, 4);
                fixedData += BinaryString(channel.region1Count, 3);
            }
            fixedData += "0"; // TODO preflag未实现，固定为0
            fixedData += "0"; // TODO scalefactor_scale未实现，固定为0
            fixedData += (channel.count1TableSelect === 0) ? "0" : "1";
        }
    }
    ////////////////////////////////////
    //  构 造 主 要 部 分 (SF and Huffman)
    ////////////////////////////////////
    for (let gr = 0; gr < 2; gr++) {
        let granule = frame[gr];
        for (let ch = 0; ch < CHANNELS; ch++) {
            let channel = granule[ch];
            let channelMainData = new Array();
            // Part 2: Scalefactors
            let slen1 = SF_COMPRESS_INDEX[channel.scalefactorCompress][0];
            let slen2 = SF_COMPRESS_INDEX[channel.scalefactorCompress][1];
            if ((channel.windowSwitchingFlag === "1") && (channel.blockType === WINDOW_SHORT)) {
                for (let sfb = 0; sfb < 6; sfb++) {
                    for (let window = 0; window < 3; window++) {
                        channelMainData += BinaryString(channel.scalefactors[window][sfb], slen1);
                    }
                }
                for (let sfb = 6; sfb < 12; sfb++) {
                    for (let window = 0; window < 3; window++) {
                        channelMainData += BinaryString(channel.scalefactors[window][sfb], slen2);
                    }
                }
            }
            else {
                for (let sfb = 0; sfb < 11; sfb++) {
                    channelMainData += BinaryString(channel.scalefactors[sfb], slen1);
                }
                for (let sfb = 11; sfb < 21; sfb++) {
                    channelMainData += BinaryString(channel.scalefactors[sfb], slen2);
                }
            }
            // Part 3: Huffman
            channelMainData += channel.huffmanCodeBits;
            // 根据part23Length填充0
            for (let i = channelMainData.length; i < channel.part23Length; i++) {
                channelMainData += "0";
            }
            mainData = mainData.concat(channelMainData);
        }
    }
    ////////////////////////////////////
    //  装 配 字 节 流
    ////////////////////////////////////
    let bytes = new Array(); // 最终输出的字节流
    let fixedBytes = new Array();
    let mainBytes = new Array();
    for (let i = 0; i < fixedData.length; i += 8) {
        let eightBits = fixedData.slice(i, i + 8);
        fixedBytes.push(BinaryStringToUint(eightBits));
    }
    for (let i = 0; i < mainData.length; i += 8) {
        let eightBits = mainData.slice(i, i + 8);
        mainBytes.push(BinaryStringToUint(eightBits));
    }
    let mainCount = 0;
    // 先装配fixed部分之前的mainData，其长度为mainDataBegin
    for (let i = 0; i < mainDataBegin; i++) {
        bytes.push(mainBytes[mainCount]);
        mainCount++;
    }
    // 装配fixed部分（帧头和边信息）
    for (let i = 0; i < fixedBytes.length; i++) {
        bytes.push(fixedBytes[i]);
    }
    // 装配fixed部分之后的mainData
    while (mainCount < mainBytes.length) {
        bytes.push(mainBytes[mainCount]);
        mainCount++;
    }
    // 填充字节（槽）
    if (isPadding) {
        bytes.push(0x80);
    }
    return bytes;
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  decoder.js
//
//    哈夫曼解码。仅用于开发、测试。
//
/////////////////////////////////////////////////////////////////
let HUFFMAN_TREES = HuffmanTreeInit();
let HUFFMAN_TREES_DUPLE = HUFFMAN_TREES.HuffmanTreeDuple;
let HUFFMAN_TREES_QUADRUPLE = HUFFMAN_TREES.HuffmanTreeQuadruple;
/**
 * @description 解码大值区
 */
function HuffmanDecode(bitstr, /* 哈夫曼编码的比特串 */ blockType, /* 块类型：长块或短块 */ bigvalues, /* 大值对儿数量 */ region0Count, /* 大值区子分区0包含的SFB个数-1 */ region1Count, /* 大值区子分区1包含的SFB个数-1 */ bigvalueTableSelects, /* 大值区各子分区的哈夫曼表编号 */ smallvalueTableSelect /* 小值区哈夫曼表（0/1） */) {
    if (bitstr.length <= 0) {
        let zeros = new Array();
        for (let i = 0; i < 576; i++) {
            zeros[i] = 0;
        }
        return zeros;
    }
    // 计算大值区三个子分区的频点数目
    let regionLength = [0, 0, 0];
    if (blockType === WINDOW_NORMAL) {
        let SFBands = ScaleFactorBands[SAMPLE_RATE][LONG_BLOCK];
        for (let sfb = 0; sfb < region0Count + 1; sfb++) {
            let sfbPartition = SFBands[sfb];
            regionLength[0] = regionLength[0] + (sfbPartition[1] - sfbPartition[0] + 1);
        }
        for (let sfb = region0Count + 1; sfb < region0Count + region1Count + 2; sfb++) {
            let sfbPartition = SFBands[sfb];
            regionLength[1] = regionLength[1] + (sfbPartition[1] - sfbPartition[0] + 1);
        }
        regionLength[2] = bigvalues * 2 - regionLength[0] - regionLength[1];
    }
    else if (blockType === WINDOW_SHORT) {
        let SFBands = ScaleFactorBands[SAMPLE_RATE][SHORT_BLOCK];
        for (let sfb = 0; sfb < 3; sfb++) {
            let sfbPartition = SFBands[sfb];
            regionLength[0] = regionLength[0] + (sfbPartition[1] - sfbPartition[0] + 1) * 3;
        }
        regionLength[1] = bigvalues * 2 - regionLength[0];
    }
    if (blockType === WINDOW_START || blockType === WINDOW_STOP) {
        let SFBands = ScaleFactorBands[SAMPLE_RATE][LONG_BLOCK];
        for (let sfb = 0; sfb < region0Count /* i.e. === 7 */ + 1; sfb++) {
            let sfbPartition = SFBands[sfb];
            regionLength[0] = regionLength[0] + (sfbPartition[1] - sfbPartition[0] + 1);
        }
        regionLength[1] = bigvalues * 2 - regionLength[0];
    }
    let values = new Array();
    let regionNum = 3;
    if (blockType === WINDOW_SHORT || blockType === WINDOW_START || blockType === WINDOW_STOP) {
        regionNum = 2; // @reference p26
    }
    let offset = 0;
    for (let region = 0; region < regionNum; region++) {
        let count = regionLength[region];
        if (bigvalueTableSelects[region] === 0) {
            for (let i = 0; i < count; i++) {
                values.push(0);
                values.push(0);
            }
        }
        else {
            let htree = HUFFMAN_TREES_DUPLE[bigvalueTableSelects[region]];
            let linbits = HuffmanTableDuple[bigvalueTableSelects[region]].linbits;
            // LOG(`Region ${region}: Length = ${count} Linbits = ${linbits}`);
            while (count > 0) {
                let hresult = DecodePrefix(bitstr.substring(offset), htree);
                let x = hresult.x;
                let y = hresult.y;
                offset += hresult.runlength;
                if (x === 15 && linbits > 0) {
                    x += BinaryStringToUint(bitstr.substring(offset, offset + linbits), linbits);
                    offset += linbits;
                }
                if (x !== 0) {
                    x *= ((bitstr[offset] === "1") ? (-1) : 1);
                    offset += 1;
                }
                if (y === 15 && linbits > 0) {
                    y += BinaryStringToUint(bitstr.substring(offset, offset + linbits), linbits);
                    offset += linbits;
                }
                if (y !== 0) {
                    y *= ((bitstr[offset] === "1") ? (-1) : 1);
                    offset += 1;
                }
                values.push(x);
                values.push(y);
                count -= 2;
                // LOG(`Decoded: ${x} ${y}`);
            }
        }
    }
    // 解码小值区
    while (offset < bitstr.length) {
        let htree = HUFFMAN_TREES_QUADRUPLE[smallvalueTableSelect];
        let hresult = DecodePrefix(bitstr.substring(offset), htree);
        let v = hresult.v;
        let w = hresult.w;
        let x = hresult.x;
        let y = hresult.y;
        offset += hresult.runlength;
        if (v !== 0) {
            v *= ((bitstr[offset] === "1") ? (-1) : 1);
            offset += 1;
        }
        if (w !== 0) {
            w *= ((bitstr[offset] === "1") ? (-1) : 1);
            offset += 1;
        }
        if (x !== 0) {
            x *= ((bitstr[offset] === "1") ? (-1) : 1);
            offset += 1;
        }
        if (y !== 0) {
            y *= ((bitstr[offset] === "1") ? (-1) : 1);
            offset += 1;
        }
        values.push(v);
        values.push(w);
        values.push(x);
        values.push(y);
    }
    // 结尾填充0
    for (let i = values.length; i < 576; i++) {
        values[i] = 0;
    }
    return values;
}
/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyright (c) 2019-2020 BD4SUR @ GitHub
//
//  =============================================================
//
//  main.js
//
//    编码器主体流程。
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//  编码器入口（异步，用于Web浏览器）
/////////////////////////////////////////////////////////////////
function Aqua_Main(PCM_left, PCM_right, channels, sampleRate, bitRate, onRunning, onFinished) {
    // 编码器初始化
    Aqua_Init(channels, sampleRate, bitRate);
    let frameNumber = Math.ceil(PCM_left.length / 1152);
    console.log(`预计帧数：${frameNumber}`);
    let byteStream = new Array(); // 字节流
    let offset = 0; // 采样计数
    let frameCount = 0; // 帧计数
    // 帧时钟（使用setInterval实现帧循环，避免阻塞）
    let ENCODER_TIMER = setInterval(() => {
        let startTime = Date.now(); // 计时开始
        // 编码从offset开始的一帧
        let frame = Aqua_EncodeFrame([PCM_left, PCM_right], offset);
        // 将当前帧的比特流拼接到现有比特流后面
        let frameStream = frame.stream;
        for (let i = 0; i < frameStream.length; i++) {
            byteStream.push(frameStream[i]);
        }
        let endTime = Date.now(); // 计时结束
        // 计算编码一帧所需时间
        let duration = endTime - startTime;
        let speed = ((1152 / SAMPLE_RATE_VALUE[SAMPLE_RATE] * 1000) / duration).toFixed(1);
        // 编码结果可视化（onRunning）
        onRunning({
            frameCount: frameCount,
            frameNumber: frameNumber,
            speed: speed,
            PCM: PCM_left,
            offset: offset
        });
        // 更新计数器
        frameCount++;
        offset += 1152;
        // 编码完成
        if (offset >= PCM_left.length) {
            clearInterval(ENCODER_TIMER);
            // 编码结束后保存文件的动作
            onFinished({
                frameNumber: frameNumber,
                byteStream: byteStream
            });
            return byteStream;
        }
    }, 0);
}
/////////////////////////////////////////////////////////////////
//  编码器入口（同步，用于后端）
/////////////////////////////////////////////////////////////////
function Aqua_Main_Sync(PCM_left, PCM_right, channels, sampleRate, bitRate) {
    // 编码器初始化
    Aqua_Init(channels, sampleRate, bitRate);
    let frameNumber = Math.ceil(PCM_left.length / 1152);
    console.log(`预计帧数：${frameNumber}`);
    let byteStream = new Array(); // 字节流
    let offset = 0; // 采样计数
    let frameCount = 0; // 帧计数
    // 逐帧编码，将各帧连接起来
    while (offset < PCM_left.length) {
        // 编码从offset开始的一帧
        let frame = Aqua_EncodeFrame([PCM_left, PCM_right], offset);
        // 将当前帧的比特流拼接到现有比特流后面
        let frameStream = frame.stream;
        for (let i = 0; i < frameStream.length; i++) {
            byteStream.push(frameStream[i]);
        }
        // 更新计数器
        frameCount++;
        offset += 1152;
    }
    return byteStream;
}
/////////////////////////////////////////////////////////////////
//
//  编 码 器 初 始 化
//
/////////////////////////////////////////////////////////////////
function Aqua_Init(channels, sampleRate, bitRate) {
    // 首先设置声道数、采样率和比特率
    switch (channels) {
        case 1:
            CHANNELS = 1;
            break;
        case 2:
            CHANNELS = 2;
            break;
        default:
            console.error(`Aqua仅支持至多两个声道的立体声（不支持联合立体声）。`);
            return false;
    }
    switch (sampleRate) {
        case 44100:
            SAMPLE_RATE = SAMPLE_RATE_44100;
            break;
        case 48000:
            SAMPLE_RATE = SAMPLE_RATE_48000;
            break;
        case 32000:
            SAMPLE_RATE = SAMPLE_RATE_32000;
            break;
        default:
            console.error(`Aqua不支持采样率 ${sampleRate}Hz。`);
            return false;
    }
    switch (bitRate) {
        case 320000:
            BIT_RATE = BIT_RATE_320K;
            break;
        case 224000:
            BIT_RATE = BIT_RATE_224K;
            break;
        case 128000:
            BIT_RATE = BIT_RATE_128K;
            break;
        case 64000:
            BIT_RATE = BIT_RATE_64K;
            break;
        default:
            console.warn(`Aqua不支持比特率 ${sampleRate}bps。默认设置为320kbps。`);
            BIT_RATE = BIT_RATE_320K;
            break;
    }
    // 心理声学模型初始化
    PAM2_Init();
    // 缓存初始化
    for (let ch = 0; ch < CHANNELS; ch++) {
        let zeros = new Array();
        for (let i = 0; i < 32; i++) {
            zeros[i] = new Array();
            for (let j = 0; j < 18; j++) {
                zeros[i][j] = 0;
            }
        }
        BUFFER[ch] = {
            "PREV_BLOCK_TYPE": WINDOW_NORMAL,
            "PREV_SUBBANDS": zeros
        };
    }
    // MDCT系数初始化
    for (i = 0; i < 18; i++) {
        for (let k = 0; k < 36; k++) {
            MDCT_FACTOR_36[i * 36 + k] = Math.cos(Math.PI * (2 * k + 1 + 18) * (2 * i + 1) / (2 * 36));
        }
    }
    for (i = 0; i < 6; i++) {
        for (let k = 0; k < 12; k++) {
            MDCT_FACTOR_12[i * 12 + k] = Math.cos(Math.PI * (2 * k + 1 + 6) * (2 * i + 1) / (2 * 12));
        }
    }
    // 量化公式使用的数表 初始化
    for (let i = 0; i < 512; i++) {
        POWER_OF_ROOT_2_4[i] = Math.pow(ROOT_2_4, (i - 256));
        INV_POWER_OF_ROOT_2_4[i] = 1.0 / POWER_OF_ROOT_2_4[i];
    }
    // 哈夫曼表初始化
    for (let i = 0; i < 32; i++) {
        HTABLES[i] = new Array();
        if (!HuffmanTableDuple[i])
            continue;
        let htmap = HuffmanTableDuple[i].table;
        for (let key in htmap) {
            let x = parseInt(key.split(" ")[0]);
            let y = parseInt(key.split(" ")[1]);
            HTABLES[i][x * 16 + y] = htmap[key];
        }
        HuffmanTableDuple[i].table = HTABLES[i];
    }
    return true;
}
/////////////////////////////////////////////////////////////////
//
//  编 码 一 帧 （含 两 个 granule）
//
/////////////////////////////////////////////////////////////////
function Aqua_EncodeFrame(PCMs, offset) {
    let mainDataBegin = RESERVOIR_SIZE;
    // 帧间距（bits）
    let frameLength = Math.floor((BIT_RATE_VALUE[BIT_RATE] * 1152 / SAMPLE_RATE_VALUE[SAMPLE_RATE]) / 8) * 8; // 变为8的倍数
    // 每个Granule的平均长度（含所有声道，bits）
    let sideLength = (CHANNELS >= 2) ? 256 : 136;
    let meanBitsPerGranule = (frameLength - sideLength - 32) / 2; // Header 32bits, SideInfo 256bits(dual)/136bits(mono)
    // 设置比特储备的最大容量
    SetReservoirMax();
    // 分别编码两个granules
    let granule0 = EncodeGranule(PCMs, offset, meanBitsPerGranule);
    let granule1 = EncodeGranule(PCMs, offset + 576, meanBitsPerGranule);
    // 检查比特储备池的容量，使用多余的比特对granule作填充
    RegulateAndStuff([granule0, granule1]);
    // p22 对于44100Hz情况，要计算isPadding
    let isPadding = false;
    let rest = 0;
    if (offset > 0) {
        let dif = (144 * BIT_RATE_VALUE[BIT_RATE] % SAMPLE_RATE_VALUE[SAMPLE_RATE]);
        rest -= dif;
        if (rest < 0) {
            isPadding = true;
            rest += SAMPLE_RATE_VALUE[SAMPLE_RATE];
        }
        else {
            isPadding = false;
        }
    }
    // 组装比特流
    let frameStream = FormatFrameBitStream([granule0, granule1], isPadding, mainDataBegin);
    return {
        granules: [granule0, granule1],
        stream: frameStream
    };
}
/////////////////////////////////////////////////////////////////
//
//  编 码 一 个 Granule （含 一 个 或 两 个 声 道）
//
/////////////////////////////////////////////////////////////////
function EncodeGranule(PCMs, offset, meanBitsPerGranule) {
    let channels = new Array();
    for (let ch = 0; ch < CHANNELS; ch++) {
        LOG(`【Channel ${ch}】`);
        let channel = EncodeChannel(PCMs[ch], offset, meanBitsPerGranule / CHANNELS, BUFFER[ch]);
        channels.push(channel);
    }
    return channels;
}
/////////////////////////////////////////////////////////////////
//
//  编 码 一 个 声 道 （主 要 流 程）
//
/////////////////////////////////////////////////////////////////
function EncodeChannel(PCM, offset, meanBitsPerChannel, buffer) {
    //////////////////////////////////
    //  分 析 子 带 滤 波
    //////////////////////////////////
    let subbands = AnalysisSubbandFilter(PCM, offset);
    //////////////////////////////////
    //  心 理 声 学 模 型 （尚未实现）
    //////////////////////////////////
    let perceptualEntropy = 0;
    let isAttack = (Math.random() > 0.9) ? true : false;
    let blockType = SwitchWindowType(buffer.PREV_BLOCK_TYPE, isAttack);
    let xmin = new Array();
    for (let i = 0; i < 21; i++) { // 应当区分长短块
        xmin[i] = Number.MAX_VALUE; // 暂时禁用心理声学模型
    }
    //////////////////////////////////
    //  时 频 变 换
    //////////////////////////////////
    let Spectrum = GranuleMDCT(subbands, buffer.PREV_SUBBANDS, blockType); // TODO
    //////////////////////////////////
    //  分 配 比 特 预 算
    //////////////////////////////////
    // LOG(`当前比特储备：${RESERVOIR_SIZE}`);
    let budget = AllocateBudget(perceptualEntropy, meanBitsPerChannel);
    // LOG(`当前Channel分配的比特预算（part2 & 3） = ${budget} bits`);
    let huffmanBudget = budget - ((blockType !== WINDOW_SHORT) ? 74 : 126); // 假设尺度因子全满的情况下，扣除尺度因子所使用的比特，剩余的预算分配给part3（哈夫曼编码）
    // LOG(`当前Channel分配的比特预算（only part3）= ${huffmanBudget} bits`);
    //////////////////////////////////
    //  量 化 循 环
    //////////////////////////////////
    let outerLoopOutput = OuterLoop(Spectrum, blockType, huffmanBudget, xmin);
    //////////////////////////////////
    //  构 造 编 码 结 果
    //////////////////////////////////
    let channel = {
        "part23Length": outerLoopOutput.part23Length,
        "bigvalues": outerLoopOutput.huffman.bigvalues,
        "globalGain": outerLoopOutput.globalGain,
        "scalefactorCompress": outerLoopOutput.scalefactorCompress,
        "windowSwitchingFlag": (blockType === WINDOW_NORMAL) ? "0" : "1",
        "blockType": blockType,
        "tableSelect": outerLoopOutput.huffman.bigvalueTableSelect,
        "subblockGain": outerLoopOutput.subblockGain,
        "region0Count": outerLoopOutput.huffman.region0Count,
        "region1Count": outerLoopOutput.huffman.region1Count,
        "count1TableSelect": outerLoopOutput.huffman.smallvalueTableSelect,
        // Part 2
        "scalefactors": outerLoopOutput.scalefactors,
        // Part 3
        "huffmanCodeBits": outerLoopOutput.huffman.codeString,
        "spectrum": outerLoopOutput.quantizedSpectrum576
    };
    //////////////////////////////////
    //  返 还 剩 余 比 特
    //////////////////////////////////
    ReturnUnusedBits(channel.part23Length, meanBitsPerChannel);
    //////////////////////////////////
    //  保 存 前 一 granule 结 果
    //////////////////////////////////
    buffer.PREV_SUBBANDS = subbands;
    buffer.PREV_BLOCK_TYPE = blockType;
    return channel;
}
const fs = require("fs");
let pcm_l = [];
let pcm_r = [];
// 正弦单音信号
// NOTE TODO 2022-07-05 通过这个用例发现一个问题：quantanf应减去一个偏移值，dist10是70。减去偏移值，可以防止初始量化步长太大，使得小幅噪声样信号（频谱平坦度较大）出现较大的可闻量化失真。
//      但是减去偏移值会使得量化步长过于小，对于单音信号这样的频谱平坦度本就极小的信号来说，会导致编码结果发生极大失真（不是噪声），这是无法容忍的。
//      初步测试发现，将quantanf设为固定值-100，效果似乎不错。quantanf是个关键参数，有必要继续研究。
for (let i = 0; i < 1152 * 100; i++) {
    pcm_l[i] = Math.sin(i / 10);
    pcm_r[i] = Math.sin(i / 10);
}
const onRunning = (info) => {
    console.log(info.frameCount);
};
const onFinished = (info) => {
    let byteStream = info.byteStream;
    let buffer = new Uint8Array(byteStream);
    fs.writeFileSync("E:/Desktop/test.mp3", buffer, { "flag": "w" });
};
// Aqua_Main(pcm_l, pcm_r, 2, 48000, 320000, onRunning, onFinished);
// Uint16（大端）序列 转换为 浮点数组
function Uint16_to_Floats(data) {
    function shortToFloat(byte_MSB, byte_LSB) {
        return (((byte_MSB << 8) | byte_LSB) / 32768 - 1);
    }
    let samples = [];
    for (let i = 0; i < data.length; i += 2) {
        let byte_MSB = data[i];
        let byte_LSB = data[i + 1];
        let fvalue = shortToFloat(byte_MSB, byte_LSB);
        samples.push(fvalue);
    }
    return samples;
}
// 浮点数组 转换为 Uint16（大端）序列（字节流）
function Floats_to_Uint16(samples) {
    function floatToShort(fvalue) {
        let i16value = (((fvalue + 1) * 32768) | 0);
        return [((i16value >> 8) & 255), (i16value & 255)];
    }
    let bytes = [];
    for (let i = 0; i < samples.length; i++) {
        let fvalue = samples[i];
        let svalue = floatToShort(fvalue);
        bytes.push(svalue[0]); // MSB
        bytes.push(svalue[1]); // LSB
    }
    return bytes;
}
const net = require('net');
const PCM_PORT = 9000;
const MP3_PORT = 9001;
const GR_HOST = "192.168.10.150";
const AQUA_HOST = "192.168.10.20";
let client = null;
let isGrStarted = false;
// 建立TCP连接
function ClientInit(host, port) {
    client = net.connect(port, host, () => {
        console.log(`[Aqua-Client] Client connected`);
    });
    client.on("data", (data) => {
        console.log(`[Aqua-Client] Response from GR: ${data}`);
    });
    client.on("end", () => {
        console.log(`[Aqua-Client] Client end`);
    });
    client.on("error", (err) => {
        console.error(err);
    });
    client.on("close", () => {
        console.log("[Aqua-Client] Client closed");
        process.exit(0);
    });
}
let byteFIFO = [];
// 接收输入的PCM流
const server = net.createServer((socket) => {
    // socket.setEncoding("binary");
    socket.on("data", (buf) => {
        if (isGrStarted === false) {
            ClientInit(GR_HOST, MP3_PORT);
            isGrStarted = true;
        }
        console.log(`[Aqua-Server] Received PCM data from GR`);
        // 取出字节流，进入队列
        // let bytes = [...buf];
        for (const b of buf) {
            byteFIFO.push(b);
        }
        // 检查队列状态
        let byteFifoLength = byteFIFO.length;
        if ((byteFifoLength > 1152 * 100) && (byteFifoLength % 2 === 0)) {
            // TODO 需要对齐uint16的边界（如何对齐？），若没有对齐，会导致PCM浮点采样完全混乱。
            // NOTE MTU的间断会导致PCM也间断，如何拼接起来，需要考虑。设计上层协议？
            let pcm = Uint16_to_Floats(byteFIFO);
            // 执行编码（左右声道相同）
            let mp3_bytestream = Aqua_Main_Sync(pcm, pcm, 2, 48000, 320000);
            console.log(`编码完成，字节长度：${mp3_bytestream.length}`);
            let buffer = new Uint8Array(mp3_bytestream);
            fs.writeFileSync("E:/Desktop/test.mp3", buffer, { "flag": "w" });
            // 通过MP3_PORT返回数据
            client.write(Buffer.from("bytes"));
            byteFIFO = [];
        }
        else {
            console.log(`FIFO.length = ${byteFIFO.length} 未满，等待`);
        }
    });
    socket.on("end", () => {
        console.log("[Aqua-Server] Server end");
    });
    socket.on("error", (err) => {
        console.error(err);
    });
});
server.on("error", (err) => {
    console.error(err);
});
server.listen(PCM_PORT, AQUA_HOST, () => {
    console.log(`[Aqua-Server] Start listening ${AQUA_HOST}:${PCM_PORT}`);
});
