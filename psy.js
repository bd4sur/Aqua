/////////////////////////////////////////////////////////////////
//
//  Project Aqua - MP3 Audio Encoder / MP3音频编码器
//
//  Copyrignt (c) 2019-2020 Mikukonai @ GitHub
//
//  =============================================================
//
//  psy.js
//
//    第二心理声学模型。包括常数表、模型算法。
//
/////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////
//
//   心 理 声 学 模 型 参 数
//
/////////////////////////////////////////////////////////////////

// 以下是标准附录C提供的参数，Layer3编码器实际使用这些参数进行PAM参数的计算。直接从dist10的源码中复制而来。

// Table C.7 [SampleRateIndex][BlockType][PartitionIndex]
const PAM_TABLES_C7 = [

    // 32000Hz
    [
        // 32000Hz, Long Blocks
        [
        //  lines  minval    qthr      norm       bval
/*  0 */  [ 2,     24.5,     4.532,    0.997,     0.313],
/*  1 */  [ 2,     24.5,     4.532,    0.893,     0.938],
/*  2 */  [ 2,     24.5,     1.809,    0.881,     1.563],
/*  3 */  [ 2,     20.0,     0.181,    0.873,     2.188],
/*  4 */  [ 2,     20.0,     0.181,    0.872,     2.813],
/*  5 */  [ 2,     20.0,     0.057,    0.871,     3.438],
/*  6 */  [ 2,     20.0,     0.018,    0.860,     4.045],
/*  7 */  [ 2,     20.0,     0.018,    0.839,     4.625],
/*  8 */  [ 2,     18.0,     0.018,    0.812,     5.173],
/*  9 */  [ 2,     18.0,     0.018,    0.784,     5.698],
/* 10 */  [ 2,     12.0,     0.018,    0.741,     6.185],
/* 11 */  [ 2,     12.0,     0.018,    0.697,     6.634],
/* 12 */  [ 2,      6.0,     0.018,    0.674,     7.070],
/* 13 */  [ 2,      6.0,     0.018,    0.651,     7.492],
/* 14 */  [ 2,      6.0,     0.018,    0.633,     7.905],
/* 15 */  [ 2,      3.0,     0.018,    0.611,     8.305],
/* 16 */  [ 2,      3.0,     0.018,    0.589,     8.695],
/* 17 */  [ 2,      3.0,     0.018,    0.575,     9.064],
/* 18 */  [ 3,      3.0,     0.027,    0.654,     9.484],
/* 19 */  [ 3,      3.0,     0.027,    0.724,     9.966],
/* 20 */  [ 3,      0.0,     0.027,    0.701,    10.426],
/* 21 */  [ 3,      0.0,     0.027,    0.673,    10.866],
/* 22 */  [ 3,      0.0,     0.027,    0.631,    11.279],
/* 23 */  [ 3,      0.0,     0.027,    0.592,    11.669],
/* 24 */  [ 3,      0.0,     0.027,    0.553,    12.042],
/* 25 */  [ 3,      0.0,     0.027,    0.510,    12.386],
/* 26 */  [ 3,      0.0,     0.027,    0.506,    12.721],
/* 27 */  [ 4,      0.0,     0.036,    0.562,    13.091],
/* 28 */  [ 4,      0.0,     0.036,    0.598,    13.488],
/* 29 */  [ 4,      0.0,     0.036,    0.589,    13.873],
/* 30 */  [ 5,      0.0,     0.045,    0.607,    14.268],
/* 31 */  [ 5,      0.0,     0.045,    0.620,    14.679],
/* 32 */  [ 5,      0.0,     0.045,    0.580,    15.067],
/* 33 */  [ 5,      0.0,     0.045,    0.532,    15.424],
/* 34 */  [ 5,      0.0,     0.045,    0.517,    15.771],
/* 35 */  [ 6,      0.0,     0.054,    0.517,    16.120],
/* 36 */  [ 6,      0.0,     0.054,    0.509,    16.466],
/* 37 */  [ 6,      0.0,     0.054,    0.506,    16.807],
/* 38 */  [ 8,      0.0,     0.072,    0.522,    17.158],
/* 39 */  [ 8,      0.0,     0.072,    0.531,    17.518],
/* 40 */  [ 8,      0.0,     0.072,    0.519,    17.869],
/* 41 */  [10,      0.0,     0.090,    0.512,    18.215],
/* 42 */  [10,      0.0,     0.090,    0.509,    18.563],
/* 43 */  [10,      0.0,     0.090,    0.498,    18.902],
/* 44 */  [12,      0.0,     0.109,    0.494,    19.239],
/* 45 */  [12,      0.0,     0.109,    0.501,    19.580],
/* 46 */  [13,      0.0,     0.118,    0.508,    19.925],
/* 47 */  [14,      0.0,     0.252,    0.502,    20.269],
/* 48 */  [14,      0.0,     0.252,    0.493,    20.606],
/* 49 */  [16,      0.0,     0.288,    0.497,    20.944],
/* 50 */  [20,      0.0,     0.572,    0.506,    21.288],
/* 51 */  [20,      0.0,     0.572,    0.510,    21.635],
/* 52 */  [23,      0.0,     0.658,    0.504,    21.980],
/* 53 */  [27,      0.0,     2.441,    0.496,    22.319],
/* 54 */  [27,      0.0,     2.441,    0.493,    22.656],
/* 55 */  [32,      0.0,     2.893,    0.490,    22.993],
/* 56 */  [37,      0.0,    33.458,    0.482,    23.326],
/* 57 */  [37,      0.0,    33.458,    0.458,    23.656],
/* 58 */  [12,      0.0,    10.851,    0.500,    23.937]
        ],

        // 32000Hz, Short Blocks
        [
        //  lines   qthr      norm     SNR         bval
/*  0 */  [ 1,      4.532,    1.000,   -8.240,     0.000],
/*  1 */  [ 1,      0.904,    0.985,   -8.240,     1.250],
/*  2 */  [ 1,      0.090,    0.983,   -8.240,     2.500],
/*  3 */  [ 1,      0.029,    0.983,   -8.240,     3.750],
/*  4 */  [ 1,      0.009,    0.981,   -8.240,     4.909],
/*  5 */  [ 1,      0.009,    0.975,   -8.240,     5.958],
/*  6 */  [ 1,      0.009,    0.959,   -8.240,     6.857],
/*  7 */  [ 1,      0.009,    0.944,   -8.240,     7.700],
/*  8 */  [ 1,      0.009,    0.933,   -8.240,     8.500],
/*  9 */  [ 1,      0.009,    0.920,   -8.240,     9.237],
/* 10 */  [ 1,      0.009,    0.892,   -7.447,     9.895],
/* 11 */  [ 1,      0.009,    0.863,   -7.447,    10.500],
/* 12 */  [ 1,      0.009,    0.839,   -7.447,    11.083],
/* 13 */  [ 1,      0.009,    0.786,   -7.447,    11.604],
/* 14 */  [ 1,      0.009,    0.755,   -7.447,    12.107],
/* 15 */  [ 1,      0.009,    0.698,   -7.447,    12.554],
/* 16 */  [ 1,      0.009,    0.673,   -7.447,    13.000],
/* 17 */  [ 1,      0.009,    0.605,   -7.447,    13.391],
/* 18 */  [ 1,      0.009,    0.629,   -7.447,    13.781],
/* 19 */  [ 2,      0.018,    0.883,   -7.447,    14.474],
/* 20 */  [ 2,      0.018,    0.858,   -6.990,    15.096],
/* 21 */  [ 2,      0.018,    0.829,   -6.990,    15.667],
/* 22 */  [ 2,      0.018,    0.767,   -6.990,    16.177],
/* 23 */  [ 2,      0.018,    0.705,   -6.990,    16.636],
/* 24 */  [ 2,      0.018,    0.637,   -6.990,    17.057],
/* 25 */  [ 2,      0.018,    0.564,   -6.990,    17.429],
/* 26 */  [ 2,      0.018,    0.550,   -6.990,    17.786],
/* 27 */  [ 3,      0.027,    0.603,   -6.990,    18.177],
/* 28 */  [ 3,      0.027,    0.635,   -6.990,    18.597],
/* 29 */  [ 3,      0.027,    0.592,   -6.990,    18.994],
/* 30 */  [ 3,      0.027,    0.533,   -6.020,    19.352],
/* 31 */  [ 3,      0.027,    0.518,   -6.020,    19.693],
/* 32 */  [ 4,      0.072,    0.568,   -6.020,    20.066],
/* 33 */  [ 4,      0.072,    0.594,   -6.020,    20.462],
/* 34 */  [ 4,      0.072,    0.568,   -5.229,    20.841],
/* 35 */  [ 5,      0.143,    0.536,   -5.229,    21.201],
/* 36 */  [ 5,      0.143,    0.522,   -5.229,    21.549],
/* 37 */  [ 6,      0.172,    0.542,   -5.229,    21.911],
/* 38 */  [ 7,      0.633,    0.539,   -4.559,    22.275],
/* 39 */  [ 7,      0.633,    0.519,   -4.559,    22.625],
/* 40 */  [ 8,      0.723,    0.514,   -3.980,    22.971],
/* 41 */  [10,      9.043,    0.518,   -3.980,    23.321]
        ]
    ],

    // 44100Hz
    [
        // 44100Hz, Long Blocks
        [
        //  lines  minval    qthr      norm       bval
/*  0 */  [ 1,     24.5,     4.532,    0.951,     0.000],
/*  1 */  [ 1,     24.5,     4.532,    0.700,     0.431],
/*  2 */  [ 1,     24.5,     4.532,    0.681,     0.861],
/*  3 */  [ 1,     24.5,     0.904,    0.675,     1.292],
/*  4 */  [ 1,     24.5,     0.904,    0.667,     1.723],
/*  5 */  [ 1,     20.0,     0.090,    0.665,     2.153],
/*  6 */  [ 1,     20.0,     0.090,    0.664,     2.584],
/*  7 */  [ 1,     20.0,     0.029,    0.664,     3.015],
/*  8 */  [ 1,     20.0,     0.029,    0.664,     3.445],
/*  9 */  [ 1,     20.0,     0.029,    0.655,     3.876],
/* 10 */  [ 1,     20.0,     0.009,    0.616,     4.279],
/* 11 */  [ 1,     20.0,     0.009,    0.597,     4.670],
/* 12 */  [ 1,     18.0,     0.009,    0.578,     5.057],
/* 13 */  [ 1,     18.0,     0.009,    0.541,     5.416],
/* 14 */  [ 1,     18.0,     0.009,    0.575,     5.774],
/* 15 */  [ 2,     12.0,     0.018,    0.856,     6.422],
/* 16 */  [ 2,      6.0,     0.018,    0.846,     7.026],
/* 17 */  [ 2,      6.0,     0.018,    0.840,     7.609],
/* 18 */  [ 2,      3.0,     0.018,    0.822,     8.168],
/* 19 */  [ 2,      3.0,     0.018,    0.800,     8.710],
/* 20 */  [ 2,      3.0,     0.018,    0.753,     9.207],
/* 21 */  [ 2,      3.0,     0.018,    0.704,     9.662],
/* 22 */  [ 2,      0.0,     0.018,    0.674,    10.099],
/* 23 */  [ 2,      0.0,     0.018,    0.640,    10.515],
/* 24 */  [ 2,      0.0,     0.018,    0.609,    10.917],
/* 25 */  [ 2,      0.0,     0.018,    0.566,    11.293],
/* 26 */  [ 2,      0.0,     0.018,    0.535,    11.652],
/* 27 */  [ 2,      0.0,     0.018,    0.531,    11.997],
/* 28 */  [ 3,      0.0,     0.027,    0.615,    12.394],
/* 29 */  [ 3,      0.0,     0.027,    0.686,    12.850],
/* 30 */  [ 3,      0.0,     0.027,    0.650,    13.277],
/* 31 */  [ 3,      0.0,     0.027,    0.612,    13.681],
/* 32 */  [ 3,      0.0,     0.027,    0.567,    14.062],
/* 33 */  [ 3,      0.0,     0.027,    0.520,    14.411],
/* 34 */  [ 3,      0.0,     0.027,    0.513,    14.751],
/* 35 */  [ 4,      0.0,     0.036,    0.557,    15.119],
/* 36 */  [ 4,      0.0,     0.036,    0.584,    15.508],
/* 37 */  [ 4,      0.0,     0.036,    0.570,    15.883],
/* 38 */  [ 5,      0.0,     0.045,    0.579,    16.263],
/* 39 */  [ 5,      0.0,     0.045,    0.585,    16.654],
/* 40 */  [ 5,      0.0,     0.045,    0.548,    17.020],
/* 41 */  [ 6,      0.0,     0.054,    0.536,    17.374],
/* 42 */  [ 6,      0.0,     0.054,    0.550,    17.744],
/* 43 */  [ 7,      0.0,     0.063,    0.532,    18.104],
/* 44 */  [ 7,      0.0,     0.063,    0.504,    18.447],
/* 45 */  [ 7,      0.0,     0.063,    0.496,    18.782],
/* 46 */  [ 9,      0.0,     0.081,    0.517,    19.130],
/* 47 */  [ 9,      0.0,     0.081,    0.527,    19.487],
/* 48 */  [ 9,      0.0,     0.081,    0.516,    19.838],
/* 49 */  [10,      0.0,     0.180,    0.497,    20.179],
/* 50 */  [10,      0.0,     0.180,    0.489,    20.510],
/* 51 */  [11,      0.0,     0.198,    0.502,    20.852],
/* 52 */  [14,      0.0,     0.400,    0.501,    21.196],
/* 53 */  [14,      0.0,     0.400,    0.491,    21.531],
/* 54 */  [15,      0.0,     0.429,    0.497,    21.870],
/* 55 */  [20,      0.0,     1.808,    0.504,    22.214],
/* 56 */  [20,      0.0,     1.808,    0.504,    22.558],
/* 57 */  [21,      0.0,     1.898,    0.495,    22.898],
/* 58 */  [27,      0.0,    24.416,    0.486,    23.232],
/* 59 */  [27,      0.0,    24.416,    0.484,    23.564],
/* 60 */  [36,      0.0,    32.554,    0.483,    23.897],
/* 61 */  [73,      0.0,   660.124,    0.475,    24.229],
/* 62 */  [18,      0.0,   162.770,    0.515,    24.442]
        ],

        // 44100Hz, Short Blocks
        [
        //  lines   qthr      norm     SNR         bval
/*  0 */  [ 1,      4.532,    1.000,   -8.240,     0.000],
/*  1 */  [ 1,      0.904,    0.983,   -8.240,     1.723],
/*  2 */  [ 1,      0.029,    0.983,   -8.240,     3.445],
/*  3 */  [ 1,      0.009,    0.982,   -8.240,     5.057],
/*  4 */  [ 1,      0.009,    0.985,   -8.240,     6.422],
/*  5 */  [ 1,      0.009,    0.983,   -8.240,     7.609],
/*  6 */  [ 1,      0.009,    0.978,   -8.240,     8.710],
/*  7 */  [ 1,      0.009,    0.967,   -8.240,     9.662],
/*  8 */  [ 1,      0.009,    0.948,   -8.240,    10.515],
/*  9 */  [ 1,      0.009,    0.930,   -8.240,    11.293],
/* 10 */  [ 1,      0.009,    0.914,   -7.447,    12.009],
/* 11 */  [ 1,      0.009,    0.870,   -7.447,    12.625],
/* 12 */  [ 1,      0.009,    0.845,   -7.447,    13.210],
/* 13 */  [ 1,      0.009,    0.800,   -7.447,    13.748],
/* 14 */  [ 1,      0.009,    0.749,   -7.447,    14.241],
/* 15 */  [ 1,      0.009,    0.701,   -7.447,    14.695],
/* 16 */  [ 1,      0.009,    0.653,   -7.447,    15.125],
/* 17 */  [ 1,      0.009,    0.590,   -7.447,    15.508],
/* 18 */  [ 1,      0.009,    0.616,   -7.447,    15.891],
/* 19 */  [ 2,      0.018,    0.860,   -7.447,    16.537],
/* 20 */  [ 2,      0.018,    0.823,   -6.990,    17.112],
/* 21 */  [ 2,      0.018,    0.762,   -6.990,    17.621],
/* 22 */  [ 2,      0.018,    0.688,   -6.990,    18.073],
/* 23 */  [ 2,      0.018,    0.612,   -6.990,    18.470],
/* 24 */  [ 2,      0.018,    0.594,   -6.990,    18.849],
/* 25 */  [ 3,      0.027,    0.658,   -6.990,    19.271],
/* 26 */  [ 3,      0.027,    0.706,   -6.990,    19.741],
/* 27 */  [ 3,      0.054,    0.660,   -6.990,    20.177],
/* 28 */  [ 3,      0.054,    0.606,   -6.990,    20.576],
/* 29 */  [ 3,      0.054,    0.565,   -6.990,    20.950],
/* 30 */  [ 4,      0.114,    0.560,   -6.020,    21.316],
/* 31 */  [ 4,      0.114,    0.579,   -6.020,    21.699],
/* 32 */  [ 5,      0.452,    0.567,   -6.020,    22.078],
/* 33 */  [ 5,      0.452,    0.534,   -6.020,    22.438],
/* 34 */  [ 5,      0.452,    0.514,   -5.229,    22.782],
/* 35 */  [ 7,      6.330,    0.520,   -5.229,    23.133],
/* 36 */  [ 7,      6.330,    0.518,   -5.229,    23.484],
/* 37 */  [ 7,      6.330,    0.507,   -5.229,    23.828],
/* 38 */  [19,    171.813,    0.447,   -4.559,    24.173]
        ]
    ],

    // 48000Hz
    [
        // 48000Hz, Long Blocks
        [
        //  lines  minval    qthr      norm       bval
/*  0 */  [ 1,     24.5,     4.532,    0.970,     0.000],
/*  1 */  [ 1,     24.5,     4.532,    0.755,     0.469],
/*  2 */  [ 1,     24.5,     4.532,    0.738,     0.938],
/*  3 */  [ 1,     24.5,     0.904,    0.730,     1.406],
/*  4 */  [ 1,     24.5,     0.904,    0.724,     1.875],
/*  5 */  [ 1,     20.0,     0.090,    0.723,     2.344],
/*  6 */  [ 1,     20.0,     0.090,    0.723,     2.813],
/*  7 */  [ 1,     20.0,     0.029,    0.723,     3.281],
/*  8 */  [ 1,     20.0,     0.029,    0.718,     3.750],
/*  9 */  [ 1,     20.0,     0.009,    0.690,     4.199],
/* 10 */  [ 1,     20.0,     0.009,    0.660,     4.625],
/* 11 */  [ 1,     18.0,     0.009,    0.641,     5.047],
/* 12 */  [ 1,     18.0,     0.009,    0.600,     5.438],
/* 13 */  [ 1,     18.0,     0.009,    0.584,     5.828],
/* 14 */  [ 1,     12.0,     0.009,    0.532,     6.188],
/* 15 */  [ 1,     12.0,     0.009,    0.537,     6.522],
/* 16 */  [ 2,      6.0,     0.018,    0.857,     7.174],
/* 17 */  [ 2,      6.0,     0.018,    0.858,     7.801],
/* 18 */  [ 2,      3.0,     0.018,    0.853,     8.402],
/* 19 */  [ 2,      3.0,     0.018,    0.824,     8.966],
/* 20 */  [ 2,      3.0,     0.018,    0.778,     9.484],
/* 21 */  [ 2,      3.0,     0.018,    0.740,     9.966],
/* 22 */  [ 2,      0.0,     0.018,    0.709,    10.426],
/* 23 */  [ 2,      0.0,     0.018,    0.676,    10.866],
/* 24 */  [ 2,      0.0,     0.018,    0.632,    11.279],
/* 25 */  [ 2,      0.0,     0.018,    0.592,    11.669],
/* 26 */  [ 2,      0.0,     0.018,    0.553,    12.042],
/* 27 */  [ 2,      0.0,     0.018,    0.510,    12.386],
/* 28 */  [ 2,      0.0,     0.018,    0.513,    12.721],
/* 29 */  [ 3,      0.0,     0.027,    0.608,    13.115],
/* 30 */  [ 3,      0.0,     0.027,    0.673,    13.562],
/* 31 */  [ 3,      0.0,     0.027,    0.637,    13.984],
/* 32 */  [ 3,      0.0,     0.027,    0.586,    14.371],
/* 33 */  [ 3,      0.0,     0.027,    0.571,    14.741],
/* 34 */  [ 4,      0.0,     0.036,    0.616,    15.140],
/* 35 */  [ 4,      0.0,     0.036,    0.640,    15.563],
/* 36 */  [ 4,      0.0,     0.036,    0.598,    15.962],
/* 37 */  [ 4,      0.0,     0.036,    0.538,    16.324],
/* 38 */  [ 4,      0.0,     0.036,    0.512,    16.665],
/* 39 */  [ 5,      0.0,     0.045,    0.528,    17.020],
/* 40 */  [ 5,      0.0,     0.045,    0.517,    17.373],
/* 41 */  [ 5,      0.0,     0.045,    0.493,    17.708],
/* 42 */  [ 6,      0.0,     0.054,    0.499,    18.045],
/* 43 */  [ 7,      0.0,     0.063,    0.525,    18.398],
/* 44 */  [ 7,      0.0,     0.063,    0.541,    18.762],
/* 45 */  [ 8,      0.0,     0.072,    0.528,    19.120],
/* 46 */  [ 8,      0.0,     0.072,    0.510,    19.466],
/* 47 */  [ 8,      0.0,     0.072,    0.506,    19.807],
/* 48 */  [10,      0.0,     0.180,    0.525,    20.159],
/* 49 */  [10,      0.0,     0.180,    0.536,    20.522],
/* 50 */  [10,      0.0,     0.180,    0.518,    20.874],
/* 51 */  [13,      0.0,     0.372,    0.501,    21.214],
/* 52 */  [13,      0.0,     0.372,    0.497,    21.553],
/* 53 */  [14,      0.0,     0.400,    0.497,    21.892],
/* 54 */  [18,      0.0,     1.627,    0.495,    22.231],
/* 55 */  [18,      0.0,     1.627,    0.494,    22.569],
/* 56 */  [20,      0.0,     1.808,    0.497,    22.909],
/* 57 */  [25,      0.0,    22.607,    0.494,    23.248],
/* 58 */  [25,      0.0,    22.607,    0.487,    23.583],
/* 59 */  [35,      0.0,    31.650,    0.483,    23.915],
/* 60 */  [67,      0.0,   605.867,    0.482,    24.246],
/* 61 */  [67,      0.0,   605.867,    0.524,    24.576]
        ],

        // 48000Hz, Short Blocks
        [
        //  lines   qthr      norm     SNR         bval
/*  0 */  [ 1,      4.532,    1.000,   -8.240,     0.000],
/*  1 */  [ 1,      0.904,    0.989,   -8.240,     1.875],
/*  2 */  [ 1,      0.029,    0.989,   -8.240,     3.750],
/*  3 */  [ 1,      0.009,    0.981,   -8.240,     5.438],
/*  4 */  [ 1,      0.009,    0.985,   -8.240,     6.857],
/*  5 */  [ 1,      0.009,    0.984,   -8.240,     8.109],
/*  6 */  [ 1,      0.009,    0.980,   -8.240,     9.237],
/*  7 */  [ 1,      0.009,    0.968,   -8.240,    10.202],
/*  8 */  [ 1,      0.009,    0.954,   -8.240,    11.083],
/*  9 */  [ 1,      0.009,    0.929,   -8.240,    11.865],
/* 10 */  [ 1,      0.009,    0.906,   -7.447,    12.554],
/* 11 */  [ 1,      0.009,    0.883,   -7.447,    13.195],
/* 12 */  [ 1,      0.009,    0.844,   -7.447,    13.781],
/* 13 */  [ 1,      0.009,    0.792,   -7.447,    14.309],
/* 14 */  [ 1,      0.009,    0.747,   -7.447,    14.803],
/* 15 */  [ 1,      0.009,    0.689,   -7.447,    15.250],
/* 16 */  [ 1,      0.009,    0.644,   -7.447,    15.667],
/* 17 */  [ 1,      0.009,    0.592,   -7.447,    16.068],
/* 18 */  [ 1,      0.009,    0.553,   -7.447,    16.409],
/* 19 */  [ 2,      0.018,    0.850,   -7.447,    17.045],
/* 20 */  [ 2,      0.018,    0.811,   -6.990,    17.607],
/* 21 */  [ 2,      0.018,    0.736,   -6.990,    18.097],
/* 22 */  [ 2,      0.018,    0.665,   -6.990,    18.528],
/* 23 */  [ 2,      0.018,    0.610,   -6.990,    18.931],
/* 24 */  [ 2,      0.018,    0.544,   -6.990,    19.295],
/* 25 */  [ 2,      0.018,    0.528,   -6.990,    19.636],
/* 26 */  [ 3,      0.054,    0.621,   -6.990,    20.038],
/* 27 */  [ 3,      0.054,    0.673,   -6.990,    20.486],
/* 28 */  [ 3,      0.054,    0.635,   -6.990,    20.900],
/* 29 */  [ 4,      0.114,    0.626,   -6.990,    21.306],
/* 30 */  [ 4,      0.114,    0.636,   -6.020,    21.722],
/* 31 */  [ 5,      0.452,    0.615,   -6.020,    22.128],
/* 32 */  [ 5,      0.452,    0.579,   -6.020,    22.513],
/* 33 */  [ 5,      0.452,    0.551,   -6.020,    22.877],
/* 34 */  [ 7,      6.330,    0.552,   -5.229,    23.241],
/* 35 */  [ 7,      6.330,    0.559,   -5.229,    23.616],
/* 36 */  [11,      9.947,    0.528,   -5.229,    23.974],
/* 37 */  [17,    153.727,    0.479,   -5.229,    24.313]
        ]
    ]
];


// Table C.8 [SampleRateIndex][BlockType][ScalefactorBandIndex]
const PAM_TABLES_C8 = [

    // 32000Hz
    [
        // 32000Hz, Long Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [1,    0,   2,    1.000,   0.528],
/*  1 */  [2,    2,   4,    0.472,   0.305],
/*  2 */  [2,    4,   6,    0.694,   0.083],
/*  3 */  [1,    6,   7,    0.917,   0.861],
/*  4 */  [2,    7,   9,    0.139,   0.639],
/*  5 */  [2,    9,  11,    0.361,   0.417],
/*  6 */  [3,   11,  14,    0.583,   0.083],
/*  7 */  [2,   14,  16,    0.917,   0.750],
/*  8 */  [3,   16,  19,    0.250,   0.870],
/*  9 */  [3,   19,  22,    0.130,   0.833],
/* 10 */  [4,   22,  26,    0.167,   0.389],
/* 11 */  [4,   26,  30,    0.611,   0.478],
/* 12 */  [4,   30,  34,    0.522,   0.033],
/* 13 */  [3,   34,  37,    0.967,   0.917],
/* 14 */  [4,   37,  41,    0.083,   0.617],
/* 15 */  [3,   41,  44,    0.383,   0.995],
/* 16 */  [4,   44,  48,    0.005,   0.274],
/* 17 */  [3,   48,  51,    0.726,   0.480],
/* 18 */  [3,   51,  54,    0.519,   0.261],
/* 19 */  [2,   54,  56,    0.739,   0.884],
/* 20 */  [2,   56,  58,    0.116,   1.000]
        ],

        // 32000Hz, Short Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [2,    0,   2,    1.000,   0.167],
/*  1 */  [2,    3,   5,    0.833,   0.833],
/*  2 */  [3,    5,   8,    0.167,   0.500],
/*  3 */  [3,    8,  11,    0.500,   0.167],
/*  4 */  [4,   11,  15,    0.833,   0.167],
/*  5 */  [5,   15,  20,    0.833,   0.250],
/*  6 */  [4,   20,  24,    0.750,   0.250],
/*  7 */  [5,   24,  29,    0.750,   0.055],
/*  8 */  [4,   29,  33,    0.944,   0.375],
/*  9 */  [4,   33,  37,    0.625,   0.472],
/* 10 */  [3,   37,  40,    0.528,   0.937],
/* 11 */  [1,   40,  41,    0.062,   1.000]
        ]
    ],

    // 44100Hz
    [
        // 44100Hz, Long Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [3,    0,   4,    1.000,   0.056],
/*  1 */  [3,    4,   7,    0.944,   0.611],
/*  2 */  [4,    7,  11,    0.389,   0.167],
/*  3 */  [3,   11,  14,    0.833,   0.722],
/*  4 */  [3,   14,  17,    0.278,   0.139],
/*  5 */  [1,   17,  18,    0.861,   0.917],
/*  6 */  [3,   18,  21,    0.083,   0.583],
/*  7 */  [3,   21,  24,    0.417,   0.250],
/*  8 */  [3,   24,  27,    0.750,   0.805],
/*  9 */  [3,   27,  30,    0.194,   0.574],
/* 10 */  [3,   30,  33,    0.426,   0.537],
/* 11 */  [3,   33,  36,    0.463,   0.819],
/* 12 */  [4,   36,  40,    0.180,   0.100],
/* 13 */  [3,   40,  43,    0.900,   0.468],
/* 14 */  [3,   43,  46,    0.532,   0.623],
/* 15 */  [3,   46,  49,    0.376,   0.450],
/* 16 */  [3,   49,  52,    0.550,   0.552],
/* 17 */  [3,   52,  55,    0.448,   0.403],
/* 18 */  [2,   55,  57,    0.597,   0.643],
/* 19 */  [2,   57,  59,    0.357,   0.722],
/* 20 */  [2,   59,  61,    0.278,   0.960]
        ],

        // 44100Hz, Short Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [2,    0,   2,    1.000,   0.167],
/*  1 */  [2,    3,   5,    0.833,   0.833],
/*  2 */  [3,    5,   8,    0.167,   0.500],
/*  3 */  [3,    8,  11,    0.500,   0.167],
/*  4 */  [4,   11,  15,    0.833,   0.167],
/*  5 */  [5,   15,  20,    0.833,   0.250],
/*  6 */  [3,   20,  23,    0.750,   0.583],
/*  7 */  [4,   23,  27,    0.417,   0.055],
/*  8 */  [3,   27,  30,    0.944,   0.375],
/*  9 */  [3,   30,  33,    0.625,   0.300],
/* 10 */  [3,   33,  36,    0.700,   0.167],
/* 11 */  [2,   36,  38,    0.833,   1.000]
        ]
    ],

    // 48000Hz
    [
        // 48000Hz, Long Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [3,    0,    4,   1.000,   0.056],
/*  1 */  [3,    4,    7,   0.944,   0.611],
/*  2 */  [4,    7,   11,   0.389,   0.167],
/*  3 */  [3,   11,   14,   0.833,   0.722],
/*  4 */  [3,   14,   17,   0.278,   0.639],
/*  5 */  [2,   17,   19,   0.361,   0.417],
/*  6 */  [3,   19,   22,   0.583,   0.083],
/*  7 */  [2,   22,   24,   0.917,   0.750],
/*  8 */  [3,   24,   27,   0.250,   0.417],
/*  9 */  [3,   27,   30,   0.583,   0.648],
/* 10 */  [3,   30,   33,   0.352,   0.611],
/* 11 */  [3,   33,   36,   0.389,   0.625],
/* 12 */  [4,   36,   40,   0.375,   0.144],
/* 13 */  [3,   40,   43,   0.856,   0.389],
/* 14 */  [3,   43,   46,   0.611,   0.160],
/* 15 */  [3,   46,   49,   0.840,   0.217],
/* 16 */  [3,   49,   52,   0.783,   0.184],
/* 17 */  [2,   52,   54,   0.816,   0.886],
/* 18 */  [3,   54,   57,   0.114,   0.313],
/* 19 */  [2,   57,   59,   0.687,   0.452],
/* 20 */  [1,   59,   60,   0.548,   0.908]
        ],

        // 48000Hz, Short Blocks
        [
// sb      cbw  bu   bo     w1       w2
/*  0 */  [2,    0,   2,    1.000,   0.167],
/*  1 */  [2,    3,   5,    0.833,   0.833],
/*  2 */  [3,    5,   8,    0.167,   0.500],
/*  3 */  [3,    8,  11,    0.500,   0.167],
/*  4 */  [4,   11,  15,    0.833,   0.167],
/*  5 */  [4,   15,  19,    0.833,   0.583],
/*  6 */  [3,   19,  22,    0.417,   0.917],
/*  7 */  [4,   22,  26,    0.083,   0.944],
/*  8 */  [4,   26,  30,    0.055,   0.042],
/*  9 */  [2,   30,  32,    0.958,   0.567],
/* 10 */  [3,   32,  35,    0.433,   0.167],
/* 11 */  [2,   35,  37,    0.833,   0.618]
        ]
    ]
];






// 以下是标准附录D提供的（部分）参数，在Layer3编码器中并未使用。

// Table D.3
const THRESHOLD_CALCULATION_PARTITIONS = [
    // 32kHz
    [
                //   wlow,   whigh,  bval,     minval,   TMN
                    [0,      0,      0,        0,        0   ],
        /* 1  */    [1,      1,      0.00,     0.0,      24.5],
        /* 2  */    [2,      4,      0.63,     0.0,      24.5],
        /* 3  */    [5,      7,      1.56,     20.0,     24.5],
        /* 4  */    [8,      10,     2.50,     20.0,     24.5],
        /* 5  */    [11,     13,     3.44,     20.0,     24.5],
        /* 6  */    [14,     16,     4.34,     20.0,     24.5],
        /* 7  */    [17,     19,     5.17,     20.0,     24.5],
        /* 8  */    [20,     22,     5.94,     20.0,     24.5],
        /* 9  */    [23,     25,     6.63,     17.0,     24.5],
        /* 10 */    [26,     28,     7.28,     15.0,     24.5],
        /* 11 */    [29,     31,     7.90,     15.0,     24.5],
        /* 12 */    [32,     34,     8.50,     10.0,     24.5],
        /* 13 */    [35,     37,     9.06,     7.0,      24.5],
        /* 14 */    [38,     41,     9.65,     7.0,      24.5],
        /* 15 */    [42,     45,     10.28,    4.4,      24.8],
        /* 16 */    [46,     49,     10.87,    4.4,      25.4],
        /* 17 */    [50,     53,     11.41,    4.5,      25.9],
        /* 18 */    [54,     57,     11.92,    4.5,      26.4],
        /* 19 */    [58,     61,     12.39,    4.5,      26.9],
        /* 20 */    [62,     65,     12.83,    4.5,      27.3],
        /* 21 */    [66,     70,     13.29,    4.5,      27.8],
        /* 22 */    [71,     75,     13.78,    4.5,      28.3],
        /* 23 */    [76,     81,     14.27,    4.5,      28.8],
        /* 24 */    [82,     87,     14.76,    4.5,      29.3],
        /* 25 */    [88,     93,     15.22,    4.5,      29.7],
        /* 26 */    [94,     99,     15.63,    4.5,      30.1],
        /* 27 */    [100,    106,    16.06,    4.5,      30.6],
        /* 28 */    [107,    113,    16.47,    4.5,      31.0],
        /* 29 */    [114,    120,    16.86,    4.5,      31.4],
        /* 30 */    [121,    129,    17.25,    4.5,      31.8],
        /* 31 */    [130,    138,    17.65,    4.5,      32.2],
        /* 32 */    [139,    148,    18.05,    4.5,      32.5],
        /* 33 */    [149,    159,    18.42,    4.5,      32.9],
        /* 34 */    [160,    170,    18.81,    4.5,      33.3],
        /* 35 */    [171,    183,    19.18,    4.5,      33.7],
        /* 36 */    [184,    196,    19.55,    4.5,      34.1],
        /* 37 */    [197,    210,    19.93,    4.5,      34.4],
        /* 38 */    [211,    225,    20.29,    4.5,      34.8],
        /* 39 */    [226,    240,    20.65,    4.5,      35.2],
        /* 40 */    [241,    258,    21.02,    4.5,      35.5],
        /* 41 */    [259,    279,    21.38,    4.5,      35.9],
        /* 42 */    [280,    300,    21.74,    4.5,      36.2],
        /* 43 */    [301,    326,    22.10,    4.5,      36.6],
        /* 44 */    [327,    354,    22.44,    4.5,      36.9],
        /* 45 */    [355,    382,    22.79,    4.5,      37.3],
        /* 46 */    [383,    420,    23.14,    4.5,      37.6],
        /* 47 */    [421,    458,    23.49,    4.5,      38.0],
        /* 48 */    [459,    496,    23.83,    4.5,      38.3],
        /* 49 */    [497,    513,    24.07,    4.5,      38.6]
    ],

    // 44.1kHz
    [
                //   wlow,   whigh,  bval,     minval,   TMN
                    [0,      0,      0,        0,        0   ],
        /* 1  */    [1,      1,      0.00,     0.0,      24.5],
        /* 2  */    [2,      2,      0.43,     0.0,      24.5],
        /* 3  */    [3,      3,      0.86,     0.0,      24.5],
        /* 4  */    [4,      4,      1.29,     20.0,     24.5],
        /* 5  */    [5,      5,      1.72,     20.0,     24.5],
        /* 6  */    [6,      6,      2.15,     20.0,     24.5],
        /* 7  */    [7,      7,      2.58,     20.0,     24.5],
        /* 8  */    [8,      8,      3.01,     20.0,     24.5],
        /* 9  */    [9,      9,      3.45,     20.0,     24.5],
        /* 10 */    [10,     10,     3.88,     20.0,     24.5],
        /* 11 */    [11,     11,     4.28,     20.0,     24.5],
        /* 12 */    [12,     12,     4.67,     20.0,     24.5],
        /* 13 */    [13,     13,     5.06,     20.0,     24.5],
        /* 14 */    [14,     14,     5.42,     20.0,     24.5],
        /* 15 */    [15,     15,     5.77,     20.0,     24.5],
        /* 16 */    [16,     16,     6.11,     17.0,     24.5],
        /* 17 */    [17,     19,     6.73,     17.0,     24.5],
        /* 18 */    [20,     22,     7.61,     15.0,     24.5],
        /* 19 */    [23,     25,     8.44,     10.0,     24.5],
        /* 20 */    [26,     28,     9.21,     7.0,      24.5],
        /* 21 */    [29,     31,     9.88,     7.0,      24.5],
        /* 22 */    [32,     34,     10.51,    4.4,      25.0],
        /* 23 */    [35,     37,     11.11,    4.5,      25.6],
        /* 24 */    [38,     40,     11.65,    4.5,      26.2],
        /* 25 */    [41,     44,     12.24,    4.5,      26.7],
        /* 26 */    [45,     48,     12.85,    4.5,      27.4],
        /* 27 */    [49,     52,     13.41,    4.5,      27.9],
        /* 28 */    [53,     56,     13.94,    4.5,      28.4],
        /* 29 */    [57,     60,     14.42,    4.5,      28.9],
        /* 30 */    [61,     64,     14.86,    4.5,      29.4],
        /* 31 */    [65,     69,     15.32,    4.5,      29.8],
        /* 32 */    [70,     74,     15.79,    4.5,      30.3],
        /* 33 */    [75,     80,     16.26,    4.5,      30.8],
        /* 34 */    [81,     86,     16.73,    4.5,      31.2],
        /* 35 */    [87,     93,     17.19,    4.5,      31.7],
        /* 36 */    [94,     100,    17.62,    4.5,      32.1],
        /* 37 */    [101,    108,    18.05,    4.5,      32.5],
        /* 38 */    [109,    116,    18.45,    4.5,      32.9],
        /* 39 */    [117,    124,    18.83,    4.5,      33.3],
        /* 40 */    [125,    134,    19.21,    4.5,      33.7],
        /* 41 */    [135,    144,    19.60,    4.5,      34.1],
        /* 42 */    [145,    155,    20.00,    4.5,      34.5],
        /* 43 */    [156,    166,    20.38,    4.5,      34.9],
        /* 44 */    [167,    177,    20.74,    4.5,      35.2],
        /* 45 */    [178,    192,    21.12,    4.5,      35.6],
        /* 46 */    [193,    207,    21.48,    4.5,      36.0],
        /* 47 */    [208,    222,    21.84,    4.5,      36.3],
        /* 48 */    [223,    243,    22.20,    4.5,      36.7],
        /* 49 */    [244,    264,    22.56,    4.5,      37.1],
        /* 50 */    [265,    286,    22.91,    4.5,      37.4],
        /* 51 */    [287,    314,    23.26,    4.5,      37.8],
        /* 52 */    [315,    342,    23.60,    4.5,      38.1],
        /* 53 */    [343,    371,    23.95,    4.5,      38.4],
        /* 54 */    [372,    401,    24.30,    4.5,      38.8],
        /* 55 */    [402,    431,    24.65,    4.5,      39.1],
        /* 56 */    [432,    469,    25.00,    4.5,      39.5],
        /* 57 */    [470,    513,    25.33,    3.5,      39.8]
    ],

    // 48kHz
    [
                //   wlow,   whigh,  bval,     minval,   TMN
                    [0,      0,      0,        0,        0   ],
        /* 1  */    [1,      1,      0.00,     0.0,      24.5],
        /* 2  */    [2,      2,      0.47,     0.0,      24.5],
        /* 3  */    [3,      3,      0.94,     0.0,      24.5],
        /* 4  */    [4,      4,      1.41,     20.0,     24.5],
        /* 5  */    [5,      5,      1.88,     20.0,     24.5],
        /* 6  */    [6,      6,      2.34,     20.0,     24.5],
        /* 7  */    [7,      7,      2.81,     20.0,     24.5],
        /* 8  */    [8,      8,      3.28,     20.0,     24.5],
        /* 9  */    [9,      9,      3.75,     20.0,     24.5],
        /* 10 */    [10,     10,     4.20,     20.0,     24.5],
        /* 11 */    [11,     11,     4.63,     20.0,     24.5],
        /* 12 */    [12,     12,     5.05,     20.0,     24.5],
        /* 13 */    [13,     13,     5.44,     20.0,     24.5],
        /* 14 */    [14,     14,     5.83,     20.0,     24.5],
        /* 15 */    [15,     15,     6.19,     20.0,     24.5],
        /* 16 */    [16,     16,     6.52,     17.0,     24.5],
        /* 17 */    [17,     17,     6.86,     17.0,     24.5],
        /* 18 */    [18,     20,     7.49,     15.0,     24.5],
        /* 19 */    [21,     23,     8.40,     10.0,     24.5],
        /* 20 */    [24,     26,     9.24,     7.0,      24.5],
        /* 21 */    [27,     29,     9.97,     7.0,      24.5],
        /* 22 */    [30,     32,     10.65,    4.4,      25.1],
        /* 23 */    [33,     35,     11.28,    4.5,      25.8],
        /* 24 */    [36,     38,     11.86,    4.5,      26.4],
        /* 25 */    [39,     41,     12.39,    4.5,      26.9],
        /* 26 */    [42,     45,     12.96,    4.5,      27.5],
        /* 27 */    [46,     49,     13.56,    4.5,      28.1],
        /* 28 */    [50,     53,     14.12,    4.5,      28.6],
        /* 29 */    [54,     57,     14.62,    4.5,      29.1],
        /* 30 */    [58,     62,     15.14,    4.5,      29.6],
        /* 31 */    [63,     67,     15.67,    4.5,      30.2],
        /* 32 */    [68,     72,     16.15,    4.5,      30.7],
        /* 33 */    [73,     77,     16.58,    4.5,      31.1],
        /* 34 */    [78,     83,     17.02,    4.5,      31.5],
        /* 35 */    [84,     89,     17.44,    4.5,      31.9],
        /* 36 */    [90,     95,     17.84,    4.5,      32.3],
        /* 37 */    [96,     103,    18.24,    4.5,      32.7],
        /* 38 */    [104,    111,    18.66,    4.5,      33.2],
        /* 39 */    [112,    120,    19.07,    4.5,      33.6],
        /* 40 */    [121,    129,    19.47,    4.5,      34.0],
        /* 41 */    [130,    138,    19.85,    4.5,      34.3],
        /* 42 */    [139,    149,    20.23,    4.5,      34.7],
        /* 43 */    [150,    160,    20.63,    4.5,      35.1],
        /* 44 */    [161,    173,    21.02,    4.5,      35.5],
        /* 45 */    [174,    187,    21.40,    4.5,      35.9],
        /* 46 */    [188,    201,    21.76,    4.5,      36.3],
        /* 47 */    [202,    219,    22.12,    4.5,      36.6],
        /* 48 */    [220,    238,    22.47,    4.5,      37.0],
        /* 49 */    [239,    257,    22.83,    4.5,      37.3],
        /* 50 */    [258,    283,    23.18,    4.5,      37.7],
        /* 51 */    [284,    309,    23.53,    4.5,      38.0],
        /* 52 */    [310,    335,    23.88,    4.5,      38.4],
        /* 53 */    [336,    363,    24.23,    4.5,      38.7],
        /* 54 */    [364,    391,    24.58,    4.5,      39.1],
        /* 55 */    [392,    423,    24.93,    4.5,      39.4],
        /* 56 */    [424,    465,    25.27,    4.5,      39.8],
        /* 57 */    [466,    507,    25.61,    3.5,      40.1],
        /* 58 */    [508,    513,    25.81,    3.5,      40.3]
    ]
];


////////////////////////////////
//
//  缓 冲 区 （TODO 每个声道需要一个缓冲区，这块需要完善）
//
////////////////////////////////

// 前两个长块的极坐标频谱（0~1023）
let PrevLongPolarSpectrum1, PrevLongPolarSpectrum2;
// 前两个短块的极坐标频谱（0~255）
let PrevShortPolarSpectrum1, PrevShortPolarSpectrum2;

// 前两个长块的未考虑前回声效应的归一化阈值（以TCP为下标），即nb[b]
let PrevNB1, PrevNB2;

////////////////////////////////
//
//  心 理 声 学 模 型 参 数
//
////////////////////////////////

const SWITCH_PE = 1800; // @reference p95

let TABLE_C7_LONG  = PAM_TABLES_C7[SAMPLE_RATE][LONG_BLOCK];
let TABLE_C7_SHORT = PAM_TABLES_C7[SAMPLE_RATE][SHORT_BLOCK];
let TABLE_C8_LONG  = PAM_TABLES_C8[SAMPLE_RATE][LONG_BLOCK];
let TABLE_C8_SHORT = PAM_TABLES_C8[SAMPLE_RATE][SHORT_BLOCK];

// 阈值计算区间：由表C7定义，由PAM2_Init函数初始化之
let TCPS_LONG  = new Array(); // [[wlow, whigh]]
let TCPS_SHORT = new Array(); // [[wlow, whigh]]

// 扩散函数
let SPREADING_FUNCTION_LONG  = new Array();
let SPREADING_FUNCTION_SHORT = new Array();

/**
 *  心理声学模型参数初始化
 */
function PAM2_Init() {

    // TCPS_LONG init
    let wcount = 0;
    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let fft_lines = TABLE_C7_LONG[b][0];
        TCPS_LONG.push([wcount, wcount + (fft_lines - 1)]);
        wcount += fft_lines;
    }

    // TCPS_LONG init
    wcount = 0;
    for(let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let fft_lines = TABLE_C7_SHORT[b][0];
        TCPS_SHORT.push([wcount, wcount + (fft_lines - 1)]);
        wcount += fft_lines;
    }

    // SPREADING_FUNCTION_L/S init
    // NOTE 扩散函数的输入值以bark为单位，但是SPREADING_FUNCTION_*是以TCP为下标
    for(let bi = 0; bi < TABLE_C7_LONG.length; bi++) {
        SPREADING_FUNCTION_LONG[bi] = new Array();
        for(let bj = 0; bj < TABLE_C7_LONG.length; bj++) {
            let ibark = TABLE_C7_LONG[bi][4]; // bval在TABLE_C7_LONG表中的下标是4
            let jbark = TABLE_C7_LONG[bj][4];
            SPREADING_FUNCTION_LONG[bi][bj] = SpreadingFunction(ibark, jbark);
        }
    }
    for(let bi = 0; bi < TABLE_C7_SHORT.length; bi++) {
        SPREADING_FUNCTION_SHORT[bi] = new Array();
        for(let bj = 0; bj < TABLE_C7_SHORT.length; bj++) {
            let ibark = TABLE_C7_SHORT[bi][4]; // bval在TABLE_C7_LONG表中的下标是4
            let jbark = TABLE_C7_SHORT[bj][4];
            SPREADING_FUNCTION_SHORT[bi][bj] = SpreadingFunction(ibark, jbark);
        }
    }

}

/**
 * 心理声学模型：主流程
 * @input  PCM序列、granuleOffset（即一个576点序列的起始点）
 * @output PE、blockType、xmin
 */
function PAM2(PCM, granuleOffset) {

    // 初始化全局缓存

    // 计算长块/短块频谱
    
    // 计算长块/短块预测频谱

    // 计算不可预测度

    // 以长块参数计算阈值和PE

    // 根据PE判断是否Attack

    // 如果切换到短块，则计算3个短块的阈值

    // 修改全局缓存

    // 返回结果

    return {
        "PE": 0,
        "blockType": WINDOW_NORMAL,
        "xmin": 0 // 长块1个，短块3个
    };
}


/**
 * @description 窗口切换
 * @reference Fig.C.7(p95)
 * @input  prevWindowType - 上一个Granule的窗口类型
 * @input  isAttack - 由PAM2给出的是否attack的判断（true/false）
 * @output 当前Granule的窗口类型
 */
function SwitchWindowType(prevWindowType, isAttack) {
    if(prevWindowType === WINDOW_NORMAL) {
        return (isAttack) ? WINDOW_START : WINDOW_NORMAL;
    }
    else if(prevWindowType === WINDOW_START) {
        return WINDOW_SHORT;
    }
    else if(prevWindowType === WINDOW_SHORT) {
        return (isAttack) ? WINDOW_SHORT : WINDOW_STOP;
    }
    else if(prevWindowType === WINDOW_STOP) {
        return (isAttack) ? WINDOW_START : WINDOW_NORMAL;
    }
}


/**
 * @description 计算扩散函数c(w)
 * @reference C.1.5.3.2.1(p80) & D.2.3(p129)
 * @input  i - 从频点i（Bark）被扩散
 * @input  j - 扩散到频点j（Bark）所在处
 * @output 扩散函数值
 */
function SpreadingFunction(i, j) {
    let tmpx = 1.05 * (j - i);
    let x = 8 * Math.min((tmpx - 0.5) * (tmpx - 0.5) - 2 * (tmpx - 0.5), 0);
    // LayerIII的tmpy有变化，详见 @reference C.1.5.3.2.1(p80)
    // let tmpy = 15.811389 + 7.5 * (tmpx + 0.474) - 17.5 * Math.sqrt(1.0 + (tmpx + 0.474) * (tmpx + 0.474));
    // TODO 此处存疑，标准原文的(3.0 * (j - i))似乎应为(3.0 * (i - j))，曲线形状才合理。
    let tmpy = (j >= i) ? (3.0 * (i - j)) : (1.5 * (j - i));
    if(tmpy < -100) {
        return 0;
    }
    else {
        let result = Math.pow(10, (x + tmpy) / 10);
        return (result < 1e-6) ? 0 : result; // 根据 @reference C.1.5.3.2.1(p80)，凡是小于1e-6的值均设为0
    }
}

/**
 * @description 计算长块/短块极坐标频谱：加窗并执行1024/256点FFT
 * @reference D.2.4(p129)
 * @input  input - 1024（长块）/256（短块）点PCM序列，以576/192采样为中心
 * @input  isLongBlock - 长短块标识：true为长块，false为短块
 * @output 极坐标表示的频谱，r为模，f为相位 [r[w], f[w]], w=0~1023/255
 */
function CalculatePolarSpectrum(input, isLongBlock) {
    // FFT点数：长块1024，短块256
    let BlockLength = (isLongBlock) ? 1024 : 256;
    // 加Hann窗
    let windowedInput = new Array();
    for(let i = 0; i < BlockLength; i++) {
        windowedInput[i] = input[i] * (0.5 - 0.5 * Math.cos(2 * Math.PI * (i - 0.5) / BlockLength));
    }
    // 执行FFT
    let spectrum = FFT(RealArrayToComplexArray(windowedInput), BlockLength);
    // 转换成极坐标表示
    let polarSpectrum = ComplexArrayToPolarArrays(spectrum);
    return polarSpectrum;
}

/**
 * @description 计算长块/短块的预测极坐标频谱
 * @reference D.2.4(p129)
 * @input  prevPolarSpectrum1 - 当前块之前 第1个 长块或短块的极坐标频谱 [r[w], f[w]], w=0~1023/255
 * @input  prevPolarSpectrum2 - 当前块之前 第2个 长块或短块的极坐标频谱 [r[w], f[w]], w=0~1023/255
 * @input  isLongBlock - 长短块标识：true为长块，false为短块
 * @output  预测的长块/短块极坐标频谱 [r[w], f[w]], w=0~1023/255
 */
function CalculatePredictedPolarSpectrum(prevPolarSpectrum1, prevPolarSpectrum2, isLongBlock) {
    let predictedPolarSpectrum_Radius = new Array();
    let predictedPolarSpectrum_Phase = new Array();
    // 长块
    if(isLongBlock) {
        for(let w = 0; w < 1024; w++) {
            predictedPolarSpectrum_Radius[w] = 2 * prevPolarSpectrum1[0][w] - prevPolarSpectrum2[0][w];
            predictedPolarSpectrum_Phase[w]  = 2 * prevPolarSpectrum1[1][w] - prevPolarSpectrum2[1][w];
        }
    }
    // 短块
    else {
        for(let w = 0; w < 256; w++) {
            predictedPolarSpectrum_Radius[w] = 2 * prevPolarSpectrum1[0][w] - prevPolarSpectrum2[0][w];
            predictedPolarSpectrum_Phase[w]  = 2 * prevPolarSpectrum1[1][w] - prevPolarSpectrum2[1][w];
        }
    }
    return [predictedPolarSpectrum_Radius, predictedPolarSpectrum_Phase];
}

/**
 * @description 计算不可预测度c(w)
 * @reference C.1.5.3.2.1(p80) & D.2.4(p129-130)
 * @input  longBlockPolarSpectrum - 当前长块的极坐标频谱 [r[w], f[w]], w=0~1023
 * @input  longBlockPredictedPolarSpectrum - 当前长块的预测极坐标频谱 [r[w], f[w]], w=0~1023
 * @input  shortBlockPolarSpectrum - 当前短块的极坐标频谱 [r[w], f[w]], w=0~255
 * @input  shortBlockPredictedPolarSpectrum - 当前短块的预测极坐标频谱 [r[w], f[w]], w=0~255
 * @output 每个FFT频点(w)的不可预测度c[w], w=0~1023
 */
function CalculateUnpredictability(
    longBlockPolarSpectrum,  longBlockPredictedPolarSpectrum,
    shortBlockPolarSpectrum, shortBlockPredictedPolarSpectrum)
{
    // PAM2规定的c(w)计算公式  @reference D.2.4(p129-130)
    // 注意输入的 r, rp, f, fp 都是频点w上的值，因此函数没有参数w
    const BasicUnpredictability = (r, rp, f, fp) => {
        let temp1 = r * Math.cos(f) - rp * Math.cos(fp);
        let temp2 = r * Math.sin(f) - rp * Math.sin(fp);
        let temp3 = Math.sqrt(temp1 * temp1 + temp2 * temp2);
        let temp4 = r + Math.abs(rp);
        return temp3 / temp4;
    }
    // 以下是Layer3规定的c(w)计算方法 @reference C.1.5.3.2.1(p80)
    let c = new Array();
    // 长块
    let longBlockSpect_Radius = longBlockPolarSpectrum[0];
    let longBlockSpect_Phase  = longBlockPolarSpectrum[1];
    let longBlockPredictedSpect_Radius = longBlockPredictedPolarSpectrum[0];
    let longBlockPredictedSpect_Phase  = longBlockPredictedPolarSpectrum[1];
    // 短块
    let shortBlockSpect_Radius = shortBlockPolarSpectrum[0];
    let shortBlockSpect_Phase  = shortBlockPolarSpectrum[1];
    let shortBlockPredictedSpect_Radius = shortBlockPredictedPolarSpectrum[0];
    let shortBlockPredictedSpect_Phase  = shortBlockPredictedPolarSpectrum[1];

    for(let w = 0; w < 1024; w++) {
        if(w >= 0 && w < 6) {
            c[w] = BasicUnpredictability(longBlockSpect_Radius[w], longBlockPredictedSpect_Radius[w],
                                         longBlockSpect_Phase[w], longBlockPredictedSpect_Phase[w]);
        }
        else if(w >= 6 && w < 206) {
            let index = Math.round((w + 2) / 4);
            c[w] = BasicUnpredictability(shortBlockSpect_Radius[index], shortBlockPredictedSpect_Radius[index],
                                         shortBlockSpect_Phase[index], shortBlockPredictedSpect_Phase[index]);
        }
        else {
            c[w] = 0.4;
        }
    }

    return c;
}

/**
 * 计算SMR和PE（长块模式）
 */
function CalculateRatiosAndPE(longBlockPolarSpectrum, Unpred_w) {

    // (e) 计算阈值计算区间（Threshold Calculation Partition）内的能量、以及不可预测度加权的能量

    let Energy = new Array();
    let Unpred = new Array();

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let ebsum = 0;
        let cbsum = 0;
        for(let w = TCPS_LONG[b][0]; w <= TCPS_LONG[b][1]; w++) {
            let rw = longBlockPolarSpectrum[0][w];
            ebsum += (rw * rw);
            cbsum += (rw * rw * Unpred_w[w]);
        }
        Energy[b] = ebsum;
        Unpred[b] = cbsum;
    }

    // (f) 与扩散函数作卷积

    let ecb = new Array();
    let ct = new Array();

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let ecb_sum = 0;
        let ct_sum = 0;
        for(let bb = 0; bb < TABLE_C7_LONG.length; bb++) {
            let sprdngf = SPREADING_FUNCTION_LONG[bb][b];
            ecb_sum += (Energy[bb] * sprdngf);
            ct_sum  += (Unpred[bb] * sprdngf);
        }
        ecb[b] = ecb_sum;
        ct[b] = ct_sum;
    }

    // 将ct[b]按照ecb[b]归一化，得到cb[b]

    let cb = new Array();

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        if(ecb[b] === 0) {
            cb[b] = 0;
        }
        else {
            cb[b] = ct[b] / ecb[b];
            if(cb[b] < 0.01) cb[b] = 0.01; // 参考dist10
        }
    }

    // 将ecb[b]归一化，得到en[b] （Layer3所用的PAM2不需要这一步）

    // (g) 计算每个TCP的纯音指数tb

    let tb = new Array();

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        tb[b] = -0.299 - 0.43 * Math.log(cb[b]);
        tb[b] = Math.min(1.0, Math.max(0, tb[b])); // 取值范围 (0,1)
    }

    // (h) 计算每个TCP的SNR

    let SNR = new Array();

    const NMT = 6.0;   // (in dB) Noise masking tone. @reference C.1.5.3.2.1(p80)
    const TMN = 29.0;  // (in dB) Tone masking noise. @reference C.1.5.3.2.1(p80)

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let minval = TABLE_C7_LONG[b][1]; // minval在TABLE_C7_LONG表中的下标是1
        SNR[b] = Math.max(minval, tb[b] * TMN + (1.0 - tb[b]) * NMT);
    }

    // (i)(j) 计算能量阈值nb

    let nb = new Array();

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let norm = TABLE_C7_LONG[b][3]; // norm在TABLE_C7_LONG表中的下标是3
        nb[b] = ecb[b] * norm * Math.pow(10, (-SNR[b] / 10)); // NOTE 标准附录C的算法框图中，此处少了一个符号。（以dist10源码为准）
    }

    // 以下不采用附录D的算法，而是采用附录C给出的算法（见p81、p92）

    // 计算每个TCP的阈值thr[b]（前回声控制）

    let thr = new Array();

    const rpelev  = 2;  // @reference C.1.5.3.2.1(p81)
    const rpelev2 = 16; // @reference C.1.5.3.2.1(p81)

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let qthr = TABLE_C7_LONG[b][2]; // qthr在TABLE_C7_LONG表中的下标是1
        let nb_l  = PrevNB1[b] * rpelev;     // @reference p92
        let nb_ll = PrevNB2[b] * rpelev2;    // @reference p92
        // NOTE 根据dist10，标准文档p92有误，以下以dist10为准
        let min_nb = Math.min(nb[b], nb_l, nb_ll); // 标准文档是取大者
        thr[b] = Math.max(qthr, min_nb);
    }

    // 将thr[b]通过表C8直接转换到尺度因子频带上，并计算最终的ratio（Part2）

    let en_Sb = new Array();
    let thr_Sb = new Array();

    let ratio_Sb = new Array();

    for(let sb = 0; sb < 21; sb++) { // 长块SFB有21个
        let bu = TABLE_C8_LONG[sb][1];
        let bo = TABLE_C8_LONG[sb][2];
        let w1 = TABLE_C8_LONG[sb][3];
        let w2 = TABLE_C8_LONG[sb][4];

        let en_sum = w1 * Energy[bu] + w2 * Energy[bo];
        let thr_sum = w1 * thr[bu] + w2 * thr[bo];
    
        for(let b = bu + 1; b <= bo - 1; b++) {
            en_sum += Energy[b];
            thr_sum += thr[b];
        }
        en_Sb[sb] = en_sum;
        thr_Sb[sb] = thr_sum;

        if(en_Sb[sb] !== 0) {
            ratio_Sb[sb] = thr_Sb[sb] / en_Sb[sb];
        }
        else {
            ratio_Sb[sb] = 0;
        }
    }

    // 计算感知熵（PE）

    let PE = 0;

    for(let b = 0; b < TABLE_C7_LONG.length; b++) {
        let pe_b = - Math.min(0.0, Math.log((thr[b] + 1.0) / (Energy[b] + 1.0)));
        let lines = TABLE_C7_LONG[b][0]; // lines在TABLE_C7_LONG表中的下标是0
        PE += (pe_b * lines);
    }

    // 处理缓冲区：将本帧的nb保存到缓冲区中

    PrevNB2 = PrevNB1;
    PrevNB1 = nb;

    // 返回结果

    return {
        "threshold": thr_Sb,
        "ratio": ratio_Sb,
        "PE": PE
    };

}

/**
 * 计算单个短块的阈值 (p94)
 */
function CalculateShortBlockRatios(shortBlockPolarSpectrum) {

    // 计算每个TCP的能量

    let Energy = new Array();

    for(let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let ebsum = 0;
        for(let w = TCPS_SHORT[b][0]; w <= TCPS_SHORT[b][1]; w++) {
            let rw = shortBlockPolarSpectrum[0][w];
            ebsum += (rw * rw);
        }
        Energy[b] = ebsum;
    }

    // 与扩散函数作卷积

    let ecb = new Array();

    for(let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let ecb_sum = 0;
        for(let bb = 0; bb < TABLE_C7_SHORT.length; bb++) {
            let sprdngf = SPREADING_FUNCTION_SHORT[bb][b];
            ecb_sum += (Energy[bb] * sprdngf);
        }
        ecb[b] = ecb_sum;
    }

    // 计算能量阈值nb以及thr。与长块不同之处是：SNR通过查表而不是计算得到。

    let nb  = new Array();
    let thr = new Array();

    for(let b = 0; b < TABLE_C7_SHORT.length; b++) {
        let norm = TABLE_C7_SHORT[b][2]; // norm在TABLE_C7_SHORT表中的下标是2
        let SNR =  TABLE_C7_SHORT[b][3]; //  SNR在TABLE_C7_SHORT表中的下标是3
        nb[b] = ecb[b] * norm * Math.pow(10, (SNR[b] / 10)); // NOTE 注意此处式中没有负号，因为负号在表里

        let qthr = TABLE_C7_SHORT[b][1]; // qthr在TABLE_C7_LONG表中的下标是1
        thr[b] = Math.max(qthr, nb[b]);
    }

    // 将thr[b]通过表C8直接转换到尺度因子频带上，并计算最终的ratio（Part2）
    // 这里流程与长块是相同的，只是需要使用短块的参数

    let en_Sb = new Array();
    let thr_Sb = new Array();

    let ratio_Sb = new Array();

    for(let sb = 0; sb < 12; sb++) { // 短块SFB有12个
        let bu = TABLE_C8_SHORT[sb][1];
        let bo = TABLE_C8_SHORT[sb][2];
        let w1 = TABLE_C8_SHORT[sb][3];
        let w2 = TABLE_C8_SHORT[sb][4];

        let en_sum = w1 * Energy[bu] + w2 * Energy[bo];
        let thr_sum = w1 * thr[bu] + w2 * thr[bo];
    
        for(let b = bu + 1; b <= bo - 1; b++) {
            en_sum += Energy[b];
            thr_sum += thr[b];
        }
        en_Sb[sb] = en_sum;
        thr_Sb[sb] = thr_sum;

        if(en_Sb[sb] !== 0) {
            ratio_Sb[sb] = thr_Sb[sb] / en_Sb[sb];
        }
        else {
            ratio_Sb[sb] = 0;
        }
    }

    // 返回结果

    return {
        "threshold": thr_Sb,
        "ratio": ratio_Sb
    };

}
